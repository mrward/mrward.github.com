<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt Ward]]></title>
  <link href="http://lastexitcode.com/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2015-05-10T14:10:21+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Xamarin Components Directory Configuration]]></title>
    <link href="http://lastexitcode.com/blog/2015/05/10/XamarinComponentsDirectoryConfiguration/"/>
    <updated>2015-05-10T11:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/05/10/XamarinComponentsDirectoryConfiguration</id>
    <content type="html"><![CDATA[<p>One of the new features introduced in <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.9/xamarin.studio_5.9/">Xamarin Studio 5.9</a> is the ability to configure the directory where Xamarin Components are installed to when they are added to a project.</p>

<p>By default, when a Component from the <a href="https://components.xamarin.com/">Xamarin Component store</a> is added to a project, the Component is installed to a Components directory inside the solution&rsquo;s directory.</p>

<p><img src="http://lastexitcode.com/images/blog/XamarinComponentsDirectoryConfiguration/DefaultXamarinComponentsDirectoryForSolution.png" title="Default Components directory for a solution" alt="Default Components directory for a solution"></p>

<p>The project will have references added that refer to assemblies inside this Components directory.</p>

<pre><code>&lt;Reference Include="Microsoft.WindowsAzure.Mobile.Ext"&gt;
  &lt;HintPath&gt;..\Components\azure-mobile-services-1.3.1\lib\android\Microsoft.WindowsAzure.Mobile.Ext.dll&lt;/HintPath&gt;
&lt;/Reference&gt;
&lt;Reference Include="Microsoft.WindowsAzure.Mobile"&gt;
  &lt;HintPath&gt;..\Components\azure-mobile-services-1.3.1\lib\android\Microsoft.WindowsAzure.Mobile.dll&lt;/HintPath&gt;
&lt;/Reference&gt;
&lt;Reference Include="Newtonsoft.Json"&gt;
  &lt;HintPath&gt;..\Components\azure-mobile-services-1.3.1\lib\android\Newtonsoft.Json.dll&lt;/HintPath&gt;
&lt;/Reference&gt;
&lt;Reference Include="System.Net.Http.Extensions"&gt;
  &lt;HintPath&gt;..\Components\azure-mobile-services-1.3.1\lib\android\System.Net.Http.Extensions.dll&lt;/HintPath&gt;
&lt;/Reference&gt;
&lt;Reference Include="System.Net.Http.Primitives"&gt;
  &lt;HintPath&gt;..\Components\azure-mobile-services-1.3.1\lib\android\System.Net.Http.Primitives.dll&lt;/HintPath&gt;
&lt;/Reference&gt;
</code></pre>

<p>If a project is shared between multiple solutions then Xamarin Studio can have multiple different Components directories, one for each solution. This can cause Xamarin Studio to modify the hint paths in the project file to use a different Components directory depending on which solution was opened.</p>

<p>A simple way to reproduce this problem is to create one solution with a project that has a Component, then create another solution in a different directory, and add the same project to this new solution. The Component will be downloaded again into the Components directory relative to the new solution and the assembly references in the project file will be modified to use this new Components location.</p>

<p>Now let us take a look at how to solve this problem by configuring the Components directory.</p>

<h2>Configuring the Components Directory</h2>

<p>To configure the Components directory used by a project you can use a components.config file, as shown below.</p>

<p>  <components></p>

<pre><code>&lt;config&gt;
  &lt;add key="cachePath" value="..\Components" /&gt;
&lt;/config&gt;
</code></pre>

<p>  </components></p>

<p>The path specified in the components.config file can be a full path or a relative path. If it is a relative path then it is relative to the directory containing the components.config file.</p>

<p>The path in the components.config file will be normalized so it contains the correct directory separators on non-Windows operating systems, so you can use either a forward slash or a backslash in the path.</p>

<p>Now let us take a look at how Xamarin Studio finds this components.config file.</p>

<p>Xamarin Studio, when a solution is opened, will check for a components.config file in several locations based on the solution&rsquo;s directory. If we have a solution in the directory /Users/matt/Projects/MyAndroidApp/ then the full set of locations checked is as follows:</p>

<ol>
<li> /Users/matt/Projects/MyAndroidApp/.components/components.config</li>
<li> /Users/matt/Projects/MyAndroidApp/components.config</li>
<li> /Users/matt/Projects/components.config</li>
<li> /Users/matt/components.config</li>
<li> /Users/components.config</li>
<li> /components.config</li>
<li> ~/Preferences/Xamarin/Components/components.config</li>
</ol>


<p>Note that on Windows the last location checked is:</p>

<p>  %AppData%\Xamarin\Components\components.config</p>

<p>If you put the components.config file in a directory that is a parent of multiple solutions then all the solutions can use this common components.config file.</p>

<p>If the components.config file is missing or cannot be read then the default Components directory is used, which is inside the solution&rsquo;s directory.</p>

<p>If there is an error whilst reading the components.config file then the error will be logged by Xamarin Studio and the default Components directory will be used.</p>

<p>The Components directory to be used is cached when the solution is loaded so changes made to the components.config file require the solution to be closed and re-opened before Xamarin Studio will use the new settings.</p>

<p>To help diagnose problems when configuring the Components directory Xamarin Studio will log information in the Components.log file. The Components.log file can be found by selecting Open Log Directory from Xamarin Studio&rsquo;s Help menu. Two examples taken from the Components.log file are shown below. The first example shows the message logged when a components.config file cannot be found.</p>

<pre><code>[2015-05-10 11:00:29.0] DEBUG: No components.config file found. Using default path. Files checked: /Users/matt/Projects/MyAndroidApp/.components/components.config
/Users/matt/Projects/MyAndroidApp/components.config
/Users/matt/Projects/components.config
/Users/matt/components.config
/Users/components.config
/components.config
/Users/matt/Library/Preferences/Xamarin/Components/components.config
</code></pre>

<p>The next example shows the message logged when a components.config file is found.</p>

<pre><code>[2015-05-10 11:10:24.1] DEBUG: Using custom components cache path '/Users/matt/Projects/MyAndroidApp/Components'. components.config file found at '/Users/matt/Projects/MyAndroidApp/components.config'.
</code></pre>

<h2>Component Restore</h2>

<p>The latest version of <a href="https://components.xamarin.com/submit/xpkg">xamarin-component.exe</a> also supports using the configured Components directory. Its restore command will restore the Components to the directory as specified in the components.config file.</p>

<pre><code>mono xamarin-component.exe restore path/to/solution.sln
</code></pre>

<p>xamarin-component.exe will look for the components.config file in the same directories as Xamarin Studio.</p>

<h2>Comparison with NuGet</h2>

<p>NuGet has similar behaviour to Components in Xamarin Studio. All NuGet packages are downloaded to a packages directory inside the solution directory by default. To override this behaviour you can create a <a href="https://docs.nuget.org/consume/nuget-config-file">NuGet.Config file</a>. The NuGet.Config file allows the packages directory to be configured through a repositoryPath setting.</p>

<p>  <configuration></p>

<pre><code>&lt;config&gt;
  &lt;add key="repositoryPath" value="../../packages" /&gt;
&lt;/config&gt;
</code></pre>

<p>  </configuration></p>

<p>NuGet will look for this NuGet.Config file in several places. Assuming the solution directory is /Users/matt/Projects/MyAndroidApp/ the NuGet.Config file will be looked for in the locations as shown below:</p>

<ol>
<li> /Users/matt/Projects/MyAndroidApp/.nuget/NuGet.Config</li>
<li> /Users/matt/Projects/MyAndroidApp/NuGet.Config</li>
<li> /Users/matt/Projects/NuGet.Config</li>
<li> /Users/matt/NuGet.Config</li>
<li> /Users/NuGet.Config</li>
<li> /NuGet.config</li>
<li> ~/.config/NuGet/NuGet.Config (Windows: %AppData%\NuGet\NuGet.Config)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.9]]></title>
    <link href="http://lastexitcode.com/blog/2015/05/03/NuGetSupportInXamarinStudio5-9/"/>
    <updated>2015-05-03T14:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/05/03/NuGetSupportInXamarinStudio5-9</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 2.8.3 support</li>
<li> Always show Packages folder in Solution window</li>
<li> Target framework change detected on project reload</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.9 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.9/xamarin.studio_5.9/">release notes</a>.</p>

<h2>NuGet 2.8.3 support</h2>

<p>Xamarin Studio now supports NuGet 2.8.3. This allows a NuGet package to target NuGet 2.8.3 explicitly. For example the PCLStorage 1.0.1 NuGet package will not install into Xamarin Studio 5.8, since it requires NuGet 2.8.3, but will install into Xamarin Studio 5.9.</p>

<p>NuGet packages, such as xunit, that target the new ASP.NET target frameworks, ASP.NetCore 5.0 and ASP.Net 5.0, can now be installed into Xamarin Studio now that it supports NuGet 2.8.3. Previously you would see an error message in the Package Console window:</p>

<pre><code>'xunit.core' already has a dependency defined for 'xunit.extensibility.core'.
</code></pre>

<p>Support for NuGet 2.8.5 is planned for Xamarin Studio 5.9.1.</p>

<h2>Always Show Packages Folder in Solution window</h2>

<p>The Packages folder is now always shown in the Solution window even if the project has no NuGet packages. Previously the Packages folder would only be shown if one or more NuGet packages were installed in a project.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-9/PackagesFolderInSolutionWindow.png" title="Packages folder in Solution window" alt="Packages folder in Solution window"></p>

<h2>Target Framework Change Detected on Project Reload</h2>

<p>Xamarin Studio will detect a project file has been changed outside of Xamarin Studio and will reload the project. Now Xamarin Studio on reloading will detect the project&rsquo;s target framework has been changed and will  check the NuGet packages are compatible with the new target framework. Previously Xamarin Studio would only check the compatibility of NuGet packages if the target framework was changed from within Xamarin Studio via the project options.</p>

<p>This allows Xamarin Studio to check the NuGet packages are compatible when an iOS Classic project is converted to an iOS Unified project using Xamarin Studio&rsquo;s migration tool. The NuGet packages, such as Xamarin.Forms, can then be retargeted by Xamarin Studio using the <a href="blog/2014/08/10/NuGetSupportInXamarinStudio5-2/">Retarget menu</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScript Support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2015/04/01/TypeScriptSupportInXamarinStudio/"/>
    <updated>2015-04-01T21:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/04/01/TypeScriptSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio and MonoDevelop now have support for <a href="http://www.typescriptlang.org/">TypeScript</a> on Linux, Mac and Windows with an alpha release of the <a href="https://github.com/mrward/typescript-addin">TypeScript Addin</a>.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/EditingTypeScriptInTextEditor.png" title="Editing TypeScript in Xamarin Studio on the Mac" alt="Editing TypeScript in Xamarin Studio on the Mac"></p>

<p>The TypeScript addin uses <a href="http://v8dotnet.codeplex.com">V8.NET</a> which is a library that allows a .NET application to host <a href="https://code.google.com/p/v8/">Google&rsquo;s V8 JavaScript engine</a> and have JavaScript interact with .NET objects in the host application.</p>

<p>The ability to support Windows, Mac and Linux would not have been possible without the work done by <a href="http://jameswilkins.net">James Wilkins</a> and <a href="https://github.com/chrisber">Christian Bernasko</a>. <a href="http://jameswilkins.net">James Wilkins</a> created the <a href="http://v8dotnet.codeplex.com">V8.NET</a> library and when it was first released it supported only Windows. <a href="https://github.com/chrisber">Christian Bernasko</a> then took V8.NET and modified it to make it work with Mono on Linux and the Mac. The TypeScript addin is using V8.NET binaries built by Christian from his port of <a href="https://github.com/chrisber/v8dotnet/tree/development-mono">V8.NET</a>.</p>

<p>Please note that this is an alpha release and because V8.NET uses a native library it can cause Xamarin Studio or MonoDevelop to terminate if a bug is encountered.</p>

<h2>Features</h2>

<ul>
<li>TypeScript compilation on save or build.</li>
<li>Code completion.</li>
<li>Find references.</li>
<li>Rename refactoring.</li>
<li>Go to declaration.</li>
<li>Errors highlighted as you type.</li>
<li>Code folding.</li>
</ul>


<p>The addin supports:</p>

<ul>
<li>Xamarin Studio MonoDevelop 5 and above.</li>
<li>TypeScript 1.4</li>
<li>Linux, Mac and Windows.</li>
</ul>


<h2>Installing the addin</h2>

<p>The addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> in the alpha channel. By default the alpha repository is not enabled so you will have to enable it before you can find and install the addin.</p>

<p>In Xamarin Studio open the Add-in Manager and select the Gallery tab. Click the repository drop down and if <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> is not displayed then click <strong>Manage Repositories&hellip;</strong>. In the window that opens tick the check box next to <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> and then click the Close button.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/AddingAlphaChannelAddins.png" title="Enabling alpha channel addins" alt="Enabling alpha channel addins"></p>

<p>Back in the Add-in Manager dialog click the Refresh button to update the list of addins. Use the search text box in the top right hand corner of the dialog to search for the addin by typing in <strong>TypeScript</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/AddinManagerTypeScriptAddin.png" title="TypeScript addin selected in Addin Manager dialog" alt="TypeScript addin selected in Addin Manager dialog"></p>

<p>Select the TypeScript addin and then click the <strong>Install&hellip;</strong> button.</p>

<p>Note that if you are using Linux 32 bit then you should install the <strong>TypeScript Linux 32 bit</strong> addin. The other <strong>TypeScript</strong> addin listed supports Linux 64 bit. Hopefully in the future it will be possible to support both Linux 32 bit and 64 bit using the same addin.</p>

<h2>Getting Started</h2>

<p>Now that the TypeScript addin is installed let us create a TypeScript file.</p>

<p>To add a TypeScript file open the New File dialog, select the <strong>Web</strong> category and select <strong>Empty TypeScript</strong> file.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/NewFileDialogNewTypeScriptFile.png" title="New File Dialog - New TypeScript File" alt="New File Dialog - New TypeScript File"></p>

<p>Give the file a name and click the New button.</p>

<p>Note that currently the TypeScript file needs to be included in a project. Standalone TypeScript project files are not supported. TypeScript files can be added to any .NET project.</p>

<h2>Code Completion</h2>

<p>When editing the TypeScript code you will have code completion when you press the dot character.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptCodeCompletion.png" title="TypeScript dot code completion" alt="TypeScript dot code completion"></p>

<p>Code completion also works when you type the opening bracket of a function.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptMethodCompletion.png" title="TypeScript method completion" alt="TypeScript method completion"></p>

<h2>Go to Declaration</h2>

<p>The text editor&rsquo;s right click menu has three TypeScript menus: Go to Declaration, Find References and Rename.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptTextEditorContextMenu.png" title="Text editor context menu with TypeScript menu options" alt="Text editor context menu with TypeScript menu options"></p>

<p>The Go To Declaration menu option will open the corresponding definition in the text editor.</p>

<h2>Find References</h2>

<p>Find References will show the references in the Search Results window.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptReferencesInSearchResults.png" title="TypeScript references shown in Search Results window" alt="TypeScript references shown in Search Results window"></p>

<h2>Rename</h2>

<p>Selecting the Rename menu option in the text editor will open the Rename dialog where you can type in a new name and click OK to have it updated.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptRenameDialog.png" title="TypeScript rename dialog" alt="TypeScript rename dialog"></p>

<p>Note that currently on Linux the Rename dialog will only be displayed if the keyboard shortcut F2 is used. Selecting the context menu will not show the Rename dialog on Linux but will work on Windows and on the Mac.</p>

<h2>Error Highlighting</h2>

<p>Errors in your TypeScript code will be highlighted as you are typing in the text editor.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptErrorsHighlightedInTextEditor.png" title="TypeScript errors highlighted in text editor" alt="TypeScript errors highlighted in text editor"></p>

<h2>Code Folding</h2>

<p>Code folding is supported for TypeScript classes, modules and interfaces.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptCodeFolding.png" title="TypeScript code folding" alt="TypeScript code folding"></p>

<p>Code folding by default is disabled. To enable code folding open the Preferences dialog and in the Text Editor section select the General category, then tick the <strong>Enable code folding</strong> check box.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/PreferencesEnableCodeFolding.png" title="Preferences - Enabling code folding" alt="Preferences - Enabling code folding"></p>

<h2>Compiling to JavaScript</h2>

<p>By default the TypeScript files will be compiled to JavaScript when the project is compiled.</p>

<p>There are more compiler options available in the project options in the Build &ndash; TypeScript category.</p>

<p><img src="http://lastexitcode.com/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptCompilerOptions.png" title="TypeScript compiler options for the project" alt="TypeScript compiler options for the project"></p>

<p>On this page you can change when the compiler is run and what options are passed to the compiler when generating JavaScript code.</p>

<p>If an <strong>Output file</strong> is specified then all the TypeScript files will be compiled into a single JavaScript file. If an <strong>Output directory</strong> is specified then the JavaScript files will be generated in that directory instead of next to the TypeScript files.</p>

<p>That is the end of our quick look at TypeScript support in Xamarin Studio and MonoDevelop.</p>

<h2>Source Code</h2>

<p>The source code for the addin and for the V8.NET engine that works on Mono are available on GitHub.</p>

<ul>
<li><p><a href="ttps://github.com/mrward/typescript-addin/tree/monodevelop-v8-dotnet">TypeScript addin source code</a>.</p></li>
<li><p><a href="https://github.com/chrisber/v8dotnet/tree/development-mono">V8.NET source code</a>.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.8]]></title>
    <link href="http://lastexitcode.com/blog/2015/03/21/NuGetSupportInXamarinStudio5-8/"/>
    <updated>2015-03-21T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2015/03/21/NuGetSupportInXamarinStudio5-8</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 5.8 <a href="http://blog.xamarin.com/xamarin-releases-watch-kit-support-like-clockwork/">added support for Apple&rsquo;s Watch Kit</a> and it also includes some NuGet bug fixes.</p>

<h2>Bug Fixes</h2>

<ul>
<li> Allow ASP.NET project templates to work offline.</li>
<li> Build error after updating Xamarin.Forms in a project created by Visual Studio</li>
<li> Custom MSBuild task not updated after updating Xamarin.Forms</li>
<li> Update information in the Solution window incorrect after updating packages</li>
<li> Check for package updates continues after closing a solution</li>
<li> Check for package updates prevents packages from being removed</li>
<li> Incorrect error message displayed when checking for package updates</li>
<li> Exception when checking for package updates after changing target framework of a project</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.8 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.8/xamarin.studio_5.8/">release notes</a>.</p>

<p><strong>Allow ASP.NET project templates to work offline</strong></p>

<p>Previously it was not possible to create an ASP.NET project without an internet connection even if all the NuGet packages were available in the local machine&rsquo;s NuGet packages cache.</p>

<p>Now the local machine&rsquo;s NuGet cache is used as the primary source of packages for project templates so it is possible to create an ASP.NET project without an internet connection if the NuGet packages are already in this cache.</p>

<p>This problem did not affect project templates, such as Xamarin.Forms, which include the NuGet packages with their project templates.</p>

<p><strong>Build error after updating Xamarin.Forms in a project created by Visual Studio</strong></p>

<p>When a NuGet package that uses custom MSBuild targets file, such as Xamarin.Forms, is added to a project by Visual Studio the project file has an extra Target added, as shown below.</p>

<pre><code>&lt;Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild"&gt;
  &lt;PropertyGroup&gt;
    &lt;ErrorText&gt;This project references NuGet package(s) that are missing on this computer.
Enable NuGet Package Restore to download them.  For more information, see
http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.&lt;/ErrorText&gt;
  &lt;/PropertyGroup&gt;
  &lt;Error Condition="!Exists('packages\Xamarin.Forms.1.2.1.6229\build\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\Xamarin.Forms.targets')" Text="$([System.String]::Format('$(ErrorText)', 'packages\Xamarin.Forms.1.2.1.6229\build\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\Xamarin.Forms.targets'))" /&gt;
&lt;/Target&gt;
</code></pre>

<p>When the project was opened in a previous version of Xamarin Studio, and the NuGet package is updated or removed, the Error task was not updated. The project would then fail to compile with an error being reported that the old .targets file could not be found.</p>

<p>Now when updating or removing a NuGet package the EnsureNuGetPackageBuildImports target is
checked and the matching Error task will be removed. If there are no remaining Error tasks then the EnsureNuGetPackageBuildImports target is also removed. This prevents build errors after updating or uninstalling the old
NuGet package from the project.</p>

<p>Note that Xamarin Studio will not add an EnsureNuGetPackageBuildImports target and will not add Error tasks to a project when a NuGet package is added or updated.</p>

<p><strong>Custom MSBuild task not updated after updating Xamarin.Forms</strong></p>

<p>If a project that had a reference to Xamarin.Forms was compiled once, then the NuGet package was updated, the old MSBuild task was still being used when compiling.</p>

<p>For Xamarin.Forms this could cause a &ldquo;XamlG Task failed unexpectedly&rdquo; build error to be reported. Also the Package Console would report not being able to access the Xamarin.Forms.Build.Tasks.dll when updating or removing the NuGet package.</p>

<p>The problem was that MonoDevelop.Projects.Formats.MSBuild.exe that compiles the project would lock the MSBuild task assembly.</p>

<p>Now when an MSBuild import is removed on updating a NuGet package Xamarin Studio will dispose the current project builder which will shutdown the MonoDevelop.Projects.Formats.MSBuild.exe process. This unlocks any custom MSBuild task assemblies loaded by this process,
allowing the old NuGet package to be removed without any access denied errors, and when the project is recompiled again it will use the correct MSBuild task assembly.</p>

<p><strong>Update information in the Solution window incorrect after updating packages</strong></p>

<p>With check for updates enabled in Preferences, when an ASP.NET project is created, updates are shown as available for several packages. When
the packages are updated the Solution window would still show updates as being available even though the packages had been updated.</p>

<p>The problem was that a change was made in Xamarin Studio 5.7 to update package dependencies at the same time as the package was updated. This meant that an update event was not fired for each
package being updated which would result in some package updates being shown as available in the Solution window even when they had been updated.</p>

<p>Now Xamarin Studio will check all package references when a package is updated so if any package dependencies are updated the Solution
window will show the correct status of the packages.</p>

<p><strong>Check for package updates continues after closing a solution</strong></p>

<p>Xamarin Studio will now stop checking for package updates when the current solution is closed. Previously this would continue until the check was completed.</p>

<p><strong>Check for updates prevents packages from being removed</strong></p>

<p>Previously when Xamarin Studio was checking for package updates all other NuGet actions, such as updating, adding or removing packages, would not be run until the check for updates had completed.
Now the check for NuGet package updates is done on a separate thread so other NuGet actions can be run at the same time.</p>

<p><strong>Incorrect error message displayed when checking for package updates</strong></p>

<p>The Package Console would sometimes show the error message &ldquo;An exception was thrown while dispatching a method call in the UI thread.&rdquo; instead of the underlying error making it difficult to determine the cause of the problem.
For example if there was a zero byte sized .nupkg file in the solution&rsquo;s package directory, and check for updates is enabled, then
the wrong error was displayed in the Package Console.</p>

<p><strong>Exception when checking for package updates after changing target framework of a project</strong></p>

<p>Previously a null reference exception would be reported in the Package console window when doing the following:</p>

<ol>
<li> Create a project with one NuGet package added.</li>
<li> Create two NuGet package sources in Preferences. Disable all other package sources.</li>
<li> Open the Add Packages dialog and select All Sources.</li>
<li> Go back to Preferences and uncheck both of the package sources.</li>
<li> Change the target framework of the project in the project options.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.7]]></title>
    <link href="http://lastexitcode.com/blog/2015/01/18/NuGetSupportInXamarinStudio5-7/"/>
    <updated>2015-01-18T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2015/01/18/NuGetSupportInXamarinStudio5-7</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet menus renamed to make them easier to discover</li>
<li> Solution window icons made consistent</li>
<li> Fix build errors after MSBuild target restored for package</li>
<li> Fix types imported by MSBuild target not recognised after NuGet package installed</li>
<li> Fix Solution window cannot be opened when access to NuGet.Config is denied</li>
<li> Fix updating all packages not updating dependencies</li>
<li> Fix pre-release NuGet package being downgraded on update</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.7 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.7/xamarin.studio_5.7/">release notes</a>.</p>

<h2>NuGet menus renamed</h2>

<p>The menus have been changed so they now include the word NuGet to make them easier to discover.</p>

<h3>Project menu</h3>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-7/ProjectMenuNuGetMenuItems.png" title="NuGet menu items in the main Project menu" alt="NuGet menu items in the main Project menu"></p>

<h3>Solution context menu</h3>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-7/SolutionContextMenuNuGetMenuItems.png" title="NuGet menu items in the Solution context menu" alt="NuGet menu items in the Solution context menu"></p>

<h3>Project context menu</h3>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-7/ProjectContextMenuNuGetMenuItems.png" title="NuGet menu items in the Project context menu" alt="NuGet menu items in the Project context menu"></p>

<h2>Solution Window</h2>

<p>The warning icon used in the Solution window has been changed so it is consistent with other Solution window items.</p>

<h3>Package not restored</h3>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-7/SolutionWindowNuGetPackageMissing.png" title="Solution Window - NuGet package not restored" alt="Solution Window - NuGet package not restored"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-7/SolutionWindowNuGetPackageMissingWithTooltip.png" title="Solution Window - NuGet package not restored with tooltip" alt="Solution Window - NuGet package not restored with tooltip"></p>

<p>A new warning icon is used for packages that are not restored, the text is greyed out and hovering over the warning icon shows information about the warning.</p>

<h3>Package installing</h3>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-7/SolutionWindowNuGetPackageInstalling.png" title="Solution Window - NuGet package installing" alt="Solution Window - NuGet package installing"></p>

<p>When a package is being installed the text is greyed out to indicate that the package is not currently available in the project and the text shows (installing) to distinguish between a package being installed and a package that is not restored.</p>

<h3>Package needs retargeting</h3>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-7/SolutionWindowNuGetPackageNeedsRetargetingWithTooltip.png" title="Solution Window - NuGet package needs retargeting" alt="Solution Window - NuGet package needs retargeting"></p>

<p>A new warning icon is used for packages that need retargeting. The package id text has changed to black text instead of orange. Hovering over warning icon shows a message that the package needs retargeting.</p>

<h2>Bug Fixes</h2>

<p><strong>Build errors after MSBuild target restored for package</strong></p>

<p>If a NuGet package had an MSBuild target that added extra references to the project then on restoring the
NuGet package those references were still unavailable and the build would still fail.</p>

<p>This problem occurs with the MonoGame.Binaries NuGet package. The MonoGame.Binaries NuGet package has a custom MSBuild .targets file that adds extra references:</p>

<pre><code>&lt;Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
  &lt;ItemGroup&gt;
    &lt;Reference Include="MonoGame.Framework"&gt;
      &lt;HintPath&gt;$(MSBuildThisFileDirectory)\MonoGame.Framework.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Tao.Sdl"&gt;
      &lt;HintPath&gt;$(MSBuildThisFileDirectory)\Tao.Sdl.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="OpenTK"&gt;
      &lt;HintPath&gt;$(MSBuildThisFileDirectory)\OpenTK.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre>

<p>If the MonoGame.Binaries NuGet package is not available on opening the
project in Xamarin Studio the project will fail to build after
restoring the NuGet package since the references in the MSBuild targets file were not being refreshed.</p>

<p>Now after a NuGet package restore the MSBuild host used by Xamarin Studio is
refreshed which allows the references in the MSBuild targets file to be found and the project to compile without any build errors.</p>

<p><strong>Types imported by MSBuild target not recognised after NuGet package installed</strong></p>

<p>If a NuGet package had an MSBuild target that added extra references to the project then on installing the
NuGet package the types from those references were still unavailable to Xamarin Studio and would be highlighted in red
in the text editor. To fix this the solution had to be closed and re-opened. This problem occurs with the MonoGame.Binaries NuGet package.</p>

<p>Now after a NuGet package is installed and it contains a MSBuild targets
file then Xamarin Studio&rsquo;s type system will be refreshed for that project. The
types will then be known by Xamarin Studio and no longer be highlighted in red in the text editor.</p>

<p><strong>Solution window cannot be opened when access to NuGet.Config is denied</strong></p>

<p>If the NuGet directory containing the NuGet.Config file cannot be created or read by NuGet then an exception is thrown. This exception was not being handled by Xamarin Studio and would prevent the
solution window from opening.</p>

<p>Now if there is any error creating this
directory, or trying to load the NuGet.Config file, then the exception is caught which allows the Solution window to open. If the NuGet directory containing the NuGet.Config file cannot be created then it will not be possible to use NuGet in Xamarin Studio but it will not prevent the solution pad from being used.</p>

<p><strong>Updating all packages not updating dependencies</strong></p>

<p>Updating NuGet packages for the entire solution would not install the Xamarin.Android.Support.v13 NuGet package which was added as a new dependency to the Xamarin.Android.Support.v4 NuGet package.</p>

<p>The problem was that the NuGet package update was not configured to update any
NuGet package dependencies when updating all packages in the solution.
Updating all packages in the project or the NuGet package individually
would update package dependencies correctly.</p>

<p>Note that this fix has introduced a bug where Xamarin Studio will show updates as available even though the updates have just been installed for the solution. This new bug should be fixed in Xamarin Studio 5.8.</p>

<p><strong>Pre-release NuGet package being downgraded on update</strong></p>

<p>When a pre-release NuGet package was installed that was newer than the latest stable NuGet package available then updating the package would install the stable version even though it was a lower version. Now an explicit check is made to ensure that an older NuGet package is not being installed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Portable Class Libraries for Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2014/11/16/InstallingPortableClassLibrariesForXamarinStudio/"/>
    <updated>2014-11-16T10:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2014/11/16/InstallingPortableClassLibrariesForXamarinStudio</id>
    <content type="html"><![CDATA[<p>In order to use Portable Class Libraries (PCLs) with Xamarin Studio you need to have the following installed:</p>

<ul>
<li>Portable Class Library Reference Assemblies.</li>
<li>Portable Class Library MSBuild targets.</li>
<li>Xamarin&rsquo;s Portable Class Library Profiles.</li>
</ul>


<p>If you do not all of the above installed then you may run into the following problems when using Xamarin Studio.</p>

<ol>
<li>Unable to create a Portable Library project since the project template is not available.</li>
<li><p>Unable to install a NuGet package, such as Json.NET, that contains PCL assemblies into an Android or iOS project. Example error message below:</p>

<p>Could not install package &lsquo;Newtonsoft.Json 6.0.6&rsquo;. You are trying to install this package into a project that targets &lsquo;MonoAndroid,Version=v4.4&rsquo;, but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.</p></li>
</ol>


<p>On the Mac the Portable Class Libraries for Mono 3.10.0 are installed into the directory:</p>

<pre><code>/Library/Frameworks/Mono.framework/Versions/3.10.0/lib/mono/xbuild-frameworks/.NETPortable
</code></pre>

<p>On Windows the Portable Class Libraries are installed into the directory:</p>

<pre><code>C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETPortable
</code></pre>

<p>So let us take a look at how to install everything required to get PCLs fully supported within Xamarin Studio.</p>

<h2>Mac &ndash; Installing Portable Class Libraries</h2>

<p>The Portable Class Libraries are included with the <a href="http://www.mono-project.com/download/">Mono Development Kit (MDK)</a> but not with the Mono Runtime Environment (MRE). If you are installing Mono yourself instead of using Xamarin&rsquo;s Universal Installer then you will want to install the MDK instead of the MRE. The MDK includes the MRE as well as extra tools, libraries and the .NET Portable Class Library profiles.</p>

<p>If Mono is updated from within Xamarin Studio using <strong>Check for updates</strong> then the MDK should be installed.</p>

<h2>Windows &ndash; Installing Portable Class Libraries</h2>

<p>Xamarin Studio on Windows uses Microsoft&rsquo;s .NET Framework instead of Mono so the Portable Class Libraries need to be installed separately. To install the Portable Class Libraries on Windows you have three options:</p>

<ol>
<li> Install Visual Studio 2013 (full or <a href="http://www.microsoft.com/en-us/download/details.aspx?id=43733">Express version</a>). Update 2 or above is required.</li>
<li> Install the <a href="https://visualstudiogallery.msdn.microsoft.com/b0e0b5e9-e138-410b-ad10-00cb3caf4981/">Portable Library Tools</a> and the <a href="http://www.microsoft.com/en-us/download/details.aspx?id=40727">Portable Library Reference Assemblies 4.6</a>.</li>
<li> Install the <a href="https://visualstudiogallery.msdn.microsoft.com/b0e0b5e9-e138-410b-ad10-00cb3caf4981/">Portable Library Tools</a> and copy the .NETPortable directory from Mono over to Windows.</li>
</ol>


<p>If you do not want to install Visual Studio 2013 then you should look at options 2 or 3.</p>

<p>One problem with option 2 is that not all the .NET Portable profiles, such as Profile 259, will be installed. The full list of what .NET Portable profiles are installed by each of the installers listed above is available from the <a href="http://lastexitcode.com/projects/NuGet/PortableProfiles/">.NET Portable Profiles page</a></p>

<p>Let us take a look in more detail at the option 2 since this has a few manual steps.</p>

<p><strong>Windows &ndash; Installing the Portable Library Tools and the Portable Library Reference Assemblies 4.6</strong></p>

<p>Before you start make sure Xamarin Studio is not running.</p>

<p>Download the <a href="https://visualstudiogallery.msdn.microsoft.com/b0e0b5e9-e138-410b-ad10-00cb3caf4981/">Portable Library Tools</a>.</p>

<p>To install the Portable Library Tools open a command prompt where PortableLibraryTools.exe was downloaded and run:</p>

<pre><code>PortableLibraryTools /buildmachine
</code></pre>

<p>Download the <a href="http://www.microsoft.com/en-us/download/details.aspx?id=40727">Portable Library Reference Assemblies 4.6</a> and run the NetFx_PortableLibraryReferenceAssemblies46.msi installer. This will install a PortableReferenceAssemblies.zip file into the directory:</p>

<pre><code>C:\Program Files (x86)\Microsoft .NET Portable Library Reference Assemblies 4.6
</code></pre>

<p>This PortableReferenceAssemblies.zip file contains three directories (4.0, 4.5 and 4.6) which need to be extracted and copied into the PCLs directory:</p>

<pre><code> C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETPortable
</code></pre>

<p>The PortableReferenceAssemblies.zip file contains files which already exist in the above folder and you should replace the existing files with the new versions from the .zip file.</p>

<p>If you installed Xamarin Studio before you installed the Portable Class Libraries you will now need to reinstall the Xamarin PCL profiles. The Xamarin PCL profiles will only be installed if the Portable Class Libraries were already installed. The simplest way to do this is to find <strong>Xamarin</strong> in the Control Panel&rsquo;s <strong>Programs and Features</strong>, right click it and select <strong>Repair</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/InstallingPortableClassLibrariesForXamarinStudio/AddRemoveProgramsRepairXamarinInstall.png" title="Repairing Xamarin in Programs and Features" alt="Repairing Xamarin in Programs and Features"></p>

<p>This will add a set of Xamarin .xml files into the profiles that are compatible with the Xamarin frameworks. For example looking at the Profile78 directory we see:</p>

<pre><code>C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETPortable\v4.5\Profile\Profile78\SupportedFrameworks
</code></pre>

<ul>
<li>.NET Framework 4.5.xml</li>
<li>Windows 8.xml</li>
<li>Windows Phone Silverlight 8.xml</li>
<li>Xamarin.Android.xml</li>
<li>Xamarin.iOS.xml</li>
</ul>


<p>Now you should have full support for Portable Class Libraries in Xamarin Studio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Components and NuGet]]></title>
    <link href="http://lastexitcode.com/blog/2014/10/26/XamarinComponentsAndNuGet/"/>
    <updated>2014-10-26T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2014/10/26/XamarinComponentsAndNuGet</id>
    <content type="html"><![CDATA[<p><a href="http://lastexitcode.com/blog/2014/10/19/NuGetSupportInXamarinStudio5-5/">Xamarin Studio 5.5</a> and <a href="http://developer.xamarin.com/releases/vs/xamarin.vs_3/xamarin.vs_3.7/">Xamarin for Visual Studio 3.7</a> have support for <a href="https://components.xamarin.com/">Xamarin Components</a> with NuGet package dependencies. So you can now have Xamarin Studio or Visual Studio add NuGet packages to a project when a Component is installed from <a href="https://components.xamarin.com/">Xamarin&rsquo;s Component Store</a>.</p>

<p>The <a href="http://lastexitcode.com/blog/2014/10/19/NuGetSupportInXamarinStudio5-5/">NuGet Support in Xamarin Studio 5.5 post</a> looked at installing a Component with a NuGet package dependency into a project but did not cover how to create one of these Components. So let us take a look at how to modify an existing Component so it has NuGet package dependencies.</p>

<h2>Adding a NuGet Package Dependency to a Component</h2>

<p>In this section we will look at modifying a Component so when it is installed it adds NuGet packages to the project as well as referencing the assemblies that are included in the Component.</p>

<p>First download the latest version of the <a href="https://components.xamarin.com/submit/xpkg">xamarin-component command line application</a> which has been updated to support Component&rsquo;s with NuGet packages dependencies.</p>

<p>The downloaded xpkg file is a zip file containing xamarin-component.exe. So rename the file to have a .zip file extension and then extract the executable.</p>

<p>Now let us see how to add a single NuGet package dependency to the Component. If you are using a component.yaml file to generate your Component you can add the NuGet package dependency by adding the following to your component.yaml:</p>

<pre><code>packages:
  "": Newtonsoft.Json, Version=5.0.8
</code></pre>

<p>With the above defined in your component.yaml file you can run the xamarin-component.exe <strong>package</strong> command to generate your Component&rsquo;s .xam file.</p>

<p>Windows:</p>

<pre><code>xamarin-component.exe package path\to\directory-with-component-yaml
</code></pre>

<p>Mac:</p>

<pre><code>mono xamarin-component.exe package path/to/directory-with-component-yaml
</code></pre>

<p>If you then look inside your generated Component file (.xam), which you can do by renaming its file extension to .zip, you will see the package defined in the component/Manifest.xml file:</p>

<pre><code>&lt;packages&gt;
  &lt;package id="Newtonsoft.Json" version="5.0.8" /&gt;
&lt;/packages&gt;
</code></pre>

<p>If you are using the xamarin-component.exe <strong>create-manually</strong> command line you can add the same NuGet package dependency by adding the following command line argument:</p>

<pre><code>--package="":"Newtonsoft.Json, Version=5.0.8"
</code></pre>

<p>This packaged Component will install the Newtonsoft.Json NuGet package into any Android, iOS or Windows Phone project. If you need to install a particular NuGet package for a particular project type you can specify the target project type for the NuGet package dependency. Shown below is a more complicated example from a component.yaml file where NUnit and Newtonsoft.Json are configured so they will only be installed into Android projects, whilst log4net is only installed into iOS projects, and finally Ninject will be installed into all project types.</p>

<pre><code>packages:
  android:
    - NUnit, Version=2.6.2
    - Newtonsoft.Json, Version=5.0.8
  mobile: Ninject, Version=3.2.0
  ios: log4net, Version=2.0.0
</code></pre>

<p>Note that <strong>mobile</strong> used here is equivalent to the empty double quoted string &ldquo;&rdquo; which was used in the previous example with the single NuGet package.</p>

<p>If you then generate the Component again using the xamarin-component.exe package command you will see the Component&rsquo;s manifest file now contains the following:</p>

<pre><code>  &lt;packages&gt;
    &lt;package id="NUnit" version="2.6.2" framework="android" /&gt;
    &lt;package id="Newtonsoft.Json" version="5.0.8" framework="android" /&gt;
    &lt;package id="log4net" version="2.0.0" framework="ios" /&gt;
    &lt;package id="Ninject" version="3.2.0" framework="mobile" /&gt;
  &lt;/packages&gt;
</code></pre>

<p>If you are using the xamarin-component.exe create-manually command line you can add the same NuGet package dependencies to your Component by adding the following command line arguments:</p>

<pre><code>--package="android":"NUnit, Version=2.6.2"
--package="android":"Newtonsoft.Json, Version=5.0.8"
--package="mobile":"Ninject, Version=3.2.0"
--package="ios":"log4net, Version=2.0.0"
</code></pre>

<p>With the NuGet package dependencies defined as shown in the previous examples when you install the Component into a project the NuGet package will be installed and a reference will be added to the assemblies in the <strong>lib</strong> directory of the Component. If you want to only add the NuGet package to the project and not the assemblies in the lib directory then you can create a Shell Component which we will look at in the following section.</p>

<h2>Creating a Shell Component</h2>

<p>A Shell Component is special type Component that is basically a wrapper around one or more NuGet packages. It will only install the NuGet package into the project and not add references to any assemblies in the Component&rsquo;s <strong>lib</strong> directory.</p>

<p>To configure a component to be a Shell Component you can add the following to your component.yaml file:</p>

<pre><code>is_shell: true
</code></pre>

<p>When you generate your Component&rsquo;s .xam file you will see that the Component&rsquo;s Manifest.xml file now contains the <strong>is-shell</strong> attribute in the component element:</p>

<pre><code>&lt;component format="1" id="mycomponent" is-shell="true"&gt;
</code></pre>

<p>If you are using the xamarin-component.exe create-manually command line argument you can do the same thing by passing the following argument:</p>

<pre><code>--is-shell
</code></pre>

<p>Backwards compatibility is something to consider if you decide to create a Shell Component. If you need a Shell Component to work with older versions of Xamarin Studio and Xamarin for Visual Studio that do not support Component&rsquo;s with NuGet package dependencies then you should also include the assemblies in the lib directory of the Component. The <a href="https://components.xamarin.com/view/xamandroidsupportv13-18">Android Support Library v13 Component</a> is one example that has a NuGet package dependency and also includes an assembly in its lib/android directory. When installing the Android Support Library v13 Component into an older version of Xamarin Studio the NuGet package will not be installed and instead the assembly will be referenced from the Component&rsquo;s lib/android directory. If the Android Support Library v13 Component is installed with Xamarin Studio 5.5 or above then the NuGet package will be installed but the assembly from the lib/android directory will not be referenced.</p>

<h2>NuGet Package Sources</h2>

<p>The NuGet package dependencies that a Component has must be available from the <a href="https://nuget.org">official NuGet Gallery</a> before your Component is submitted to the Component Store.</p>

<p>If you are testing a NuGet package that is not currently available from the <a href="https://nuget.org">official NuGet Gallery</a> then you can copy it into the <a href="http://lastexitcode.com/projects/NuGet/FileLocations/">local machine&rsquo;s NuGet cache directory</a>. Xamarin Studio and Xamarin for Visual Studio should find the NuGet package in the local NuGet cache instead of trying to download it from the NuGet Gallery.</p>

<h2>Creating a Component</h2>

<p>There are some example Component&rsquo;s that have NuGet package dependencies available on my <a href="https://github.com/mrward/xamarin-test-components">GitHub page</a>. The <a href="https://github.com/mrward/xamarin-test-components/tree/master/AwesomeComponent">Awesome Component example</a> is a Shell Component that uses a rakefile and the xamarin-component create-manually command line to generate the Component. The <a href="https://github.com/mrward/xamarin-test-components/tree/master/MyComponent">My Component example</a> is another Shell Component that uses a component.yaml file that defines NuGet package dependencies.</p>

<p>For more detailed information on how to create a Component please see the <a href="http://developer.xamarin.com/guides/cross-platform/advanced/submitting_components/">Submitting Components</a> page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.5]]></title>
    <link href="http://lastexitcode.com/blog/2014/10/19/NuGetSupportInXamarinStudio5-5/"/>
    <updated>2014-10-19T14:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/10/19/NuGetSupportInXamarinStudio5-5</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> Package version constraints in packages.config files are now supported</li>
<li> <a href="https://components.xamarin.com/">Xamarin Components</a> can now have NuGet package dependencies</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.5 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.5/xamarin.studio_5.5/">release notes</a>.</p>

<h2>NuGet Package Version Constraints</h2>

<p>NuGet allows you to <a href="http://docs.nuget.org/docs/reference/versioning">define a range of package versions that are allowed in your project</a> using the <strong>allowedVersions</strong> attribute in the packages.config file.</p>

<pre><code>&lt;packages&gt;
  &lt;package id="Newtonsoft.Json" version="5.0.1" allowedVersions="[5.0,6.0)" targetFramework="MonoAndroid44" /&gt;
&lt;/packages&gt;
</code></pre>

<p>In the above packages.config file the project has Json.NET 5.0.1 installed and will only allow updates to versions of Json.NET that are below 6.0.</p>

<p>When you open the solution in Xamarin Studio, and check for updates is enabled in preferences, you will see updates in the Solution window that are valid given the constraint defined in the packages.config file. In the screenshot below an update is shown for Json.NET 5.0.8 in the Solution window even though Json.NET currently has version 6.0.5 available.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-5/JsonNet508PackageUpdateAvailableInSolutionWindow.png" title="Json.NET 5.0.8 package update available shown in Solution window" alt="Json.NET 5.0.8 package update available shown in Solution window"></p>

<p>When you update the NuGet packages from the Solution window Xamarin Studio will now update to a NuGet package that meets the version constraints defined in the packages.config. In the Package Console screenshot below the Json.NET package was updated, with the constraint in place, and Json.NET 5.0.8 was installed.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-5/JsonNet508PackageInstalledInPackageConsole.png" title="Json.NET package updated to 5.0.8 - Package Console output" alt="Json.NET package updated to 5.0.8 - Package Console output"></p>

<p>Note that if you install a NuGet package from the Add Packages dialog you can override the constraint and install a NuGet package with a version outside of the range of the constraint.</p>

<h2>Components with NuGet Packages</h2>

<p>A Component from <a href="https://components.xamarin.com/">Xamarin&rsquo;s Component Store</a> can now declare a dependency on one or more NuGet packages which will be installed into the project when the Component is installed. The <a href="https://components.xamarin.com/view/xamandroidsupportv13-18">Android Support Library v13 Component</a> is one example that has a NuGet package dependency.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentInStore.png" title="Android Support Library v13 Component in Component Store" alt="Android Support Library v13 Component in Component Store"></p>

<p>When you install this Component you will see that it installs the <a href="https://www.nuget.org/packages/Xamarin.Android.Support.v13/">Xamarin.Android.Support.v13 NuGet package</a>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentInstalledInSolutionWindow.png" title="Android Support Library v13 Component in Solution window" alt="Android Support Library v13 Component in Solution window"></p>

<p>In older versions of Xamarin Studio the NuGet package will not be installed and instead the project will reference the Xamarin.Android.Support.v13.dll which is included with the Component.</p>

<p>The NuGet packages a Component depends on are displayed in the <strong>Packages</strong> tab on the Component Details page, which you can open by double clicking the Component in the Solution window, or by right clicking the Component and selecting <strong>Details</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentDetailsWithPackagesTab.png" title="Android Support Library v13 Packages in Component Details page" alt="Android Support Library v13 Packages in Component Details page"></p>

<p>From the <strong>Packages</strong> tab you can also install a NuGet package that a Component depends on if it was removed from the project. So if the Xamarin.Android.Support.v13 NuGet package is removed from the project the Component will be highlighted in red to indicate that there is a problem.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentErrorInSolutionWindow.png" title="Android Support Library v13 Component error in Solution window" alt="Android Support Library v13 Component error in Solution window"></p>

<p>If you then open the Component Details page you will see in the <strong>Packages</strong> tab that the NuGet package is missing.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentDetailsWithMissingNuGetPackage.png" title="Android Support Library v13 Component Details page with missing NuGet Package" alt="Android Support Library v13 CComponent Details page with missing NuGet Package"></p>

<p>To add the NuGet package back to the project you can hover the mouse over the warning icon and click the Add Package button that appears in the pop-up window.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentDetailsWithAddPackagePopUpWindow.png" title="Android Support Library v13 Component Details page with Add Package pop-up window" alt="Android Support Library v13 CComponent Details page with Add Package pop-up window"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.4]]></title>
    <link href="http://lastexitcode.com/blog/2014/09/29/NuGetSupportInXamarinStudio5-4/"/>
    <updated>2014-09-29T19:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/09/29/NuGetSupportInXamarinStudio5-4</id>
    <content type="html"><![CDATA[<h2>New Feature</h2>

<ul>
<li> Added support for the new Unified target frameworks for iOS and Mac

<ul>
<li>Xamarin.iOS</li>
<li>Xamarin.Mac</li>
</ul>
</li>
</ul>


<p>More details on all the new features and changes in Xamarin Studio 5.4 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.4/xamarin.studio_5.4/">release notes</a>.</p>

<h2>New Unified iOS and Mac Target Frameworks</h2>

<p>Xamarin recently announced <a href="http://blog.xamarin.com/unified-api-with-64-bit-support-for-ios-and-mac/">a new Unified API for its iOS and Mac products</a>. This new Unified API makes it easier to share code between Mac and iOS as well as allowing you to support 32 and 64 bit applications with the same binary.</p>

<p>To use this new Unified API you can create a new Unified project for iOS, or for Mac, using one of the project templates available from Xamarin Studio&rsquo;s New Project Dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-4/UnifiedMacAndIOSProjectsInNewProjectDialog.png" title="Unified iOS and Mac Projects in New Project Dialog" alt="Unified iOS and Mac Projects in New Project Dialog"></p>

<p>These Unified projects now support MSBuild and use the following target frameworks:</p>

<ul>
<li>Xamarin.iOS</li>
<li>Xamarin.Mac</li>
</ul>


<h2>NuGet Support for the New Unified Target Frameworks</h2>

<p>In order to support these two new frameworks the following changes were made to NuGet.</p>

<ul>
<li>Add Xamarin.iOS and Xamarin.Mac as known frameworks.</li>
<li>Make frameworks that have a name that starts with <strong>Xamarin</strong> optional when checking the compatibility of Portable Class Libraries (PCLs) inside a NuGet package with a Portable Class Library project.</li>
</ul>


<p>With these new Unified frameworks being recognised by NuGet you can now create a NuGet package with assemblies that specifically target these frameworks.  The following shows part of a .nuspec file with framework specific assemblies for iOS and Mac being copied into the appropriate target lib folder inside the NuGet package.</p>

<pre><code>&lt;files&gt;
    &lt;file src="lib\Xamarin.iOS\*.dll" target="lib\Xamarin.iOS10" /&gt;
    &lt;file src="lib\Xamarin.Mac\*.dll" target="lib\Xamarin.Mac20" /&gt;
&lt;/files&gt;
</code></pre>

<p>The <a href="https://www.nuget.org/packages/Splat/">Splat NuGet package</a>, created by Paul Betts, is one NuGet package available from the main NuGet gallery that explicitly targets both of the new Unified frameworks.</p>

<p>Having the Xamarin frameworks treated as optional by NuGet allows you to install a NuGet package containing PCL assemblies into a Portable Class Library project, on a machine with the Xamarin PCL profiles registered. Without the Xamarin frameworks being treated as optional the NuGet package would fail to be installed since NuGet would find them incompatible unless the NuGet package explicitly included the Xamarin frameworks as part of its PCL profile.</p>

<p>Support for the new Xamarin frameworks will be available in the official NuGet from Microsoft in version 2.8.3. <a href="https://nuget.codeplex.com/releases/view/133091">NuGet 2.8.3</a> is currently available as alpha release. Xamarin Studio 5.4 includes its own build of NuGet which has support for the new Xamarin frameworks.</p>

<h2>Portable Class Libraries</h2>

<p>In order to be able to install a NuGet package containing PCL assemblies, such as Json.NET, into a Unified iOS or Unified Mac project you will need to have the PCL profile XML files for Unified iOS and Mac installed on your machine.</p>

<p>On the Mac you can get these new PCL profile XML files by installing Mono 3.10.0, which is currently available from Xamarin Studio on the alpha and beta channels.</p>

<p>On Windows, since NuGet 2.8.3 is currently only available as an alpha release, there is a <a href="http://xvs.xamarin.com/Xamarin.iOS.PortableNuGet.msi">separate installer</a> which will register the Unified iOS framework with the PCL profiles on your machine and will also install an alpha version of Microsoft&rsquo;s NuGet Package Manager 2.8.3 into Visual Studio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.3]]></title>
    <link href="http://lastexitcode.com/blog/2014/09/07/NuGetSupportInXamarinStudio5-3/"/>
    <updated>2014-09-07T10:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/09/07/NuGetSupportInXamarinStudio5-3</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet package restore is now part of Xamarin Studio and no longer uses NuGet.exe</li>
<li> Add Packages dialog &ndash; Package sources could not be reached shown for failing package sources</li>
<li> Packages restored for the selected project instead of the solution</li>
<li> Show packages added to solution in Add Packages dialog</li>
<li> Show packages up to date message in status bar if there are no package updates available</li>
<li> Show status bar warning message when no updates found and package sources are unavailable</li>
<li> Restore missing packages before updating a package</li>
<li> Do not check for updated packages if the project has no packages</li>
<li> Fix version shown as download count in Add Packages dialog when searching for package versions</li>
<li> Fix empty source being selected in Add Packages dialog when package source disabled and All Sources selected</li>
<li> Fix packages.config marked as deleted by Git when updating packages</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.3 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.3/xamarin.studio_5.3/">release notes</a>. Now let us take a more detailed look at the new NuGet changes.</p>

<h2>NuGet package restore no longer uses NuGet.exe</h2>

<p>The NuGet package restore is now a part of Xamarin Studio and no longer uses NuGet.exe. This allows the package restore to integrate with the Xamarin Studio credential provider and provides more control over the package restore process. So if a package source needs authentication, or uses a proxy, then Xamarin Studio will now show a dialog asking for credentials if the credentials are not stored. Previously the package restore would fail with an error message logged in the Package Console.</p>

<h2>Add Packages dialog &ndash; Package sources could not be reached</h2>

<p>Previously when All Sources was selected and if any package source could not be reached then an error message would be displayed and no packages would be shown in the list. Now packages will be displayed with a warning even if one package source could not be reached.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-3/AddPackagesDialogPackageSourcesCouldNotBeReachedWarning.png" title="Add Packages dialog - package sources could not be reached warning" alt="Add Packages dialog - package sources could not be reached warning"></p>

<h2>Packages restored for the selected project instead of the solution</h2>

<p>Xamarin Studio will now restore packages for the selected project instead of the entire solution. When you right click the <strong>Packages</strong> folder in the Solution window and select <strong>Restore</strong> only the packages for that project will be restored.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowRestorePackagesMenu.png" title="Packages folder - Restore menu" alt="Packages folder - Restore menu"></p>

<p>This is now possible since Xamarin Studio is now responsible for restoring packages instead of using NuGet.exe which would only restore for the entire solution.</p>

<p>To restore packages for the entire solution you can still use the <strong>Restore Packages</strong> menu which is available from the Project menu or by right clicking the solution in the Solution window.</p>

<h2>Show packages added to solution in Add Packages dialog</h2>

<p>Opening the Add Packages dialog will now show the packages added to all projects in the current solution.</p>

<p>The order of the items displayed in the Add Packages dialog is recent packages first, then solution packages, and then the packages from the active package source.</p>

<h2>Show packages up to date message in status bar if there are no package updates available</h2>

<p>When you try to update a package and there are no package updates available then the status bar now displays a message indicating that the package is already up to date.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-3/PackageUpToDateStatusBarMessage.png" title="Package up to date status bar message" alt="Package up to date status bar message"></p>

<p>Similarly if you update multiple packages and there are no updates available then the status bar will now show a packages are up to date message.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-3/PackagesAreUpToDateStatusBarMessage.png" title="Packages are up to date status bar message" alt="Packages are up to date status bar message"></p>

<p>Previously the status bar would show a message that the package was updated successfully even if nothing was updated.</p>

<h2>Show status bar warning message when no updates found and package sources are unavailable</h2>

<p>When one or more of the package sources is unavailable or invalid then Xamarin Studio will now report a warning in the status bar after checking for updates.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-3/NoUpdateFoundButWarningsReportedStatusBarMessage.png" title="No update but warnings reported status bar message" alt="No updated found but warnings reported status bar message"></p>

<h2>Restoring missing packages before updating packages</h2>

<p>Previously when NuGet packages were unrestored and an attempt was made to update a NuGet package, which had updates available from the package source, the update would fail with a message indicating that the package was installed successfully but the project did not reference the package.</p>

<p>To prevent the update from failing Xamarin Studio will now check that the packages are restored for the project before trying to update and restore any missing packages. In the status bar a <strong>Restoring packages before update</strong> message will be displayed when a restore must be completed first.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-3/RestoringPackagesBeforeUpdateStatusBarMessage.png" title="Restoring packages before update status bar message" alt="Restoring packages before update status bar message"></p>

<h2>Bug Fixes</h2>

<p><strong>Do not check for updated packages if the project has no packages</strong></p>

<p>Xamarin Studio was checking for package updates in all projects even if they had no packages.config file when the solution was opened. This would result in the <strong>Packages are up to date</strong> message being displayed in the status bar even when no projects were using any NuGet packages.</p>

<p>Now if the project has no packages.config file then Xamarin Studio will not check for updates.</p>

<p><strong>Fix version shown as download count in Add Packages dialog when searching for package versions</strong></p>

<p>When running a package version search, such as <strong>Xamarin.Forms version:</strong>*, the right hand side of the dialog was showing the version number instead of the download count.</p>

<p>Now the dialog shows the download count. Ideally it would show the download count of that particular version but this is not currently available from the Package object returned by NuGet. It is returned in the results back from the package source but it is not available on the Package object.</p>

<p>Also the download counts are different for the same package if you compare the normal search result with a package version search result. The package version search shows a larger download count number. This may be related to the <a href="http://blog.nuget.org/20140603/nuget-stats.html">stats problem</a> NuGet had recently. Currently Xamarin Studio is showing the download count it receives. The standard search download counts match those shown in Visual Studio&rsquo;s Manage Packages dialog. For the package version search the download count value matches that shown on the NuGet.org website for an individual package (e.g. <a href="https://www.nuget.org/packages/jQuery">https://www.nuget.org/packages/jQuery</a>).</p>

<p><strong>Fix empty source being selected in Add Packages dialog when package source disabled and All Sources selected</strong></p>

<p>An empty package source selected in the Add Packages dialog could occur when All Sources was selected in the Add Packages dialog and one of the enabled package sources was unchecked in Preferences. On opening the Add Packages dialog again an empty package source would be displayed as the selected package source.</p>

<p>Now the Add Packages dialog will have the remaining enabled package source selected.</p>

<p><strong>Fix packages.config marked as deleted by Git when updating packages</strong></p>

<p>On updating packages in a project, and the project is using Git for version control, then the update was causing Git to show the packages.config file as deleted. This would occur if all the NuGet packages were uninstalled as part of the update which caused NuGet to see that there were no NuGet packages referenced and delete the packages.config file.</p>

<p>Now the packages.config file is shown as modified instead of deleted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.2]]></title>
    <link href="http://lastexitcode.com/blog/2014/08/10/NuGetSupportInXamarinStudio5-2/"/>
    <updated>2014-08-10T12:44:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/08/10/NuGetSupportInXamarinStudio5-2</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> Automatic package update check</li>
<li> Package framework retargeting</li>
<li> Support for custom packages directory in NuGet.Config</li>
<li> Add all checked packages even if they are not visible</li>
</ul>


<p>More details on all the new features and changes in Xamarin Studio 5.2 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.2/xamarin.studio_5.2/">release notes</a>. Now let us take a more detailed look at the new NuGet features.</p>

<h2>Automatic package update check</h2>

<p>On opening a solution Xamarin Studio will check in the background for updated packages used by your projects. When the update check begins the status bar will show a <strong>Checking for package updates</strong> message.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/CheckingForPackageUpdatesStatusBarMessage.png" title="Checking for package updates status bar message" alt="Checking for package updates status bar message"></p>

<p>If Xamarin Studio finds there are new updated packages available then the status bar will show a <strong>Package Updates are available</strong> message.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/PackageUpdatesAreAvailableStatusBarMessage.png" title="Package updates are available status bar message" alt="Package updates are available status bar message"></p>

<p>The <strong>Solution</strong> window will show information about the updates in the Packages folder.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/PackageUpdatesInSolutionWindow.png" title="Package updates shown in Solution window" alt="Package updates shown in Solution window"></p>

<p>The <strong>Packages</strong> folder will show the number of updated packages available for a project. For each package inside the Packages folder you can see the version number for the update.</p>

<p>Note that Xamarin Studio will only show updates that are for non-pre-release packages.</p>

<p>The automatic package update feature can be disabled in <strong>Preferences</strong> by unchecking <strong>Check for package updates when opening a solution</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/CheckForPackageUpdatesOptionInPreferences.png" title="Preferences dialog - Check for package updates when opening a solution" alt="Preferences dialog - Check for package updates when opening a solution"></p>

<h2>Framework retargeting</h2>

<p>A NuGet package will often contain assemblies for several target frameworks. Json.NET, for example, contains assemblies for:</p>

<ul>
<li>.NET 2.0</li>
<li>.NET 3.5</li>
<li>.NET 4.0</li>
<li>.NET 4.5</li>
<li>.NET Core 4.5 (Windows Store)</li>
<li>Portable Class Library (PCL)

<ul>
<li>.NET 4, Silverlight 5, Windows Phone 8, Windows 8, Windows Phone   Application 8.1</li>
</ul>
</li>
<li>Portable Class Library (PCL)

<ul>
<li>.NET 4.5, Windows Phone 8, Windows 8, Windows Phone Application 8.1</li>
</ul>
</li>
</ul>


<p>When you install this NuGet package into your project the assembly that is referenced is determined by your project&rsquo;s target framework. NuGet will reference the assembly which it considers to be the best match for your project&rsquo;s target framework. So if you install Json.NET into a project that targets .NET 4.5 the Json.NET assembly referenced will be taken from the .NET 4.5 folder inside the NuGet package.</p>

<p>If you change your project&rsquo;s target framework after you have installed the NuGet package your project may be referencing a different assembly compared with what would have been referenced if you had installed it after changing the project&rsquo;s target framework. In some cases the project&rsquo;s target framework may not be compatible with the NuGet package. For example, your project targeted .NET 4.5 and you then changed it to .NET 2.0. In this case you would be referencing a .NET 4.5 assembly that would not work with .NET 2.0. Another example is if you change the PCL profile of your project which could affect which PCL assemblies are used from the NuGet package.</p>

<p>In Xamarin Studio 5.2 if you change your project&rsquo;s target framework then the NuGet packages referenced by your project are checked to see if they are still compatible. The result of this check is displayed in the <strong>Package Console</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/PackagesNeedRetargetingMessagesInPackageConsole.png" title="Packages need retargeting messages in Package Console" alt="Packages need retargeting messages in Package Console"></p>

<p>In the screenshot above the project&rsquo;s target framework was changed from .NET 4.5 to .NET 2.0 whilst the project had the Json.NET and Moq NuGet packages installed. Json.NET is compatible with .NET 2.0 and can be retargeted. Moq does not support .NET 2.0 and is not compatible.</p>

<p>To retarget an individual NuGet package you can select the package in the <strong>Solution</strong> window, right click and select <strong>Retarget</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/RetargetSinglePackageSolutionWindowMenuItem.png" title="Solution window - Retarget menu item" alt="Solution window - Retarget menu item"></p>

<p>To retarget all packages in the project you can select <strong>Packages</strong> in the <strong>Solution</strong> window, right click and select <strong>Retarget</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/RetargetAllProjectPackagesSolutionWindowMenuItem.png" title="Solution window - Retarget project packages menu item" alt="Solution window - Retarget project packages menu item"></p>

<p>Selecting <strong>Retarget</strong> will remove the NuGet package and then add it again so the correct assembly is referenced by your project. The status bar will be updated as the package is retargeted and full details can be seen in the Package Console.</p>

<p>The Retarget menu item is only available if NuGet packages need to be retargeted.</p>

<p>Note that if you retarget a NuGet package that is incompatible with your project&rsquo;s target framework then the retargeting will fail and the NuGet package will be removed from the project.</p>

<h2>Support for custom packages directory in NuGet.Config</h2>

<p>When a NuGet package is installed into a project the NuGet packages are by default downloaded into a packages directory inside the solution directory. The location and name of this packages directory can be configured by specifying the repositoryPath in the NuGet.Config file.</p>

<pre><code>&lt;configuration&gt;
  &lt;config&gt;
    &lt;add key="repositoryPath" value="../../MyPackages" /&gt;
  &lt;/config&gt;
&lt;/configuration&gt;
</code></pre>

<p>If you create a NuGet.Config file and put it the .nuget directory inside the solution, or in the solution&rsquo;s directory, then Xamarin Studio will read the repositoryPath and use it when downloading NuGet packages. The path is relative to the NuGet.Config file but you can specify a full path if you need to.</p>

<p>Note that if you make a change to the repositoryPath whilst the solution is open you will need to close and re-open the solution for the changes to be detected.</p>

<h2>Add all checked packages even if they are not visible</h2>

<p>The Add Packages dialog will now add all packages that were checked when you click the Add Packages button even if they are not currently being displayed in the dialog. This allows you to run multiple searches in the dialog, check multiple packages and then add them to the project in one step without having to open the Add Packages dialog multiple times. Previously only the checked packages that were displayed in the list of packages would be added to your project.</p>

<h2>Bug Fixes</h2>

<p><strong>Incorrect path separator used for MSBuild Import</strong></p>

<p>A NuGet package can contain custom MSBuild .targets and .props files. Previously when a NuGet package was installed on the Mac a forward slash path separator was used when adding the paths for custom MSBuild .targets file. This would cause Xamarin Studio on Windows to fail to compile the project. Now backslashes are used for all paths added to the project file.</p>

<p>Xamarin Studio will also now add a Condition to the project file that checks the imported MSBuild .targets file exists. Without this condition the project cannot be opened in Visual Studio if the NuGet packages are missing.</p>

<p>As an example, if Xamarin.Forms 1.1.1.6206 is installed into a project the following Import element will be added.</p>

<pre><code>&lt;Import 
    Project="packages\Xamarin.Forms.1.1.1.6206\build\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\Xamarin.Forms.targets"
    Condition="Exists('packages\Xamarin.Forms.1.1.1.6206\build\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\Xamarin.Forms.targets')" /&gt;
</code></pre>

<p><strong>Repositories.config not restored</strong></p>

<p>When NuGet packages were restored for the solution the repositories.config file was not being restored. The repositories.config file contains references to all the projects in the solution that have NuGet packages. This information is used by NuGet to determine whether a NuGet package can be removed from the packages directory when a NuGet package is removed from a project. Without this information a NuGet package that is still referenced by other projects could be removed from the packages directory and cause the compilation to fail.</p>

<p><strong>Package Dependencies not resolved from enabled package sources</strong></p>

<p>Xamarin Studio will now use all enabled package sources when resolving dependencies for a NuGet package even if a single package source is selected in the Add Packages dialog. This allows the use of a NuGet package source that has packages that have dependencies that are not available from that particular package source but are available from another package source.</p>

<p><strong>Packages are up to date status bar message</strong></p>

<p>If you have the automatic check for updates disabled and update one or more NuGet packages the status bar will now display a message indicating that the packages are up to date if there are no updates available. Previously Xamarin Studio would show a message that the packages were updated when they were not.</p>

<p><strong>Updating an unrestored package</strong></p>

<p>If you have automatic package restore disabled and you attempt to update a NuGet package the package will now be restored before the update is attempted. Previously this would fail when an update was available since NuGet looks at the old package to work out how to remove it from the project before updating to the new NuGet package.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.1]]></title>
    <link href="http://lastexitcode.com/blog/2014/07/06/NuGetSupportInXamarinStudio5-1/"/>
    <updated>2014-07-06T10:48:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/07/06/NuGetSupportInXamarinStudio5-1</id>
    <content type="html"><![CDATA[<p><a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.1/xamarin.studio_5.1/">Xamarin Studio 5.1</a> was released last week and it includes some new features for the NuGet addin.</p>

<h2>New Features</h2>

<ul>
<li> Searching and installing a specific version of a NuGet package.</li>
<li> Support for NuGet package sources defined in a solution specific NuGet.Config file.</li>
</ul>


<p>More details on all the new features and changes in Xamarin Studio 5.1 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.1/xamarin.studio_5.1/">release notes</a>. Now let us take a look at the new NuGet features.</p>

<h2>Searching and installing a specific version of a NuGet package</h2>

<p>The Add Packages dialog can now be used to search and install a specific version of a NuGet package. You can search for all versions, a range of versions, or a specific version of a NuGet package. To do this the following search syntax is used:</p>

<pre><code>PackageId version:VersionNumber
</code></pre>

<p>The packages are shown in the Add Packages dialog with the most recent version at the top. At the top right of each package in the package list you will see the package version instead of the download count allowing you to find the particular version you want to install.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-1/AddPackagesDialogAllAutoMapperPackageVersions.png" title="Add Packages dialog - all AutoMapper package versions" alt="Add Packages dialog - all AutoMapper package versions"></p>

<p>To search for all versions of the AutoMapper NuGet package you can use an asterisk or leave the version number blank.</p>

<pre><code>AutoMapper version:*
</code></pre>

<p>To search for all the 2.1 versions of the AutoMapper NuGet package you can use the search:</p>

<pre><code>AutoMapper version:2.1
</code></pre>

<p>This will return a range of versions from 2.1.0 up to but not including 2.2.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-1/AddPackagesDialogAutoMapperPackageVersions21.png" title="Add Packages dialog - AutoMapper 2.1 package versions" alt="Add Packages dialog - AutoMapper 2.1 package versions"></p>

<p>The package id used in the search must match the id of the NuGet package otherwise no results will be returned.</p>

<p>Searching for package versions is also supported in the universal search at the top right of Xamarin Studio.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-1/PackageVersionSearchInUniversalSearch.png" title="Package version search in universal search" alt="Package version search in universal search"></p>

<h2>Package sources defined in a solution specific NuGet.Config file</h2>

<p> If package sources are defined in the solution&rsquo;s NuGet.Config file then these will be available in the Add Packages dialog when this solution is opened. The NuGet.Config file can be in the solution directory or in the .nuget subdirectory. An example NuGet.Config file is shown below.</p>

<pre><code>&lt;configuration&gt;
  &lt;packageSources&gt;
    &lt;add key="ASP.NET vNext - MyGet" value="https://www.myget.org/F/aspnetvnext/" /&gt;
  &lt;/packageSources&gt;
&lt;/configuration&gt;
</code></pre>

<p>When the solution is opened the package sources defined in the NuGet.config file are available in the drop down list at the top left of the Add Packages dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-1/AddPackagesWithPackageSourceFromSolutionLevelNuGetConfig.png" title="Add Packages dialog - package sources from solution NuGet.Config" alt="Add Packages dialog - package sources from solution NuGet.config"></p>

<h2>Bug Fixes</h2>

<p><strong>Proxy credentials not being requested for a https package source.</strong></p>

<p>   Added a workaround to NuGet to handle Mono returning a different http response when proxy authentication is required.</p>

<p><strong>Web.config transforms not being applied when installing NuGet packages such as Nancy.Hosting.Aspnet.</strong></p>

<p>   Projects were not being recognised as web projects so transforms were only being applied to app.config files.</p>

<p><strong>XDT remove transforms (Xml Document Transformations) failing on Mono.</strong></p>

<p>   Modified the XDT library that ships with Xamarin Studio to handle different behaviour on Mono compared with Microsoft&rsquo;s .NET Framework. These transforms are used in the Microsoft.AspNet.Mvc NuGet package.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet PowerShell Console for Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2014/06/22/NuGetPowerShellConsoleForXamarinStudio/"/>
    <updated>2014-06-22T21:05:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/06/22/NuGetPowerShellConsoleForXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 5.0 now has <a href="http://lastexitcode.com/blog/2014/06/01/NuGetSupportInXamarinStudio5-0/">NuGet support built in</a>. There are also some experimental NuGet features that are available for Xamarin Studio 5.0 and MonoDevelop 5.0 as part of a separate <a href="https://github.com/mrward/monodevelop-nuget-extensions">NuGet extensions addin</a>. One such experimental feature is a new PowerShell console window that provides Xamarin Studio with the standard NuGet commands and also works on the Mac, not just Windows.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellConsoleForXamarinStudio/PackageConsoleExtensionWindow.png" title="NuGet PowerShell Console Window" alt="NuGet PowerShell Console Window"></p>

<p>The new console window is powered by Pash. Pash is a open source reimplementation of PowerShell that works with Mono and runs on Windows, Mac and Linux. It was created by <a href="https://twitter.com/igor_moochnick">Igor Moochnick</a> and more recently development has been restarted by <a href="https://twitter.com/jaybazuzi">Jay Bazuzi</a>.</p>

<h2>PowerShell Console Features</h2>

<ul>
<li> Standard NuGet PowerShell commands available &ndash; Install-Package, Update-Package, Uninstall-Package, Get-Project and Get-Package</li>
<li> Integrates with the existing NuGet addin that ships with Xamarin Studio.</li>
<li> Cross platform &ndash; works on Windows and Mac.</li>
<li> Powered by <a href="https://github.com/Pash-Project/Pash">Pash</a>.</li>
<li> Partial implementation of the <a href="http://msdn.microsoft.com/en-us/library/envdte.aspx">Visual Studio object model EnvDTE</a>.</li>
</ul>


<h2>Limitations</h2>

<ul>
<li> PowerShell support is not fully implemented in Pash so PowerShell scripts may not fully work.</li>
<li> Xamarin Studio needs to be closed and re-opened before the console can be used. Otherwise the Xamarin Studio will crash.</li>
<li> Some standard parameters are missing from the NuGet commands (e.g. -verbose).</li>
<li> The NuGet commands are not fully up to date compared with the commands available in Visual Studio. One example is <strong>Update-Package -Reinstall</strong> which is currently not supported.</li>
</ul>


<h2>Installation</h2>

<p>The NuGet extensions addin is available from the <a href="http://addins.monodevelop.com/Project/Index/121">MonoDevelop addin repository</a>. To install the addin:</p>

<ul>
<li>Open the <strong>Add-in Manager</strong> dialog.</li>
<li>Select the <strong>Gallery</strong> tab.</li>
<li>Select <strong>Xamarin Studio Add-in Repository (Alpha channel)</strong> from the drop down list.</li>
<li>Expand <strong>IDE extensions</strong>.</li>
<li>Select <strong>NuGet Package Management Extensions</strong>.</li>
<li>Click the <strong>Refresh</strong> button if the addin is not visible.</li>
<li>Click <strong>Install&hellip;</strong> to install the addin.</li>
</ul>


<p>Please close and re-open Xamarin Studio before trying to open the PowerShell Console window otherwise Xamarin Studio will crash.</p>

<h2>Using the PowerShell Console</h2>

<p>To open the console window, from the <strong>View</strong> menu select <strong>Pads</strong> and then select <strong>Package Console Extension</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellConsoleForXamarinStudio/ViewPackageConsoleExtensionPadMenuItem.png" title="View - Package Console Extension menu item" alt="View - Package Console Extension menu item"></p>

<p>The top of the console window has drop downs allowing you to choose a different default package source or default project. At the top right there is a Clear Console button which will clear all the text from the console.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellConsoleForXamarinStudio/PackageConsoleExtensionWindowInstallingJsonNet.png" title="PowerShell Console Window - Installing Json.NET" alt="PowerShell Console Window - Installing Json.NET"></p>

<p>The standard <a href="http://docs.nuget.org/docs/reference/package-manager-console-powershell-reference">NuGet PowerShell commands</a> are available from the console window:</p>

<ul>
<li>Install-Package</li>
<li>Uninstall-Package</li>
<li>Update-Package</li>
<li>Get-Package</li>
<li>Get-Project</li>
</ul>


<p>There is also a partial implementation of the <a href="http://msdn.microsoft.com/en-us/library/envdte.aspx">Visual Studio object model (EnvDTE)</a> which you can use from the console and from PowerShell scripts inside a NuGet package. Currently the Solution object and the CodeModel is not fully implemented when compared with SharpDevelop.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellConsoleForXamarinStudio/PackageConsoleExtensionWindowUsingEnvDTEProjectModel.png" title="PowerShell Console Window - Using EnvDTE project model" alt="PowerShell Console Window - Using EnvDTE project model"></p>

<p>When you install a NuGet package from the console and the NuGet package has an <strong>init.ps1</strong> or an <strong>install.ps1</strong> PowerShell script then these scripts will be run. Similarly on uninstalling a NuGet package if it contains an <strong>uninstall.ps1</strong> script then this will be run in the console. However there are some areas of PowerShell that are not fully implemented in Pash so the script may well fail. The failure will be logged in the console window but it will not prevent the package from being installed or uninstalled.</p>

<p>That concludes the introduction to the experimental NuGet Package Console in Xamarin Studio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.0]]></title>
    <link href="http://lastexitcode.com/blog/2014/06/01/NuGetSupportInXamarinStudio5-0/"/>
    <updated>2014-06-01T18:25:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/06/01/NuGetSupportInXamarinStudio5-0</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 5.0 was released last week as part of the <a href="http://blog.xamarin.com/announcing-xamarin-3/">Xamarin 3.0 release</a> and it now has built-in support for NuGet. There is no need to install the NuGet addin separately into Xamarin Studio 5.0 or MonoDevelop 5.0 since it is now &ldquo;in the box&rdquo;.</p>

<h2>New Features</h2>

<ul>
<li> Re-designed user interface.</li>
<li> More integrated with the Solution window.</li>
<li> Supports <a href="http://docs.nuget.org/docs/reference/search-syntax">NuGet&rsquo;s search syntax</a>.</li>
<li> Background package installation.</li>
<li> Integrates with Xamarin Studio&rsquo;s unified search.</li>
<li> Support for NuGet packages in project templates.</li>
<li> Package restore on opening a solution.</li>
<li> Integrates with Xamarin Studio&rsquo;s credential provider to provide proxy and package source authentication.</li>
</ul>


<p>So let us a look at these features in more detail by looking at how to use the NuGet addin in Xamarin Studio 5.0.</p>

<h2>Adding NuGet Packages</h2>

<p>To add a NuGet package we need to open the <strong>Add Packages</strong> dialog. This can be done in the following ways:</p>

<ul>
<li>From the <strong>Project</strong> menu select <strong>Add Packages</strong>. The project will need to be selected in the <strong>Solution</strong> window.</li>
<li>From the <strong>Solution</strong> window, right click the project and select <strong>Add &ndash; Add Packages</strong>.</li>
</ul>


<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesMenuOptionSolutionWindow.png" title="Solution Window right click Add Packages menu" alt="Solution Window right click Add Packages menu"></p>

<ul>
<li>From Xamarin Studio&rsquo;s unified search, available in the top right of the main window, enter the name of the package you would like to search for, then select <strong>Search Packages</strong>.</li>
</ul>


<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SearchPackagesUsingUnifiedSearch.png" title="Search packages using unified search" alt="Search packages using unified search"></p>

<ul>
<li>Double clicking the <strong>Packages</strong> folder in the <strong>Solution</strong> window will also open the Add Packages dialog (note the Packages folder is only displayed if you have a NuGet package installed in your project).</li>
</ul>


<p>On opening the Add Packages dialog you will see a re-designed user interface.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesDialog.png" title="Add Packages dialog" alt="Add Packages dialog"></p>

<p>If a NuGet package has an associated image then it will now be displayed in the list of packages.</p>

<p>The search text box at the top right of the dialog will now search for packages as you type.</p>

<p>The package source combo box at the top left of the dialog now includes a new <strong>Configure Sources</strong> item which allows you to quickly switch to the configured package sources in preferences and back again to the Add Packages dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesDialogConfigureSources.png" title="Configuring sources from Add Packages dialog" alt="Configuring sources from Add Packages dialog"></p>

<p>The list of packages now has infinite scroll support. As you scroll down the list new packages will be retrieved from the package source and displayed. Previously you had to click a button to move to the next page.</p>

<p>To install a NuGet package in the Add Packages dialog you can do one of the following:</p>

<ul>
<li>Select a package and double click it.</li>
<li>Select a package and press the enter key.</li>
<li>Select a package and press the <strong>Add Package</strong> button.</li>
</ul>


<p>To install two or more NuGet packages you can click the check box next to the package and then select the <strong>Add Packages</strong> button.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesDialogTwoPackagesChecked.png" title="Two packages checked in Add Packages dialog" alt="Two packages checked in Add Packages dialog"></p>

<p>On adding the NuGet package the Add Packages dialog will close and the package installation will complete in the background. You will see status messages appear in the status bar at top of the main window as the installation progresses. The screenshots below show the status messages that are displayed when the NUnit NuGet package is installed.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/AddNUnitPackageStatusBarMessage.png" title="Adding NUnit package status bar message" alt="Adding NUnit package status bar message"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/NUnitPackageAddedSuccessfullyStatusBarMessage.png" title="NUnit package added successfully status bar message" alt="NUnit package added successfully status bar message"></p>

<p>More detailed information about the installation can be seen in the <strong>Package Console</strong> window.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/NUnitPackageAddedPackageConsole.png" title="NUnit package added messages in Package Console" alt="NUnit package added messages in Package Console"></p>

<p>The Package Console can be opened by clicking on a package status message in the status bar or from the <strong>View</strong> menu by selecting <strong>Pads &ndash; Package Console</strong>. If there is an error when installing a NuGet package then the Package Console will automatically open to show more information about the error.</p>

<p>On adding the first NuGet package to a project a <strong>Packages</strong> folder will be displayed in the Solution window.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowPackagesFolder.png" title="Solution window - Packages folder" alt="Solution window - Packages folder"></p>

<p>Any assembly references that a NuGet package adds to your project will be displayed in
the <strong>From Packages</strong> folder inside <strong>References</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowFromPackagesFolder.png" title="Solution window - From Packages folder" alt="Solution window - From Packages folder"></p>

<p>Whilst the NuGet package is being installed the package id text will be highlighted.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowPackagesBeingAdded.png" title="Solution window - packages being added" alt="Solution window - packages being added"></p>

<p>After the NuGet package is installed the text will be changed to black and a status message will be shown in the status bar.</p>

<h2>Searching for Packages</h2>

<p>The Add Packages dialog now supports the <a href="http://docs.nuget.org/docs/reference/search-syntax">extended NuGet search syntax</a>. Note that the NuGet package source will need to support this syntax. The main NuGet.org package source supports this search syntax.</p>

<p>So you can now make your search more specific by using one of the special tags, such as id, packageid, tags, author or owner. Some example searches are shown below:</p>

<pre><code>id:NUnit
packageid:Xamarin.Forms
tags:typescript
owner:xamarin
author:xamarin
</code></pre>

<h2>Removing NuGet Packages</h2>

<p>You can remove a NuGet package from the Solution window. Expand the <strong>Packages</strong> folder for your project, select the package, right click and select <strong>Remove</strong>, or press the delete key.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowPackageBeingRemoved.png" title="Solution window - remove package menu" alt="Solution window - package remove menu"></p>

<p>The package will then be uninstalled in the background. Status information will appear in the status bar and more detailed information will be shown in the Package Console window.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/RemovingNUnitPackageStatusBarMessage.png" title="Removing package status bar message" alt="Removing package status bar message"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/NUnitPackageRemovedSuccessfullyStatusBarMessage.png" title="Package removed status bar message" alt="Package removed status bar message"></p>

<h2>Updating NuGet Packages</h2>

<p>You can update an individual NuGet package by selecting it in the <strong>Solution</strong> window, right clicking and selecting <strong>Update</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowUpdatePackageMenu.png" title="Solution window - update package menu" alt="Solution window update package menu"></p>

<p>You can update all the packages in a project by right clicking the <strong>Packages</strong> folder and selecting <strong>Update</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowUpdateAllProjectPackagesMenu.png" title="Solution window - update all packages in project menu" alt="Solution window update all packages in project menu"></p>

<p>To update all the packages in the solution, either right click the solution in the <strong>Solution</strong> window and select <strong>Update Packages</strong>, or from the <strong>Project</strong> menu select <strong>Update Packages</strong>.</p>

<p>As with adding and removing a NuGet package you will see status bar messages as the update progresses and detailed information in the Package Console window.</p>

<h2>Restoring NuGet Packages</h2>

<p>By default NuGet packages will be automatically restored when a solution is opened.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/RestorePackagesStatusBarMessage.png" title="Packages being restored status bar message" alt="Packages being restored status bar message"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/PackagesRestoredSuccessfullyStatusBarMessage.png" title="Packages restored status bar message" alt="Packages restored status bar message"></p>

<p>You can disable this by going into preferences and unchecking <strong>Automatically restore packages when opening a solution</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/PreferencesAutomaticPackageRestore.png" title="Preferences - automatic package restore" alt="Preferences - automatic package restore"></p>

<p>With automatic package restore disabled you can manually restore NuGet packages in the following ways:</p>

<ul>
<li>Right click the <strong>Packages</strong> folder in the Solution window and select <strong>Restore</strong>.</li>
<li>Right click the solution and select <strong>Restore Packages</strong>.</li>
<li>From the <strong>Project</strong> menu select <strong>Restore Packages</strong>.</li>
</ul>


<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowRestorePackagesMenu.png" title="Solution window - restore packages menu" alt="Solution window - restore packages menu"></p>

<p>The status bar will be updated with information on the progress of the restore. More detailed information can be seen in the Package Console window.</p>

<h2>NuGet Packages in Project Templates</h2>

<p>You can now have a project template that will install NuGet packages. To do this you add a <strong>Packages</strong> element inside the <strong>Project</strong> element of the project template.</p>

<pre><code>&lt;Packages&gt;
    &lt;Package id="NUnit" /&gt;
    &lt;Package id="jQuery" version="1.7.1" /&gt;
&lt;/Packages&gt;
</code></pre>

<p>You can specify an exact version for the NuGet package. If the version is not specified then the latest version of the NuGet package will be installed.</p>

<p>By default Xamarin Studio will look for the NuGet packages from the main NuGet.org package source. To use your own package source instead you can create an addin and define the package source in its .addin.xml file. Inside your .addin.xml file you can add an <strong>Extension</strong> element which supports both online NuGet package sources and local directory package sources.</p>

<p>To define an online NuGet package source you can use the <strong>url</strong> attribute in your .addin.xml file:</p>

<pre><code>&lt;Extension path = "/MonoDevelop/Ide/ProjectTemplatePackageRepositories"&gt;
    &lt;PackageRepository url="https://mynugetfeed.nget/packages" /&gt;
&lt;/Extension&gt;
</code></pre>

<p>If you want your addin to work offline then you can include the NuGet packages with your addin in a subdirectory and use the following extension in your .addin.xml:</p>

<pre><code>&lt;Extension path = "/MonoDevelop/Ide/ProjectTemplatePackageRepositories"&gt;
    &lt;PackageRepository path="packages" /&gt;
&lt;/Extension&gt;
</code></pre>

<p>The <strong>path</strong> attribute here should contain the directory relative to where the addin is installed.</p>

<h2>Package Source and Proxy Authentication</h2>

<p>If a NuGet package source or a proxy needs authentication then Xamarin Studio will prompt for credentials.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesProxyCredentialPrompt.png" title="Proxy credentials dialog prompt" alt="Proxy credentials dialog prompt"></p>

<p>Please note that there is a bug that currently prevents proxy authentication with package sources that use https which will be fixed in the next release of Xamarin Studio.</p>

<h2>Configuring NuGet Package Sources</h2>

<p>NuGet package sources can be configured in preferences.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/PreferencesAddPackageSource.png" title="Preferences - adding package source" alt="Preferences - adding package source"></p>

<p>A new feature here is the ability to specify a username and password for a package source that requires authentication. The username and passwords are encrypted and stored in the NuGet.config file in the same way that NuGet.exe will if you use it on the command line.</p>

<p>That concludes our look at the new NuGet features in Xamarin Studio and MonoDevelop 5.0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop NuGet Addin 0.9 Released]]></title>
    <link href="http://lastexitcode.com/blog/2014/04/13/MonoDevelopNuGetAddin0-9Released/"/>
    <updated>2014-04-13T14:51:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/04/13/MonoDevelopNuGetAddin0-9Released</id>
    <content type="html"><![CDATA[<p>A new version of the NuGet addin for Xamarin Studio and MonoDevelop has been released.</p>

<h2>New Features</h2>

<p>The main change is to include <a href="http://docs.nuget.org/docs/release-notes/nuget-2.8.1">NuGet 2.8.1</a> which adds support for Windows Phone 8.1 projects.
Also some of the newer NuGet packages, such as Microsoft.Bcl.Immutable 1.1.20-beta, which the <a href="https://www.nuget.org/packages/Microsoft.CodeAnalysis">Roslyn NuGet packages</a> depend on, will not install unless NuGet 2.8.1 is being used.</p>

<p>For a detailed look at the changes please read the <a href="http://lastexitcode.com/projects/MonoDevelopNuGetAddin/Releases/0.9/">release note</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop NuGet Addin 0.8 Released]]></title>
    <link href="http://lastexitcode.com/blog/2013/12/15/MonoDevelopNuGetAddin0-8Released/"/>
    <updated>2013-12-15T18:22:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2013/12/15/MonoDevelopNuGetAddin0-8Released</id>
    <content type="html"><![CDATA[<p>A new version of the NuGet addin for Xamarin Studio and MonoDevelop has been released.</p>

<h2>New Features</h2>

<p>The main change is support for <a href="http://docs.nuget.org/docs/release-notes/nuget-2.7.2">NuGet 2.7.2</a> so you can now add NuGet packages, that include Portable Class Libraries (PCLs), to projects that target MonoAndroid.</p>

<p>For a detailed look at the changes please read the <a href="http://lastexitcode.com/projects/MonoDevelopNuGetAddin/Releases/0.8/">release note</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop NuGet Addin 0.7 Released]]></title>
    <link href="http://lastexitcode.com/blog/2013/11/03/MonoDevelopNuGetAddin0-7Released/"/>
    <updated>2013-11-03T15:28:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2013/11/03/MonoDevelopNuGetAddin0-7Released</id>
    <content type="html"><![CDATA[<p>A new version of the NuGet addin for Xamarin Studio and MonoDevelop has been released.</p>

<h2>New Features</h2>

<ul>
<li><a href="http://docs.nuget.org/docs/release-notes/nuget-2.7.1">NuGet 2.7.1</a> support.</li>
<li>Improved support for Portable Class Libraries (PCLs) on Linux and Mac.</li>
<li>Support using package restore with different parallel mono environments (Thanks to <a href="https://github.com/kjohnphillip">Kevin John-Philip</a>).</li>
</ul>


<p>For a detailed look at the new features please read the <a href="http://lastexitcode.com/projects/MonoDevelopNuGetAddin/Releases/0.7/">release note</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop NuGet Addin 0.6 Released]]></title>
    <link href="http://lastexitcode.com/blog/2013/08/26/MonoDevelopNuGetAddin0-6Released/"/>
    <updated>2013-08-26T13:21:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2013/08/26/MonoDevelopNuGetAddin0-6Released</id>
    <content type="html"><![CDATA[<p>A new version of the NuGet addin for Xamarin Studio and MonoDevelop has been released.</p>

<h2>New Features</h2>

<ul>
<li><a href="http://docs.nuget.org/docs/release-notes/nuget-2.7">NuGet 2.7</a> support.</li>
<li>Support for restoring NuGet packages.</li>
<li>Added message to show that the Manage Packages dialog is searching for packages.</li>
</ul>


<p>For a detailed look at the new features please read the <a href="http://lastexitcode.com/projects/MonoDevelopNuGetAddin/Releases/0.6/">release note</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop NuGet Addin 0.5 Released]]></title>
    <link href="http://lastexitcode.com/blog/2013/07/14/MonoDevelopNuGetAddin0-5Released/"/>
    <updated>2013-07-14T15:40:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2013/07/14/MonoDevelopNuGetAddin0-5Released</id>
    <content type="html"><![CDATA[<p>A new version of the NuGet addin for Xamarin Studio 4.0 has been released.</p>

<h2>New Features</h2>

<ul>
<li><a href="http://docs.nuget.org/docs/release-notes/nuget-2.6">NuGet 2.6</a> support.</li>
<li>Support for prerelease packages.</li>
<li>Support for packages using <a href="https://xdt.codeplex.com/">XML Document Transformations</a> (XDTs).</li>
<li>File conflict dialog when installing a package that is trying to add files that already exist in the project.</li>
<li>Installation errors now displayed in the Manage Packages dialog.</li>
<li>Support for packages that include MSBuild targets and properties files.</li>
<li>Support for accessing authenticated feeds.</li>
<li>Update All button added to Manage Packages dialog so all packages can be updated in a project or solution in one step.</li>
<li>Package title displayed in the list of packages instead of the package id. The package id displayed when a package is selected on the right hand side of the dialog.</li>
</ul>


<p>For a detailed look at the new features please read the <a href="http://lastexitcode.com/projects/MonoDevelopNuGetAddin/Releases/0.5/">release note</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IronPython Error: Attribute of Namespace Object is Read-Only]]></title>
    <link href="http://lastexitcode.com/blog/2012/11/17/IronPythonErrorAttributeOfNamespaceObjectIsReadOnly/"/>
    <updated>2012-11-17T14:40:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2012/11/17/IronPythonErrorAttributeOfNamespaceObjectIsReadOnly</id>
    <content type="html"><![CDATA[<p>If you are seeing an AttributeError, as shown below, when running IronPython 2.7 then check you have added all the required assembly reference to your application.</p>

<pre><code>AttributeError: attribute 'Xml' of 'namespace#' object is read-only
</code></pre>

<p>The attribute name displayed will most likely be different but the underlying problem is that you are trying to use a type that exists in an assembly that is not referenced. Here is a simple example that reproduces the error.</p>

<pre><code>import System
doc = System.Xml.XmlDocument()
</code></pre>

<p>The code above is importing the System namespace and then attempting to create an XmlDocument object. Running the above code with ipy.exe will result in the AttributeError being displayed.</p>

<pre><code>D:\projects&gt;ipy
IronPython 2.7.3 (2.7.0.40) on .NET 4.0.30319.296 (32-bit)
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import System
&gt;&gt;&gt; doc = System.Xml.Document()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: attribute 'Xml' of 'namespace#' object is read-only
&gt;&gt;&gt;
</code></pre>

<p>The cryptic error message indicates that we do not have a reference to the System.Xml assembly. To fix the problem we add the following two lines of code before the code that creates the XmlDocument object.</p>

<pre><code>import clr
clr.AddReference("System.Xml")
</code></pre>

<p>Running the code again will now cause the XmlDocument object to be created without an error.</p>

<pre><code>D:\projects&gt;ipy
IronPython 2.7.3 (2.7.0.40) on .NET 4.0.30319.296 (32-bit)
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import clr
&gt;&gt;&gt; clr.AddReference("System.Xml")
&gt;&gt;&gt; import System
&gt;&gt;&gt; doc = System.Xml.XmlDocument()
&gt;&gt;&gt; doc.ToString()
'System.Xml.XmlDocument'
&gt;&gt;&gt;
</code></pre>
]]></content>
  </entry>
  
</feed>
