<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt Ward]]></title>
  <link href="http://lastexitcode.com/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2021-06-13T12:14:10+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.10]]></title>
    <link href="http://lastexitcode.com/blog/2021/06/13/NuGetSupportInVisualStudioMac8-10/"/>
    <updated>2021-06-13T11:30:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2021/06/13/NuGetSupportInVisualStudioMac8-10</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Manage NuGet Packages dialog now uses native macOS UI</li>
<li> NuGet 5.9 support</li>
<li> Support disabling NuGet restore in NuGet.Config</li>
<li> Fixed automatic restore may still run if disabled in preferences</li>
<li> Fixed $(SolutionDir) not defined when restoring large solutio</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.10</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>Manage NuGet Packages dialog now uses native macOS UI</h2>

<p>The Manage NuGet Packages dialog is now displayed using Xamarin.Mac.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-10/ManageNuGetPackagesDialog.png" title="Manage NuGet packages dialog" alt="Manage NuGet packages dialog"></p>

<p>Previously the dialog was displayed using GTK#.</p>

<p>The following UI changes were also made:</p>

<ul>
<li>Tabs are now used for each page

<ul>
<li>Previously a link was used to select a page</li>
</ul>
</li>
<li>Search has moved to the same line as the window title</li>
<li>NuGet package sources have moved to the bottom
of the dialog</li>
<li><code>Show pre-release packages</code> check box has been renamed to <code>Include prereleases</code></li>
<li>Hyperlinks that were used to view the license and project pages
have been replaced with buttons</li>
<li>Close button has been removed</li>
</ul>


<h2>NuGet 5.9 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-5.9">NuGet 5.9.0.7134</a> is now
included with Visual Studio for Mac 8.10.</p>

<h2>Support disabling NuGet restore in NuGet.Config</h2>

<p>A NuGet.Config file can disable package restore via a enabled setting, as shown below.</p>

<pre><code>&lt;configuration&gt;
  &lt;packageRestore&gt;
    &lt;add key="enabled" value="false" /&gt;
  &lt;/packageRestore&gt;
&lt;/configuration&gt;
</code></pre>

<p>This is now supported in Visual Studio for Mac and will disable automatic package
restore overriding the setting in Preferences.</p>

<p><strong>Fixed automatic restore may still run if disabled in preferences</strong></p>

<p>Certain actions in SDK style projects, such as saving a project file in the
editor, and adding a reference to another project, would run a package restore even
if automatic restore was disabled in preferences.</p>

<p>Now, if automatic restore is disabled in preferences, no automatic restore
will be run. Restores can still be run from the main menu and the
Solution window.</p>

<p><strong>Fixed $(SolutionDir) not defined when restoring large solution</strong></p>

<p>When a solution contains more than 10 projects then MSBuild is used
directly to restore the projects. If a project was using the SolutionDir
property to import an MSBuild file then this would fail since SolutionDir
is not defined because no solution was being passed to MSBuild.</p>

<p>One way to reproduce this was to have an SDK style project that does not
define a TargetFramework itself but conditionally imports a project,
using a path that includes the $(SolutionDir) property, that defines
the TargetFramework. The NuGet restore would fail with an error about an
invalid framework identifier.</p>

<pre><code>error MSB4018: The “WriteRestoreGraphTask” task failed unexpectedly.
error MSB4018: NuGet.Frameworks.FrameworkException: Invalid
    framework identifier ‘’.
</code></pre>

<p>To fix this Visual Studio for Mac now runs the GenerateRestoreGraphFile
target specifying the solution, not just the projects. This allows
MSBuild to define the $(SolutionDir) property.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.9]]></title>
    <link href="http://lastexitcode.com/blog/2021/03/13/NuGetSupportInVisualStudio8-9/"/>
    <updated>2021-03-13T16:20:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2021/03/13/NuGetSupportInVisualStudio8-9</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Fixed implicit NuGet packages being updated</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.9</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<p><strong>Fixed implicit NuGet packages being updated</strong></p>

<p>Updating all NuGet packages, from the Solution window, in a .NET Core
2.1 project would fail with an error.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Package Microsoft.NETCore.App 2.2.8 is not compatible with netcoreapp2.1 (.NETCoreApp,Version=v2.1). Package Microsoft NETCore.App 2.2.8 supports: netcoreapp2.2 (.NETCoreApp,Version=v2.2)</span></code></pre></td></tr></table></div></figure>


<p>The problem was that implicitly defined (or auto-referenced) NuGet
package references were being updated when they should be ignored since
they cannot be updated. Now Visual Studio for Mac does not attempt to
update implicitly defined NuGet package references.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.8]]></title>
    <link href="http://lastexitcode.com/blog/2020/11/21/NuGetSupportInVisualStudioMac8-8/"/>
    <updated>2020-11-21T14:20:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2020/11/21/NuGetSupportInVisualStudioMac8-8</id>
    <content type="html"><![CDATA[<h2>Features</h2>

<ul>
<li> Azure DevOps NuGet package source authentication with signed in account</li>
<li> NuGet 5.8 support</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.8</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>Azure DevOps NuGet package source authentication with signed in account</h2>

<p>Visual Studio for Mac now has integrated support for accessing
<a href="https://docs.microsoft.com/en-us/azure/devops/artifacts/nuget/consume?view=azure-devops">Azure DevOps NuGet package sources</a>
using the <a href="https://docs.microsoft.com/en-us/visualstudio/mac/signing-in?view=vsmac-2019">account signed into the IDE</a>
without requiring a personal access token (PAT).</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-8/AzureDevOps-NuGetPackageSource.gif" title="Azure DevOps NuGet package source prompting for sign in in Visual Studio for Mac" alt="Azure DevOps NuGet package source prompting for sign in in Visual Studio for Mac"></p>

<p>If you are not signed in then the
account sign in dialog will be opened when an Azure DevOps NuGet package source
is accessed that requires authentication.</p>

<h2>NuGet 5.8 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-5.8">NuGet 5.8.0.6860</a> is now
included with Visual Studio for Mac 8.8.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.7]]></title>
    <link href="http://lastexitcode.com/blog/2020/08/15/NuGetSupportInVisualStudioMac8-7/"/>
    <updated>2020-08-15T12:40:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2020/08/15/NuGetSupportInVisualStudioMac8-7</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 5.7 support</li>
<li> .NET Core 3.1.401 support

<ul>
<li>Supported in Visual Studio for Mac 8.7.1</li>
</ul>
</li>
<li> .NET 5 preview 6 and 7 support</li>
<li> Fixed tests not discovered by VS Test adapter for imported NuGet packages</li>
<li> Fixed dependent projects not being restored after project reference added</li>
<li> Fixed SDK resolution errors with vstool</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.7</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>NuGet 5.7 support</h2>

<p><a href="https://github.com/NuGet/docs.microsoft.com-nuget/blob/db494772479ae44c2c00d10c9b01b0136bcee892/docs/release-notes/NuGet-5.7.md">NuGet 5.7.0.6702</a> is now
included with Visual Studio for Mac 8.7.</p>

<h2>.NET Core 3.1.401 support</h2>

<p>The NuGet packages shown in the Solution window in the Dependencies folder
would not show child dependencies when .NET Core 3.1.401 SDK
was installed.</p>

<p>The ResolvePackageDependenciesDesignTime MSBuild target&rsquo;s behaviour changed
in .NET Core 3.1.401 to no longer return the full set
of NuGet dependencies and now returns only the top level depdnencies.</p>

<p>The logic that was originally in this design time MSBuild target has been
added to Visual Studio for Mac so the full tree structure of the NuGet
package dependencies can be displayed in the Solution window.</p>

<p>Note that .NET Core 3.1.401 is supported in Visual Studio for Mac 8.7.1</p>

<h2>.NET 5 preview 6 and 7 support</h2>

<p>Restoring an ASP.Core project targeting .NET 5 would fail with an error
when the ResolvePackageAssets task was run.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/usr/local/share/dotnet/sdk/5.0.100-preview.6.20304.10/Sdks/Microsoft.NET.Sdk/targets/Microsoft.PackageDependencyResolution.targets(5,5):
</span><span class='line'>Error MSB4018: The "ResolvePackageAssets" task failed unexpectedly.
</span><span class='line'>System.MissingFieldException: Field not found: string NuGet.ProjectModel.LockFileItem.AliasesProperty Due to: Could not find field in class
</span><span class='line'>  at Microsoft.NET.Build.Tasks.ResolvePackageAssets+CacheWriter.WriteItems[T] (NuGet.ProjectModel.LockFileTarget target, System.Func`2[T,TResult] getAssets, System.Func`2[T,TResult] filter, System.Action`2[T1,T2] writeMetadata) [0x0008e] in &lt;9d95d6a4081d41288f54edb04b336893&gt;:0 </span></code></pre></td></tr></table></div></figure>


<p>NuGet 5.7 introduced a new AliasesProperty to the LockFileItem class. MSBuild in Mono 6.12 uses NuGet 5.6 build tasks which
do not support this new property causing the NuGet restore to fail.</p>

<p>Visual Studio for Mac now includes version 5.7 of the NuGet.Build.Tasks assembly and associated
MSBuild targets. These files are copied to Visual Studio for Mac&rsquo;s MSBuild host
when it is created and replace these files originally copied from Mono&rsquo;s MSBuild.</p>

<p>Note that .NET 5 preview 8 is not supported by Visual Studio for Mac 8.7 but is supported in by
Visual Studio for Mac 8.8.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed tests not discovered by VS Test adapter for imported NuGet packages</strong></p>

<p>Test adapter NuGet PackageReferences defined in a Directory.Build.props
file were not considered by Visual Studio for Mac.
This resulted in the Unit Tests window not showing any unit tests.
Only when the test adapter PackageReferences were in the main project file
would tests be discovered.</p>

<p><strong>Fixed dependent projects not being restored after project reference added</strong></p>

<p>For a new Blazor Web Assembly project (with ASP.NET Core hosted)
adding a new Razor library project, and having the Client project
reference the library project, would result in build warnings
incorrectly displayed for the
Server project due to conflicts between the NuGet packages used by
the Client because of the new Razor library project reference.</p>

<pre><code>MSB3277: Found conflicts between different versions of "Microsoft.AspNetCore.Components" 
</code></pre>

<p>Running a restore for the solution would fix this build warning.</p>

<p>With two SDK style projects referencing each other as follows:</p>

<p>ProjectB &ndash;> ProjectA</p>

<p>If a new SDK project was added, and ProjectA referenced it, the
restore would only occur for ProjectA not ProjectB. This would mean
the Lib project was not available to ProjectB until a restore was
run for ProjectB or for the solution. Depending on the NuGet packages used
this could result in build warnings.</p>

<p>To fix this all the projects, that reference the project which is modified
due to the new project reference, are now restored.</p>

<p><strong>Fixed SDK resolution errors with vstool</strong></p>

<p>vstool is an application that is included with Visual Studio for Mac and provides
a way to run some IDE features from the command line. When one of these features
used a project that required an SDK provided by NuGet it would fail to resolve and download that SDK.</p>

<p>For example, running the following would fail to resolve SDKs provided by NuGet packages.</p>

<pre><code>vstool gettext-update --sort -f:Main.sln
</code></pre>

<p>An error would be reported:</p>

<pre><code>ERROR: Unable to find SDK 'Xamarin.Mac.Sdk'
</code></pre>

<p>The NuGet SDK resolver would fail to find the NuGet.Credentials.dll
causing vstool to fail.</p>

<pre><code>FileNotFoundException Could not load file or assembly 'NuGet.Credentials, Version=5.6.0.5.
</code></pre>

<p>To fix this the NuGet.Credentials.dll is pre-loaded by Visual Studio for Mac so it is
available in the AppDomain when vstool is run.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.6]]></title>
    <link href="http://lastexitcode.com/blog/2020/05/25/NuGetSupportInVisualStudioMac8-6/"/>
    <updated>2020-05-25T10:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2020/05/25/NuGetSupportInVisualStudioMac8-6</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 5.6 support</li>
<li> Fixed escape key not closing Manage NuGet Packages dialog</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.6</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>NuGet 5.6 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-5.6">NuGet 5.6.0.6591</a> is now
included with Visual Studio for Mac 8.6.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed escape key not closing Manage NuGet Packages dialog</strong></p>

<p>When the search text box had focus pressing the escape key would
not close the Manage NuGet Packages dialog as it did in previous
versions. A change to fix accessibility of the search text box
broke the original behaviour of the dialog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manage Global NuGet Folders for Visual Studio for Mac]]></title>
    <link href="http://lastexitcode.com/blog/2020/04/11/ManageGlobalNuGetFoldersForVisualStudioMac/"/>
    <updated>2020-04-11T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2020/04/11/ManageGlobalNuGetFoldersForVisualStudioMac</id>
    <content type="html"><![CDATA[<p>NuGet supports configuring the location of the following
<a href="https://docs.microsoft.com/en-us/nuget/consume-packages/managing-the-global-packages-and-cache-folders">global folders</a>:</p>

<ul>
<li>Global NuGet packages cache

<ul>
<li>~/.nuget/packages</li>
</ul>
</li>
<li>HTTP cache

<ul>
<li>~/.local/share/NuGet/v3-cache</li>
</ul>
</li>
<li>NuGet plugins ache

<ul>
<li>~/.local/share/NuGet/plugins-cache</li>
</ul>
</li>
</ul>


<p>The above folder locations can be found by running the following command from Terminal.</p>

<pre><code>nuget locals all -list
</code></pre>

<p>Here we will take a look at how these can be configured for use by Visual Studio for Mac 8.5
when running on macOS Catalina.</p>

<h2>Configuring Global Packages Folder Only</h2>

<p>If only the global packages folder needs to be configured then the simplest way is to
define the globalPackagesFolder folder in the ~/.config/NuGet/NuGet.Config file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;configuration&gt;
</span><span class='line'>  &lt;config&gt;
</span><span class='line'>    &lt;add key="globalPackagesFolder" value="/Volumes/YourDrive/NuGet/.nuget/packages" /&gt;
</span><span class='line'>  &lt;/config&gt;
</span><span class='line'>  &lt;packageSources&gt;
</span><span class='line'>    &lt;add key="nuget.org" value="https://api.nuget.org/v3/index.json" protocolVersion="3" /&gt;
</span><span class='line'>  &lt;/packageSources&gt;
</span><span class='line'>&lt;/configuration&gt;</span></code></pre></td></tr></table></div></figure>


<p>Visual Studio for Mac will need to be restarted before it picks up any changes to the
NuGet.Config file.</p>

<h2>Configuring Global Folders with Environment Variables</h2>

<p>Visual Studio for Mac will not use environment variables defined in the Bash profile ~/.bash_profile or
the Zsh profile ~/.zprofile unless Visual Studio for Mac is run from the Terminal.</p>

<pre><code>open -n "/Applications/Visual Studio.app"
</code></pre>

<p>When Visual Studio for Mac is run from the Dock, or from LaunchPad, it does not inherit
these environment variables.</p>

<p>Let us take a look at how we can define these NuGet environment
variables so that Visual Studio for Mac will use them without having to launch it
from the Terminal.</p>

<p>Create the file ~/Library/LaunchAgents/environment.plist containing the following:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;?xml version=“1.0” encoding=“UTF-8”?&gt;
</span><span class='line'>&lt;!DOCTYPE plist PUBLIC “-//Apple//DTD PLIST 1.0//EN” “https://www.apple.com/DTDs/PropertyList-1.0.dtd”&gt;
</span><span class='line'>&lt;plist version=“1.0”&gt;
</span><span class='line'>&lt;dict&gt;
</span><span class='line'>&lt;key&gt;Label&lt;/key&gt;
</span><span class='line'>&lt;string&gt;my.startup&lt;/string&gt;
</span><span class='line'>&lt;key&gt;ProgramArguments&lt;/key&gt;
</span><span class='line'>&lt;array&gt;
</span><span class='line'>&lt;string&gt;sh&lt;/string&gt;
</span><span class='line'>&lt;string&gt;-c&lt;/string&gt;
</span><span class='line'>&lt;string&gt;launchctl setenv NUGET_PACKAGES /Volumes/YourDrive/NuGet/.nuget/packages
</span><span class='line'>launchctl setenv NUGET_HTTP_CACHE_PATH /Volumes/YourDrive/NuGet/.nuget/v3-cache
</span><span class='line'>launchctl setenv NUGET_PLUGINS_CACHE_PATH /Volumes/YourDrive/NuGet/.nuget/plugins-cache&lt;/string&gt;
</span><span class='line'>&lt;/array&gt;
</span><span class='line'>&lt;key&gt;RunAtLoad&lt;/key&gt;
</span><span class='line'>&lt;true/&gt;
</span><span class='line'>&lt;/dict&gt;
</span><span class='line'>&lt;/plist&gt;</span></code></pre></td></tr></table></div></figure>


<p>Replace the NuGet paths <code>/Volumes/YourDrive/NuGet/</code> defined above as required.</p>

<p>Restart macOS to have this Launch Agent run.</p>

<p>After restarting you can check the environment variables are being used by NuGet by
using the command line:</p>

<pre><code>nuget locals all -list
</code></pre>

<p>Now when Visual Studio for Mac is launched from the Dock, or from LaunchPad, it will use these
custom NuGet folders.</p>

<h2>More Information</h2>

<p><a href="https://en.wikipedia.org/wiki/Launchd#launchctl">launchctl</a> setenv defines environment variables
globally so they are available to all macOS
applications launched with <a href="https://en.wikipedia.org/wiki/Launchd">launchd</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.5]]></title>
    <link href="http://lastexitcode.com/blog/2020/04/05/NuGetSupportInVisualStudioMac8-5/"/>
    <updated>2020-04-05T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2020/04/05/NuGetSupportInVisualStudioMac8-5</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 5.4 support</li>
<li> Support Plugin-based NuGet Credential Providers</li>
<li> Fixed requests bypassing the native macOS HTTP handler</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.5</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>NuGet 5.4 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-5.4">NuGet 5.4.0.6315</a> is now
included with Visual Studio for Mac 8.5.</p>

<h2>Support Plugin-based NuGet Credential Providers</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/reference/extensibility/nuget-cross-platform-plugins">NuGet credential provider plugins</a>
are now supported by Visual Studio for Mac.</p>

<p>Plugins are self-contained executables which provide
credentials for NuGet package sources. One example is the
<a href="https://github.com/microsoft/artifacts-credprovider">Azure Artifacts Credential Provider</a> which
Visual Studio for Mac can now use whilst it does not have integrated support for
accessing packages sources available from
<a href="https://docs.microsoft.com/en-us/azure/devops/artifacts/get-started-nuget">Azure DevOps</a>.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed HTTP requests bypassing the native macOS HTTP handler</strong></p>

<p>Restoring or installing a NuGet package into a project that uses
PackageReferences was bypassing the native macOS HTTP handler.</p>

<p>This was due
to NuGet&rsquo;s CachingSourceProvider creating its own set of
INuGetResourceProviders when it creates a set of new SourceRepository
instances. This resulted in the default HttpSourceResourceProvider
being used, instead of the custom one provided by Visual Studio for Mac.
The default HttpSourceResourceProvider uses Mono&rsquo;s HttpClientHandler not
the native HTTP Client handle NSUrlSessionHandler provided by
Xamarin.Mac. This would happen
when the Nuget package was was downloaded.</p>

<p>NuGet 5.4 now supports defining custom INuGetResourceProvider factory that is used
globally. This is now used by Visual Studio for Mac so all HTTP requests
use the native macOS HTTP handler NSUrlSessionHandler.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.4]]></title>
    <link href="http://lastexitcode.com/blog/2020/01/19/NuGetSupportInVisualStudioMac8-4/"/>
    <updated>2020-01-19T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2020/01/19/NuGetSupportInVisualStudioMac8-4</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Improved accessibility of the Manage NuGet Packages dialog and Add Package Source dialog</li>
<li> Fixed updating multiple NuGet packages failing due to restricted version range of a common dependency</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.4</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>Accessibility Improvements &ndash; Manage NuGet Packages dialog</h2>

<p><strong>Voice Over now recognises tabs</strong></p>

<p>The Browse, Installed, Updates and Consolidates tabs are now recognised as tabs
by Voice Over. Previously they were being treated as text labels and Voice Over
would not announce that a tab could be selected via Control-Option-Space.</p>

<p><strong>Voice Over now announces status messages</strong></p>

<p>The status message that is displayed with the busy spinner image is now
announced by Voice Over. When the status message is removed another
message is announced by Voice Over to say the loading has completed
or, if a search filter was entered, search was completed. If no
packages are found when searching this message is also announced
by Voice Over.</p>

<p><strong>Improve Voice Over reading of Id label</strong></p>

<p>The Id label has been changed to ID. Using ID allows Voice Over to announce it as I.D. instead of a single
word. Note that some Voice Over voices, such as English UK, still
announce the text incorrectly. Without changing the label text to be &ldquo;I.D.&rdquo;
there does not seem to be a way of fixing this for all voices. System
Preferences on the Mac can be used to change the pronounciation for
certain words if required.</p>

<p><strong>Voice Over now reads first column header in Consolidate tab</strong></p>

<p>The check box to select a project to consolidate was in its own column that
had no name. Using Voice Over it was not obvious what this check box was for. Now the check
box and the project name are in the same column and Voice Over reads
the column header name, the project name and the checkbox state which
makes it easier to understand what the list is displaying.</p>

<p><strong>Voice Over now reading associated labels for selected UI control</strong></p>

<p>Labels were not associated with their corresponding UI controls which
resulted in them not being read by Voice Over when corresponding UI control
was selected.</p>

<p>The package source combo box is now read by Voice Over as &lsquo;Package Sources&rsquo;.
Previously there was no associated label information being read.</p>

<p>Voice Over now reads the label for Search text field. The search text box now shows &lsquo;Search&rsquo; as
placeholder text.</p>

<p><strong>Voice Over now reading package list information</strong></p>

<p>Voice Over now reads the package information in the list and the check box
can be ticked or unticked by using Voice Over. Previously no information was
read by Voice Over and the check box could not be accessed.</p>

<p><strong>Keyboard can now be used to move across tabs</strong></p>

<p>Previously it was not possible to tab across the Browse, Installed, Updates or Consolidate tabs.</p>

<p>This change will be in Visual Studio for Mac 8.4.2.</p>

<h2>Accessibility Improvements &ndash; Add Package Source Dialog</h2>

<p>In Preferences &ndash; NuGet &ndash; Sources, the Add Package Source dialog
would lose focus when the Browse button was used. A way to reproduce
this is to tab to the Add button, press space, then tab to the
Browse button in the Add Package Source dialog, press space, then
press escape. The Add Package Source dialog then no longer has focus
and tabbing does not work.</p>

<p>This has been fixed by explicitly setting focus back to the parent dialog
when a child dialog is closed.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed updating multiple NuGet packages failing due to restricted version range of a common dependency</strong></p>

<p>Updating two NuGet package references that have a strict dependency
on a single version of another NuGet package, not explicitly added
to the project, would fail in the Manage NuGet Packages dialog. This
was because the update was being done one NuGet package at a time.</p>

<p>With an Android project that uses Xamarin.Forms this could happen when updating
Xamarin.Essentials, an Xamarin.Android.Support.Core.Utils and Xamarin.Forms at the same time.
The Xamarin.Android.Support NuGet packages
depend on specific versions for their dependencies which can cause the update to fail
depending on whether a NuGet package is updated on its own or in a group. The resulting failure
would be similar to</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Version conflict detected for Xamarin.Android.Support.Collections. Install/reference Xamarin.Android.Support.Collections 28.0.0.3 directly to project to resolve this issue. 
</span><span class='line'> MyProject.Android -&gt; Xamarin.Android.Support.Core.Utils 28.0.0.3 -&gt; Xamarin.Android.Support.Compat 28.0.0.3 -&gt; Xamarin.Android.Support.Collections (= 28.0.0.3) 
</span><span class='line'> MyProject.Android -&gt; Xamarin.Essentials 1.2.0 -&gt; Xamarin.Android.Support.CustomTabs 28.0.0.1 -&gt; Xamarin.Android.Support.Collections (= 28.0.0.1).</span></code></pre></td></tr></table></div></figure>


<p>Updating NuGet packages in the Manage NuGet packages dialog is now done
as a batch instead of individually. This allows NuGet to
update both NuGet packages so they then use the new strict dependency.</p>

<p>Note that updating all packages in the project from the Solution
window does not have this problem since there the packages were already
updated together in a batch.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Project System Tools for Visual Studio for Mac]]></title>
    <link href="http://lastexitcode.com/blog/2019/12/31/ProjectSystemToolsForVisualStudioMac/"/>
    <updated>2019-12-31T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2019/12/31/ProjectSystemToolsForVisualStudioMac</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/mrward/monodevelop-project-system-tools">Project System Tools extension</a> provides
MSBuild design-time and build logging for Visual Studio for Mac.</p>

<p><img src="http://lastexitcode.com/images/blog/ProjectSystemToolsForVisualStudioMac/BuildLoggingBinLogFile.png" title="Build Logging window and BinLog tree view" alt="Build Logging window and BinLog tree view"></p>

<p>This is based on the <a href="https://github.com/dotnet/project-system-tools">Project System Tools available for Visual Studio on Windows</a> and also re-uses code from this extension.</p>

<h2>Features</h2>

<ul>
<li>Build Logging window

<ul>
<li>Shows a list of builds and design-time builds</li>
</ul>
</li>
<li>View MSBuild log output for all builds and design-time builds</li>
<li>View MSBuild binary logs for builds

<ul>
<li>Build tab shows a tree view of the build results from the binary log</li>
<li>Target Summary tab shows target name, number of calls, timings and file location</li>
<li>Task Summary tab shows task name, number of calls, timings and file location</li>
</ul>
</li>
</ul>


<h2>Supports</h2>

<ul>
<li>Visual Studio Mac 8.1 or later.</li>
</ul>


<h2>Build Logging Window</h2>

<p>To open the Build Logging Window</p>

<ul>
<li>Select View &ndash; Pads &ndash; Build Logging</li>
</ul>


<p><img src="http://lastexitcode.com/images/blog/ProjectSystemToolsForVisualStudioMac/BuildLoggingWindow.png" title="Build Logging window" alt="Build Logging window"></p>

<p>Click the green arrow to enable logging for builds and design-time builds.</p>

<p>To stop the logging click the red square.</p>

<p>To filter the targets use the combo box to restrict the items shown to builds or design time builds, or use the search on the right hand side of the window.</p>

<h2>MSBuild Log Output</h2>

<p>To open the MSBuild log output</p>

<ul>
<li>Double click the row in the Build Logging window or</li>
<li>Right click the row and select Open Log File</li>
</ul>


<p><img src="http://lastexitcode.com/images/blog/ProjectSystemToolsForVisualStudioMac/BuildLoggingOpenLogFileMenu.png" title="Open Log File context menu" alt="Open Log File context menu"></p>

<p><img src="http://lastexitcode.com/images/blog/ProjectSystemToolsForVisualStudioMac/MSBuildLogFile.png" title="MSBuild Log File" alt="MSBuild Log File"></p>

<p>The verbosity of the MSBuild log output is configured in Preferences &ndash; Projects &ndash; Build &ndash; Log verbosity.</p>

<h2>MSBuild Binary Log</h2>

<p>To open a binary log file</p>

<ul>
<li>Right click the row in the Build Logging window and select Open Binary Log File</li>
</ul>


<p>Note that binary logs are only available when the project or solution is built.
Support for design-time build binary logs should be available in Visual Studio for Mac 8.5.</p>

<p>Three tabs are provided by the Project System Tools extension when a binary log file is opened.</p>

<ul>
<li>Build

<ul>
<li>Tree view of the binary log targets and tasks</li>
<li>Properties window shows more information about the selected task or target</li>
</ul>
</li>
<li>Target Summary

<ul>
<li>Target name</li>
<li>Source filename</li>
<li>Number of calls</li>
<li>Time taken</li>
<li>Percentage of total time taken</li>
</ul>
</li>
<li>Task Summary

<ul>
<li>Task name</li>
<li>Source filename</li>
<li>Number of calls</li>
<li>Time taken</li>
<li>Percentage of total time taken</li>
</ul>
</li>
</ul>


<h2>Build Tab</h2>

<p><img src="http://lastexitcode.com/images/blog/ProjectSystemToolsForVisualStudioMac/MSBuildBinaryLogFileBuildTab.png" title="MSBuild Binary Log File - Build tab" alt="MSBuild Binary Log File - Build tab"></p>

<p>The Build tab shows the run times of the targets and tasks, and whether they ran successfully.</p>

<p>Skipped tasks and targets are shown in light grey text.</p>

<p>Selecting a tree node in the Build tab will show more information about that node in the Properties window.</p>

<p><img src="http://lastexitcode.com/images/blog/ProjectSystemToolsForVisualStudioMac/BuildTabProperties.png" title="MSBuild Binary Log File - Build tab - Properties window" alt="MSBuild Binary Log File - Build tab - Properties window"></p>

<h2>Target Summary Tab</h2>

<p><img src="http://lastexitcode.com/images/blog/ProjectSystemToolsForVisualStudioMac/TargetSummaryTab.png" title="MSBuild Binary Log File - Target Summary tab" alt="MSBuild Binary Log File - Target Summary tab"></p>

<p>Targets are shown in the order they were run and can be sorted by clicking the column headers.</p>

<h2>Task Summary Tab</h2>

<p><img src="http://lastexitcode.com/images/blog/ProjectSystemToolsForVisualStudioMac/TaskSummaryTab.png" title="MSBuild Binary Log File - Task Summary tab" alt="MSBuild Binary Log File - Task Summary tab"></p>

<p>Tasks are shown in the order they were run and can be sorted by clicking the column headers.</p>

<h2>Project System Tools Installation</h2>

<p>The Project System Tools extension is available from the Visual Studio for Mac extensions repository. To install the addin:</p>

<ul>
<li>From the main menu, open the Extensions Manager dialog.</li>
<li>Select the Gallery tab.</li>
<li>Expand IDE extensions.</li>
<li>Select Project System Tools</li>
<li>Click the Refresh button if the extension is not visible.</li>
<li>Click Install… to install the extension.</li>
<li>Restart Visual Studio for Mac.</li>
</ul>


<h2>Links</h2>

<ul>
<li><a href="https://github.com/mrward/monodevelop-project-system-tools">Project System Tools source code &ndash; Visual Studio for Mac</a></li>
<li><a href="https://marketplace.visualstudio.com/items?itemName=VisualStudioProductTeam.ProjectSystemTools">Project System Tools Marketplace &ndash; Visual Studio on Windows</a></li>
<li><a href="https://github.com/dotnet/project-system-tools">Project System Tools source code &ndash; Visual Studio for Windows</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.3]]></title>
    <link href="http://lastexitcode.com/blog/2019/10/06/NuGetSupportInVisualStudioMac8-3/"/>
    <updated>2019-10-06T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2019/10/06/NuGetSupportInVisualStudioMac8-3</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 5.3 support</li>
<li> Managing NuGet packages for the solution</li>
<li> Show NuGet package updates for SDK style projects in the Solution window</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.3</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>NuGet 5.3 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-5.3">NuGet 5.3.0.6192</a> is now
included with Visual Studio for Mac 8.3.</p>

<h2>Managing NuGet Packages for the solution</h2>

<p>Support for managing NuGet packages for the solution was originally available in a separate
<a href="https://github.com/mrward/monodevelop-nuget-extensions">NuGet extensions addin</a>. This feature has now
been integrated into Visual Studio for Mac, along with some user interface changes, and is now available by
default.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-3/ManageNuGetPackagesSolutionBrowseTab.png" title="Manage NuGet Packages - Solution - Browse tab" alt="Manage NuGet Packages - Solution - Browse tab"></p>

<p>The NuGet extensions addin is still available and provides a
NuGet Powershell Console but it no longer includes a Manage NuGet Packages dialog.</p>

<p>The Manage NuGet Packages dialog contains four tabs:</p>

<ul>
<li>Browse

<ul>
<li>Used to search for and install NuGet packages. This is equivalent to the old Add NuGet Packages dialog.</li>
</ul>
</li>
<li>Installed

<ul>
<li>Shows the installed NuGet packages. NuGet packages can be uninstalled from this tab.</li>
</ul>
</li>
<li>Updates

<ul>
<li>Shows NuGet packages that have new versions available.</li>
</ul>
</li>
<li>Consolidate

<ul>
<li>Shows NuGet packages that have multiple versions installed in the solution. This is only available when managing
NuGet packages for the solution.</li>
</ul>
</li>
</ul>


<p>The Add Packages dialog has been removed and replaced with the Manage NuGet Packages dialog since everything that was supported with the Add Packages dialog is available the new dialog.</p>

<p>To manage the NuGet packages for
the solution the Manage NuGet Packages dialog can be opened in the following ways:</p>

<ul>
<li>Right click the solution in the Solution window and select <strong>Manage NuGet Packages&hellip;</strong></li>
<li>From the main menu select <strong>Project</strong> &ndash; <strong>Manage NuGet Packages&hellip;</strong></li>
</ul>


<p>The Manage NuGet Packages dialog title is different depending on whether the NuGet packages
are being managed for the solution or for the project. When managing packages for the solution
the dialog title will be <strong>Manage NuGet Packages – Solution</strong>.</p>

<h3>Managing NuGet Packages for a single project</h3>

<p>To manage NuGet packages for a single project the Manage NuGet Packages dialog can be opened
in the following ways:</p>

<ul>
<li>Right click the project in the Solution window and select <strong>Manage NuGet Packages&hellip;</strong>

<ul>
<li>This was added to make Visual Studio for Mac consistent with Visual Studio on Windows</li>
</ul>
</li>
<li>Double click the Packages folder in the Solution window</li>
<li>Right click the Packages folder and select <strong>Manage NuGet Packages&hellip;</strong></li>
<li>Double click the Dependencies folder in the Solution window.

<ul>
<li>In previous versions of Visual Studio for Mac this would not open the dialog</li>
</ul>
</li>
<li>Right click the Depdendencies folder and select <strong>Manage NuGet Packages..</strong></li>
<li>Double click the NuGet folder underneath the Dependencies folder</li>
<li>Right click the NuGet folder, underneath the Dependencies folder, and select <strong>Manage NuGet Packages&hellip;</strong></li>
</ul>


<p>When managing NuGet packages for a single project the dialog title shows the project name
<strong>Manage NuGet Packages – ProjectName</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-3/ManageNuGetPackagesProject.png" title="Manage NuGet Packages for Project" alt="Manage NuGet Packages for Project"></p>

<h3>Installing NuGet Packages</h3>

<p>The Browse tab in the Manage NuGet Packages can be used to search for and install NuGet packages
into one or more projects. This tab is equivalent to the old Add NuGet Packages dialog.</p>

<p>The latest stable NuGet package version is now indicated by
having <strong>(latest stable)</strong> appended on the right hand
side of the dialog.</p>

<p>To install a NuGet package into multiple projects:</p>

<ul>
<li>Right click the solution and select <strong>Manage NuGet Packages&hellip;</strong></li>
<li>Search for a NuGet package</li>
<li>Click the <strong>Add Package</strong> button</li>
<li>In the Select Projects dialog that is opened, select the projects that you want the NuGet package to be installed, and click OK</li>
</ul>


<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-3/ManageNuGetPackagesSolutionSelectProjects.png" title="Manage NuGet Packages - Select Projects dialog" alt="Manage NuGet Packages - Select Projects dialog"></p>

<h3>Uninstalling NuGet Packages</h3>

<p>The Installed tab in the Manage NuGet Packages can be used to uninstall
NuGet packages from one or more projects.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-3/ManageNuGetPackagesInstalledTab.png" title="Manage NuGet Packages - Installed tab" alt="Manage NuGet Packages - Installed tab"></p>

<p>To uninstall a NuGet package:</p>

<ul>
<li>Right click the solution and select <strong>Manage NuGet Packages&hellip;</strong></li>
<li>Select the Installed tab</li>
<li>Select a NuGet package to uninstall

<ul>
<li>To uninstall multiple NuGet packages use the check boxes in the package list</li>
</ul>
</li>
<li>Click the <strong>Uninstall Package</strong> button</li>
<li>In the Select Projects dialog that is opened, select the projects where the NuGet package should be removed, and click OK.</li>
</ul>


<h3>Updating NuGet Packages</h3>

<p>The Updates tab shows the updated NuGet packages available to be installed.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-3/ManageNuGetPackagesUpdatesTab.png" title="Manage NuGet Packages - Updates tab" alt="Manage NuGet Packages - Updates tab"></p>

<p>The Updates tab shows the <strong>Current Version</strong> of the NuGet package installed on the right hand side of the dialog. If
multiple versions of the packages are installed across the solution, then this will
display <strong>Multiple</strong> with an information icon where information about the
projects and versions can be viewed in a tooltip.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-3/UpdatesTabMultipleVersions.png" title="Manage NuGet Packages - Updates tab - Multiple versions installed" alt="Manage NuGet Packages - Updates tab -  Multiple versions installed"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-3/UpdatesTabMultipleVersionsTooltip.png" title="Manage NuGet Packages - Updates tab - Multiple versions installed - tooltip" alt="Manage NuGet Packages - Updates tab -  Multiple versions installed - tooltip"></p>

<p>To update a NuGet package in multiple projects:</p>

<ul>
<li>Right click the solution and select <strong>Manage NuGet Packages&hellip;</strong></li>
<li>Select the Updates tab</li>
<li>Select a NuGet package to update

<ul>
<li>To update multiple NuGet packages use the check boxes in the packages list</li>
</ul>
</li>
<li>Click the <strong>Update Package</strong> button</li>
<li>In the Select Projects dialog that is opened, select the projects where the NuGet package should be updated, and click OK.</li>
</ul>


<h3>Consolidating NuGet Packages</h3>

<p>If there are different versions of a NuGet package installed in the solution the
Consolidate tab will show this and allow the packages to be consolidated to a particular version.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-3/ManageNuGetPackagesConsolidateTab.png" title="Manage NuGet Packages - Consolidate tab" alt="Manage NuGet Packages - Consolidate tab"></p>

<p>When a NuGet package is selected, the right hand side of the dialog shows
all the projects in the solution. The project will be checked if it has the selected
package installed. The package version used by the project is also shown.
Projects that have a package to consolidate are shown first in the list.</p>

<p>Note that the Consolidate tab is only displayed if NuGet packages are being
managed for the solution.</p>

<p>By default the Consolidate tab will select the latest version available from the current NuGet package source.
This may be different from the latest version installed in the projects.</p>

<p>To Consolidate a NuGet package:</p>

<ul>
<li>Right click the solution and select <strong>Manage NuGet Packages&hellip;</strong></li>
<li>Select the Consolidate tab</li>
<li>Select the NuGet package you want to consolidate.

<ul>
<li>Use the check box next to the NuGet package if you want to consolidate multiple NuGet packages at the same time</li>
</ul>
</li>
<li>Check or uncheck the projects in the projects list.

<ul>
<li>By default projects that contain the selected NuGet package will be checked</li>
</ul>
</li>
<li>Click the <strong>Consolidate Package</strong> button.</li>
</ul>


<h2>Show NuGet package updates for SDK style projects in the Solution window</h2>

<p>NuGet package updates are now shown in the Solution window for SDK style
projects.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-3/SdkStyleProjectPackageUpdates.png" title="SDK style project - package updates - solution window" alt="SDK style project - package updates - solution window"></p>

<p>If an updated package is available this information will now be shown
on the Dependencies folder, the NuGet folder, and the top level
package in the Solution window.</p>

<p>Previously NuGet package updates were only displayed for projects
that used a packages.config file or for non-SDK style projects
that used PackageReferences.</p>

<p>Instead of showing the updated NuGet package version text, next to the installed version
in the solution window, an update icon
is displayed with the version information available in a tooltip. This prevents
the version information taking up a lot of space to the right, which can
happen for long version numbers.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-3/SdkStyleProjectPackageUpdateVersionTooltip.png" title="SDK style project - package update version tooltip - solution window" alt="SDK style project - package update version tooltip - solution window"></p>

<p>The Update menu, when right clicking a NuGet package, now shows the
version for the update. Otherwise
the Update menu is displayed.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-3/SdkStyleProjectUpdateToMenuItem.png" title="SDK style project - update menu item - solution window" alt="SDK style project - update menu item - solution window"></p>

<p>If there is an update and a NuGet warning only the warning icon
will be displayed with the warning message available in the tooltip.
The update information will only be available in the right click
context menu for the NuGet package in this case.</p>

<p>Package versions are now displayed in solution window for non-SDK style projects.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac8-3/NonSdkStyleProjectPackageUpdates.png" title="Non-SDK style project - package updates - solution window" alt="Non-SDK style project - package updates - solution window"></p>

<p>SDK style projects always displayed the package version in the Solution
window but non-SDK style projects did not. To make these consistent the NuGet
package version is now shown in the Solution window for all project types.</p>

<p>Previously for non-SDK style projects the package version was shown
as a menu item when right clicking a NuGet package. This has been removed
since the package version is now displayed next to the package id in the
Solution window.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed text colour when row selected in Manage NuGet Packages dialog</strong></p>

<p>When a package was checked in the Add NuGet Packages dialog any
row that was selected would display black text instead of white text. This was hard
to read with the blue background colour used for the selected row. The wrong text colour was being set when a package was
checked. This has been fixed in the Manage NuGet Packages dialog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.2]]></title>
    <link href="http://lastexitcode.com/blog/2019/07/28/NuGetSupportInVisualStudioMac8-2/"/>
    <updated>2019-07-28T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2019/07/28/NuGetSupportInVisualStudioMac8-2</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 5.1 support</li>
<li> Support partial installs into multi-target framework projects</li>
<li> Fixed no network error displayed in Add Packages dialog</li>
<li> Fixed restoring too many projects when target framework changed</li>
<li> Fixed adding non-sdk style project triggering NuGet restore multiple times</li>
<li> Fixed restore menu incorrectly disabled</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.2</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>NuGet 5.1 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-5.1-rtm">NuGet 5.1.0.6013</a> is now
included with Visual Studio for Mac 8.2.</p>

<h2>Support partial installs into multi-target framework projects</h2>

<p>A NuGet package being installed into a multi-target framework project
may not support all frameworks. When this happens the PackageReference
will now be added with a condition so the NuGet package is not used
for frameworks that are not supported.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
</span><span class='line'>
</span><span class='line'>  &lt;PropertyGroup&gt;
</span><span class='line'>    &lt;TargetFrameworks&gt;net472;netstandard1.2&lt;/TargetFrameworks&gt;
</span><span class='line'>  &lt;/PropertyGroup&gt;
</span><span class='line'>
</span><span class='line'>  &lt;ItemGroup Condition="'$(TargetFramework)' == 'net472'"&gt;
</span><span class='line'>    &lt;PackageReference Include="EntityFramework" Version="6.2.0" /&gt;
</span><span class='line'>  &lt;/ItemGroup&gt;
</span><span class='line'>&lt;/Project&gt;</span></code></pre></td></tr></table></div></figure>


<h2>Bug Fixes</h2>

<p><strong>Fixed no network error displayed in Add Packages dialog</strong></p>

<p>Networking errors were not being reported in the Add Packages dialog
resulting in no information being available explaining why there were
no search results.</p>

<p>Visual Studio for Mac uses Xamarin.Mac&rsquo;s NSUrlSessionHandler
for HTTP requests and the NSUrlSessionHandler reports errors
using curly braces. For example:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[nuget.org] The Internet connection appears to be offline.
</span><span class='line'>  Error Domain=NSURLErrorDomain Code=-1009 "The Internet connection appears to be offline." UserInfo={NSUnderlyingError=0x7fce42892a80 {Error Domain=kCFErrorDomainCFNetwork Code=-1009 "(null)" UserInfo={_kCFStreamErrorCodeKey=50, _kCFStreamErrorDomainKey=1}}, NSErrorFailingURLStringKey=https://api-v2v3search-1.nuget.org/query?q=&skip=0&take=26&prerelease=false&supportedFramework=Xamarin.iOS,Version=v1.0&semVerLevel=2.0.0, NSErrorFailingURLKey=https://api-v2v3search-1.nuget.org/query?q=&skip=0&take=26&prerelease=false&supportedFramework=Xamarin.iOS,Version=v1.0&semVerLevel=2.0.0, _kCFStreamErrorDomainKey=1, _kCFStreamErrorCodeKey=50, NSLocalizedDescription=The Internet connection appears to be offline.}</span></code></pre></td></tr></table></div></figure>


<p>This text was then being passed to string.Format in the Add Packages
dialog and was causing a FormatException. The error would then not be
displayed in the Add Packages dialog. The text now has the curly braces
escaped to prevent the FormatException.</p>

<p><strong>Fixed restoring too many projects when target framework changed</strong></p>

<p>When the target framework was changed in a SDK style project all SDK style
projects in the solution were restored. Now only the project and
projects that depend on it are restored.</p>

<p><strong>Fixed adding non-sdk style project triggering NuGet restore multiple times</strong></p>

<p>Adding a new non-sdk style project to a solution could cause a NuGet
restore to run multiple times.</p>

<p>The problem was that the SDK style projects, such as those that target
Xamarin.Mac, may change their target framework on re-evaluation. This
was causing Visual Studio for Mac
to run a restore for all SDK style projects in the solution, multiple
times. To avoid this the target framework changes during re-evaluation
are ignored.</p>

<p><strong>Fixed restore menu incorrectly disabled</strong></p>

<p>In the Solution window on right clicking a solution, or the packages folder, the restore
menu was incorrectly disabled when an SDK style project targeted .NET Framework
or when the project had its RestoreProjectStyle set to PackageReference and
had no PackageReferences.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[LibMan support in Visual Studio for Mac]]></title>
    <link href="http://lastexitcode.com/blog/2019/07/13/LibManSupportInVisualStudioMac8-1/"/>
    <updated>2019-07-13T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2019/07/13/LibManSupportInVisualStudioMac8-1</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/mrward/LibraryManager">Library Manager addin</a> provides
Microsoft Library Manager (LibMan) support for Visual Studio for Mac. LibMan provides a way to install
third-party client-side JavaScript libraries for ASP.NET Core and ASP.NET projects.</p>

<h2>Features</h2>

<ul>
<li>Add Client-Side Library dialog</li>
<li>Restore client-side libraries</li>
<li>Deleting client-side libraries</li>
<li>Automatic client-side library restore on saving libman.json file</li>
</ul>


<p>Full text editor support is not currently available. The following text editor quick actions are not supported:</p>

<ul>
<li>Uninstall a client-side library</li>
<li>Check for client-side library updates</li>
</ul>


<h2>Supports</h2>

<ul>
<li>Visual Studio Mac 8.1 or later.</li>
<li>ASP.NET Core and ASP.NET projects</li>
</ul>


<h2>Add Client-Side Library Dialog</h2>

<p>To open the Add Client-Side Library dialog, right click the project, or a folder, and select Add &ndash; Client-Side Library.</p>

<p><img src="http://lastexitcode.com/images/blog/LibManSupportInVisualStudioMac8-1/AddClientSideLibraryMenuItem.png" title="Add - Client-Side Library menu" alt="Add - Client-Side Library menu"></p>

<p><img src="http://lastexitcode.com/images/blog/LibManSupportInVisualStudioMac8-1/AddClientSideLibraryDialog.png" title="Add Client-Side Library dialog" alt="Add Client-Side Library dialog"></p>

<p>The library provider can be selected from the Provider list.</p>

<p>Typing in the Library text field will search the library provider and show a list of matching libraries.</p>

<p><img src="http://lastexitcode.com/images/blog/LibManSupportInVisualStudioMac8-1/AddClientSideLibraryDialogCompletion.png" title="Add Client-Side Library dialog completion list" alt="Add Client-Side Library dialog completion list"></p>

<p>Pressing tab or return will insert the selected library from the completion list into the Library text field.</p>

<p>You can then choose to include all the client-side library files or a selection of those files.</p>

<p><img src="http://lastexitcode.com/images/blog/LibManSupportInVisualStudioMac8-1/AddClientSideLibraryDialogSelectFiles.png" title="Add Client-Side Library dialog select files" alt="Add Client-Side Library dialog select files"></p>

<p>The Target Location indicates where the client-side library files will be installed.</p>

<p>Clicking the Install button will create a libman.json file and install the client-side library into your project.</p>

<p><img src="http://lastexitcode.com/images/blog/LibManSupportInVisualStudioMac8-1/LibManJQueryInstalledInProject.png" title="jQuery installed into project" alt="jQuery installed into project"></p>

<p>More detailed information about the client-side library installation is available by clicking the status bar or by selecting
View &ndash; Pads &ndash; Library Manager Output.</p>

<p><img src="http://lastexitcode.com/images/blog/LibManSupportInVisualStudioMac8-1/LibraryManagerOutputWindow.png" title="Library Manager Output window" alt="Library Manager Output window"></p>

<h2>Adding a libman.json file</h2>

<p>To add a libman.json file without using the Add Client-Side Library dialog, right click the ASP.NET project and select
Manage Client-Side Libraries.</p>

<p><img src="http://lastexitcode.com/images/blog/LibManSupportInVisualStudioMac8-1/ManageClientSideLibrariesMenu.png" title="Manage Client-Side Libraries menu" alt="Manage Client-Side Libraries menu"></p>

<p>This will create a libman.json file and open it in the text editor.</p>

<p><img src="http://lastexitcode.com/images/blog/LibManSupportInVisualStudioMac8-1/LibManFileInTextEditor.png" title="libman.json file in text editor" alt="libman.json file in text editor"></p>

<h2>Restoring Client-Side Libraries</h2>

<p>To restore the client-side libraries you can right click the libman.json file in the Solution window and
select Restore Client-Side Libraries.</p>

<p><img src="http://lastexitcode.com/images/blog/LibManSupportInVisualStudioMac8-1/RestoreClientSideLibraries.png" title="Restore Client-Side Libraries menu" alt="Restore Client-Side Libraries menu"></p>

<p>Information about the restore operation is available from the Library Manager Output window.</p>

<p>Alternatively saving the libman.json file in the text editor will run a restore.</p>

<p>Restore errors are displayed in the Errors window and in the libman.json file if it is open in the text editor.</p>

<p><img src="http://lastexitcode.com/images/blog/LibManSupportInVisualStudioMac8-1/LibManRestoreError.png" title="LibMan restore error" alt="LibMan restore error"></p>

<h2>Deleting Client-Side Libraries</h2>

<p>To remove the client-side libraries you can right click the libman.json file in the Solution window and
select Clean Client-Side Libraries.</p>

<p><img src="http://lastexitcode.com/images/blog/LibManSupportInVisualStudioMac8-1/CleanClientSideLibrariesMenu.png" title="Clean Client-Side Libraries menu" alt="Clean Client-Side Libraries menu"></p>

<p>This will delete the client-side libraries from the project.</p>

<h2>Library Manager Addin Installation</h2>

<p>The Library Manager addin is available from the Visual Studio for Mac extensions repository. To install the addin:</p>

<ul>
<li>From the main menu, open the Extensions Manager dialog.</li>
<li>Select the Gallery tab.</li>
<li>Expand IDE extensions.</li>
<li>Select the Library Manager addin</li>
<li>Click the Refresh button if the addin is not visible.</li>
<li>Click Install… to install the addin.</li>
<li>Restart Visual Studio for Mac.</li>
</ul>


<h2>Links</h2>

<ul>
<li><a href="https://github.com/mrward/LibraryManager">Library Manager for Visual Studio for Mac</a></li>
<li><a href="https://docs.microsoft.com/en-us/aspnet/core/client-side/libman/libman-vs">Use LibMan with ASP.NET Core in Visual Studio</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.1]]></title>
    <link href="http://lastexitcode.com/blog/2019/06/22/NuGetSupportInVisualStudioMac8-1/"/>
    <updated>2019-06-22T12:40:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2019/06/22/NuGetSupportInVisualStudioMac8-1</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 5.0 support</li>
<li> Fixed PackageReference metadata not added for development dependencies</li>
<li> Fixed DotNetCliToolReferences not being restored</li>
<li> Fixed Multiplatform Library build error with Android projects</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.1</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>NuGet 5.0 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-5.0-rtm">NuGet 5.0.2.5988</a> is now
included with Visual Studio for Mac 8.1.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed PackageReference metadata not added for development dependencies</strong></p>

<p>Installing a NuGet package that is a development dependency, such as
GitInfo, would not add the PrivateAssets nor the IncludeAssets
metadata to the PackageReference. This is now supported and mirrors the
behaviour of &lsquo;dotnet add package&rsquo; and Visual Studio on Windows.</p>

<p><strong>Fixed DotNetCliToolReferences not being restored</strong></p>

<p>DotNetCliToolReferences are available in the package dependency graph
but are treated as separate projects in this graph. Since these did not map
to an existing project in the solution they were not added to the full dependency
graph which resulted in these tools not being restored.</p>

<p>DotNetCliToolReferences are only restored when the entire solution is restored.
Restoring a single project only restores the project itself not
the dotnet cli tool project referenced by the project.</p>

<p>MSBuild supports restoring DotNetCliToolReferences in any project type that
uses PackageReferences so Visual Studio for Mac also supports this.</p>

<p><strong>Fixed Multiplatform Library build error with Android projects</strong></p>

<p>When generating a Portable Class Library (PCL) assembly from the intersection of project
assemblies the ApiIntersect build task would throw an exception since
it could not resolve the Mono.Android assembly. This problem has been
fixed in a more recent NuGet.Build.Packaging where the failure to
resolve has been converted to a warning.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>System.Exception: Could not resolve Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065
</span><span class='line'>    at ApiIntersect.FrameworkAssemblyResolver.Resolve (Mono.Cecil.AssemblyNameReference name, Mono.Cecil.ReaderParameters parameters) [0x0001b] in &lt;aac3e0d5bcd4473a96e385115da49b96&gt;:0
</span><span class='line'>    at ApiIntersect.FrameworkAssemblyResolver.Resolve (Mono.Cecil.AssemblyNameReference name) [0x00000] in &lt;aac3e0d5bcd4473a96e385115da49b96&gt;:0
</span><span class='line'>    at ICSharpCode.Decompiler.Ast.Transforms.IntroduceUsingDeclarations.Run (ICSharpCode.NRefactory.CSharp.AstNode compilationUnit) [0x00142] in &lt;37b5ad8a7a94479fbc5b574a8fc6281a&gt;:0
</span><span class='line'>    at ICSharpCode.Decompiler.Ast.Transforms.TransformationPipeline.RunTransformationsUntil (ICSharpCode.NRefactory.CSharp.AstNode node, System.Predicate`1[T] abortCondition, ICSharpCode.Decompiler.DecompilerContext context) [0x0002c] in &lt;37b5ad8a7a94479fbc5b574a8fc6281a&gt;:0
</span><span class='line'>    at ICSharpCode.Decompiler.Ast.AstBuilder.RunTransformations (System.Predicate`1[T] transformAbortCondition) [0x00000] in &lt;37b5ad8a7a94479fbc5b574a8fc6281a&gt;:0
</span><span class='line'>    at ICSharpCode.Decompiler.Ast.AstBuilder.RunTransformations () [0x00000] in &lt;37b5ad8a7a94479fbc5b574a8fc6281a&gt;:0
</span><span class='line'>    at ApiIntersect.MainClass.DumpTypes (System.Collections.Generic.List`1[T] types, System.String baseDir) [0x000a7] in &lt;aac3e0d5bcd4473a96e385115da49b96&gt;:0
</span><span class='line'>    at ApiIntersect.MainClass.Process (System.Collections.Generic.List`1[T] intersections, System.Collections.Generic.List`1[T] exclusions, Mono.Cecil.ReaderParameters readerParameters, System.String outputPath) [0x00319] in &lt;aac3e0d5bcd4473a96e385115da49b96&gt;:0
</span><span class='line'>    at ApiIntersect.MainClass.Main (System.String[] args) [0x0039f] in &lt;aac3e0d5bcd4473a96e385115da49b96&gt;:0</span></code></pre></td></tr></table></div></figure>


<p>An updated NuGet.Build.Packaging has not been published to nuget.org
so only new projects created with Visual Studio for Mac will get the
NuGet package containing the fix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet PowerShell Core Console in Visual Studio for Mac 8.0]]></title>
    <link href="http://lastexitcode.com/blog/2019/05/05/NuGetPowerShellCoreConsoleVisualStudioForMac8-0/"/>
    <updated>2019-05-05T12:40:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2019/05/05/NuGetPowerShellCoreConsoleVisualStudioForMac8-0</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/mrward/monodevelop-nuget-extensions">NuGet extensions addin</a> now includes a PowerShell
Core based NuGet Package Manager console for Visual Studio for Mac 8.0.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/NuGetPackageManagerConsoleWindow.png" title="NuGet Package Manager Console" alt="NuGet Package Manager Console window"></p>

<p>A <a href="https://lastexitcode.com/blog/2014/06/22/NuGetPowerShellConsoleForXamarinStudio/">NuGet PowerShell console</a> has been available with
the <a href="https://github.com/mrward/monodevelop-nuget-extensions">NuGet extensions addin</a> since
Xamarin Studio 5.0. Previously it used <a href="https://github.com/Pash-Project/Pash">Pash</a>, a cross-platform, open source reimplementation
of PowerShell. Pash is no longer being actively developer on after Microsoft released <a href="https://github.com/PowerShell/PowerShell">PowerShell Core</a>.
The PowerShell support in Pash was incomplete, so whilst the NuGet commands, such as Install-Package, were supported, more
complicated commands, such as those provided by <a href="https://docs.microsoft.com/en-us/ef/core/">Entity Framework Core</a>, were not supported.
Moving to PowerShell Core provides full PowerShell support, and with a partial implementation of the Visual Studio EnvDTE API,
<a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/powershell">Entity Framework Core commands</a> are now supported.</p>

<p>The NuGet extensions addin runs a .NET Core console
application that hosts PowerShell Core. Communication between
the addin running in Visual Studio for Mac and the console application is through the
<a href="https://github.com/Microsoft/vs-streamjsonrpc">StreamJsonRpc</a> library.</p>

<h2>New Features</h2>

<p>The following lists the new features compared with the Pash based PowerShell console.</p>

<ul>
<li>PowerShell Core based NuGet Package Manager Console

<ul>
<li>Full PowerShell support</li>
<li>Get-Help now supported</li>
</ul>
</li>
<li>Support for Entity Framework Core NuGet commands</li>
<li>Tab completion</li>
<li>Support for stopping the executing command</li>
<li>Opening the NuGet package source configuration page from the console</li>
</ul>


<h2>Limitations</h2>

<ul>
<li><strong>Visual Studio EnvDTE API implementation is incomplete</strong></li>
</ul>


<p> The Visual Studio EnvDTE API is partially implemented. Whilst Entity Framework Core is
 supported other PowerShell scripts included with NuGet packages may not work.</p>

<ul>
<li><p><strong>Password protected NuGet package sources not supported in the following PowerShell commands:</strong></p>

<ul>
<li>Find-Package</li>
<li>Get-Package</li>
</ul>
</li>
</ul>


<p>Note that the other NuGet PowerShell commands are supported.</p>

<p>The NuGet extensions addin will not send usernames and passwords to the PowerShell Core
host console application. .NET Core also does not support decrypting passwords stored in the
NuGet.Config file.</p>

<p>The Find-Package and Get-Package commands all run completely within PowerShell hosted in the .NET Core
console application.</p>

<p>The other commands work since they run partially within Visual for Mac where actions involving password protected
NuGet package sources are supported.</p>

<ul>
<li><strong>Requires .NET Core 2.1 SDK to be installed</strong></li>
</ul>


<h2>Opening the NuGet Package Manager Console window</h2>

<p>From the View menu, select Pads, then select NuGet Package Manager Console.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/ViewPadsNuGetPackageManagerConsoleMenu.png" title="View - Pages - NuGet Package Manager Console menu" alt="View - Pages - NuGet Package Manager Console menu"></p>

<h2> Entity Framework Core Support</h2>

<p>The PowerShell commands provided by the
<a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/powershell">Microsoft.EntityFrameworkCore.Tools NuGet package</a>
are supported in .NET Core projects.</p>

<ul>
<li>Add-Migration</li>
<li>Drop-Database</li>
<li>Get-DbContext</li>
<li>Remove-Migration</li>
<li>Scaffold-DbContext</li>
<li>Script-Migration</li>
<li>Update-Database</li>
</ul>


<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/EntityFrameworkCoreMigrationPowerShellCommands.png" title="Package Manager Console - Entity Framework Core Add-Migration and Update-Database commands" alt="Package Manager Console - Entity Framework Core Add-Migration and Update-Database commands"></p>

<p>Note that the Entity Framework Core commands are not currently supported in projects that target the .NET Framework. This
is because the PowerShell commands attempt to directly run ef.exe that is included in the NuGet package instead of using the .NET Core ef.dll
which is used with projects that target .NET Core.</p>

<h2>Tab Completion</h2>

<p>Pressing tab in the console window will try to auto-complete the command being typed in.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/TabCompletionNewtonsoftJson.png" title="Tab completion - Install-Package Newtonsoft.Json" alt="Tab completion - Install-Package Newtonsoft.Json"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/TabCompletionPackageVersion.png" title="Tab completion - Install-Package Newtonsoft.Json -Version" alt="Tab completion - Install-Package Newtonsoft.Json -Version"></p>

<p>If there is only one match on pressing tab then the text will be inserted.</p>

<p>If there are multiple possible matches then a window will be displayed allowing an
item to be selected by pressing Tab, Enter or Return. Typing with this completion list
window open will filter the items in the list.</p>

<h2>Stopping the PowerShell command being run</h2>

<p>When a PowerShell command is being run the Stop button is enabled. The Stop button is the last button on the top right of the NuGet
Package Console window.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/PackageManagerConsoleStopButton.png" title="Package Manager Console stop button" alt="Package Manager Console stop button"></p>

<p>Clicking this button will attempt to stop the PowerShell command being run.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/PackageManagerConsolePipelineStopped.png" title="Package Manager Console pipeline stopped" alt="Package Manager Console pipeline stopped"></p>

<h2>Opening the NuGet Package Console configuration page</h2>

<p>At the top of the NuGet Package Console window there is a cog icon after the list of package sources.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/PackageManagerConsoleCogIcon.png" title="Package Manager Console configure sources - cog icon" alt="Package Manager Console configure sources cog icon"></p>

<p>Clicking this cog icon will open the NuGet Package Sources configuration
page which is also available from Preferences &ndash; NuGet &ndash; Sources.</p>

<h2>Installation</h2>

<p>The NuGet extensions addin is available from the Visual Studio for Mac extensions repository. To install the addin:</p>

<ul>
<li>From the main menu, open the Extensions Manager dialog.</li>
<li>Select the Gallery tab.</li>
<li>Expand IDE extensions.</li>
<li>Select NuGet Package Management Extensions 0.18 or later.</li>
<li>Click the Refresh button if the addin is not visible.</li>
<li>Click Install… to install the addin.</li>
<li>Restart Visual Studio for Mac.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.0]]></title>
    <link href="http://lastexitcode.com/blog/2019/04/20/NuGetSupportInVisualStudioMac8-0/"/>
    <updated>2019-04-20T12:40:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2019/04/20/NuGetSupportInVisualStudioMac8-0</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Fixed build action not available after installing package into a PackageReference project</li>
<li> Fixed NuGet extension api install events not raised for PackageReference projects</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.0</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed build action not available on installing package into a PackageReference project</strong></p>

<p>After installing the Xamarin.GooglePlayServices.Basement NuGet package, into a project
that used PackageReferences, the GoogleServicesJson build action, defined by this NuGet package,
was not available in the list of build actions when you right clicked a file in the
Solution window. The build action was available after the solution was closed and re-opened.</p>

<p>Installing a NuGet package into a project that used PackageReferences
would not re-evaluate the project&rsquo;s MSBuild information. This resulted in any custom
<a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/visual-studio-integration-msbuild?view=vs-2019#additional-build-actions">AvailableItemNames</a>
not being available to be used as a build action
in the Solution window. The build actions for a project were cached so these
are now cleared to ensure the latest items are available
after an re-evaluation.</p>

<p><strong>Fixed NuGet extension api install events not raised for PackageReference projects</strong></p>

<p>The NuGet extension API has a PackageReferenceAdded event and a
PackageReferenceRemoved. These were being raised if a project had
a packages.config file but not if the project used PackageReferences.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.8]]></title>
    <link href="http://lastexitcode.com/blog/2019/03/02/NuGetSupportInVisualStudioMac7-8/"/>
    <updated>2019-03-02T12:40:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2019/03/02/NuGetSupportInVisualStudioMac7-8</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet package diagnostics displayed in Solution window</li>
<li> Support restoring multi-target framework projects</li>
<li> Display summary of NuGet restore errors in Package Console</li>
<li> Fixed wrong version of Microsoft.AspNetCore.App being restored</li>
<li> Fixed Paket restore not working with SDK style projects</li>
<li> Fixed NuGet restore ignoring build targets</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.8</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#whats-new-in-78">release notes</a>.</p>

<h2>NuGet package diagnostics displayed in Solution window</h2>

<p>NuGet package diagnostic warnings are now shown in the Solution window.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac7-8/NuGetPackageDiagnosticWarningInSolutionWindow.png" title="NuGet package diagnostic warnings in Solution Window" alt="NuGet package diagnostic warnings in Solution Window"></p>

<p>The diagnostic warnings are shown underneath the NuGet package with
a warning icon. Hovering over the warning icon will show a tooltip.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac7-8/NuGetPackageDiagnosticWarningTooltip.png" title="NuGet package diagnostic warning tooltip in Solution Window" alt="NuGet package diagnostic warning tooltip in Solution Window"></p>

<h2>Support restoring multi-target framework projects</h2>

<p>Projects that have multiple target frameworks now have all frameworks restored.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac7-8/MultiTargetProjectInSolutionWindow.png" title="Multi-target framework project restored in Solution window" alt="Multi-target framework project restored in Solution window"></p>

<p>Previously only the first target framework would be restored.</p>

<p>Conditional PackageReferences defined in the project file are also now
respected when restoring the project. Previously the conditions on the
PackageReferences would be ignored.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac7-8/ConditionalPackageReferences.png" title="Conditional PackageReferences restored in Solution window" alt="Conditional PackageReferences restored in Solution window"></p>

<p>Visual Studio for Mac now uses the GenerateRestoreGraphFile MSBuild target to determine
package dependencies. Previously this information was obtained from the project information
held in memory. This fixes several NuGet restore bugs in Visual Studio for Mac.</p>

<h2>Display summary of NuGet restore errors in Package Console</h2>

<p>Creating an xUnit .NET Core test project named &lsquo;xunit&rsquo; fails to
restore since there is a package reference cycle between the project
and the xunit NuGet package. Whilst this reference cycle is reported it is
hidden in the Package Console output and all you would see was a message
indicating that the restore had failed. Now the error information is
shown at the end of the
Package Console as a summary of the failures to make it easier to
see the problem.</p>

<p>Now for the xunit project you will see the following
at the end of the Package Console output:</p>

<pre><code>Cycle detected.
  xunit -&gt; xunit (&gt;= 2.3.1).
Restore failed.
</code></pre>

<h2>Bug Fixes</h2>

<p><strong>Fixed wrong version of Microsoft.AspNetCore.App being restored</strong></p>

<p>With an ASP.NET Core 2.1 project, that had included a PackageReference for
Microsoft.AspNetCore.App version 2.1.5, Visual Studio for Mac would incorrectly restore
Microsoft.AspNetCore.App version 2.1.1.</p>

<p>Using the GenerateRestoreGraphFile MSBuild target to determine package reference
information when restoring has fixed this problem.</p>

<p><strong>Fixed Paket restore not working with SDK style projects</strong></p>

<p>When Paket is used with an SDK style project it injects PackageReferences
via the PaketRestore target from the Paket.Restore.targets file. Visual Studio for
Mac was not using MSBuild to get the package reference information so
PackageReferences defined by Paket were not being restored or made available.</p>

<p><strong>Fixed NuGet restore ignoring build targets</strong></p>

<p>OrchardCore would fail to restore when opened in Visual Studio for Mac. OrchardCore
defines the PackageReference versions in a separate MSBuild .props file and has a custom
MSBuild target to define these versions. This custom MSBuild target is now supported
since Visual Studio for Mac uses the GenerateRestoreGraphFile MSBuild target to
determine package references when restoring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Task Runner Explorer in Visual Studio for Mac]]></title>
    <link href="http://lastexitcode.com/blog/2019/01/04/TaskRunnerExplorerInVisualStudioMac/"/>
    <updated>2019-01-04T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2019/01/04/TaskRunnerExplorerInVisualStudioMac</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/mrward/monodevelop-language-server-addin">Task Runner Explorer addin</a> provides a
Task Runner Explorer
window, similar to the one in Visual Studio on Windows, which can be used to run tasks with
Cake, Gulp, Grunt, NPM and TypeScript.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerWindowGruntNpmTasks.png" title="Task Runner Explorer window" alt="Task Runner Explorer Window"></p>

<h2>Features</h2>

<ul>
<li>Task Runner Explorer Window

<ul>
<li>View tasks</li>
<li>Run tasks</li>
<li>View task output</li>
<li>Run and cancel long running tasks, such as tcs watch</li>
<li>Configure tasks to run when specific IDE events occur

<ul>
<li>Before Build</li>
<li>After Build</li>
<li>Clean</li>
<li>Project Opened</li>
<li>Solution Opened</li>
</ul>
</li>
</ul>
</li>
<li>Task Runners

<ul>
<li>Cake</li>
<li>Gulp</li>
<li>Grunt</li>
<li>NPM</li>
<li>TypeScript</li>
</ul>
</li>
</ul>


<h2>Supports</h2>

<ul>
<li>Visual Studio Mac 7.5 or later.</li>
</ul>


<h2>Task Runner Explorer</h2>

<p>To open the Task Runner Explorer window, from the View menu select Pads, then
select Task Runner Explorer.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/ViewTaskRunnerExplorerMenu.png" title="View Task Runner Explorer menu" alt="View Task Runner Explorer menu"></p>

<p>The Task Runner Explorer will look for files supported by a task runner in the
solution directory and the project directory. It will also look at all files
that have been added to a project or that have been added to a solution folder.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerTypeScriptNpmTasks.png" title="Task Runner Explorer TypeScript and NPM tasks" alt="Task Runner Explorer TypeScript and NPM tasks"></p>

<p>The top left of the Task Runner Explorer shows a list of projects
or the solution that have tasks available. This can be used to filter the tasks shown in the
Task Runner Explorer window.</p>

<p>Currently changes made to tasks will not be detected automatically. To refresh
the task information you can click the Refresh button
available at the top left of the Task Runner Explorer window.</p>

<h3>Running a Task</h3>

<p>To run a task you can double click it or right click and select Run.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerRunMenu.png" title="Task Runner Explorer Run menu" alt="Task Runner Explorer Run menu"></p>

<p>Output from the task is shown on the right hand side of the Task Runner Explorer
window.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerNpmUpdateRunning.png" title="NPM update running" alt="NPM update running"></p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/NpmUpdateRunCompleted.png" title="NPM update completed" alt="NPM update completed"></p>

<p>A long running task, such as tcs watch, will run until the solution is closed,
or the Stop button, available on the right hand side
of the Task Runner Explorer window, is clicked.</p>

<h3>Binding Tasks to IDE Events</h3>

<p>Tasks can be configured to run when the following IDE events occur:</p>

<ul>
<li>After Build</li>
<li>Before Build</li>
<li>Clean</li>
<li>Project or Solution Opened</li>
</ul>


<p>If the task runner file is in a project directory then the build and clean
events are associated with the project. If the task runner file is in a solution directory
then the build events are associated with the solution.</p>

<p>To configure a task, right click it, select Bindings and then select the
event.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerBindingsMenu.png" title="Task Runner Explorer Bindings menu" alt="Task Runner Explorer Bindings menu"></p>

<p>The binding will be displayed in the Bindings tab and will also be shown as
checked when the context menu for the task is opened.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerBeforeBuildBindingAdded.png" title="Task Runner Explorer Before Build binding added" alt="Task Runner Explorer Before Build binding added"></p>

<p>To remove the binding you can right click the task, select Bindings and
select the event again to uncheck it. Alternatively you can right click
it in the Bindings tab and select Remove.</p>

<p>The order in which the tasks are run for a particular IDE event can be changed
by right clicking the binding in the Bindings tab and selecting Move Up or Move Down.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerBindingsMoveDownMenu.png" title="Task Runner Explorer binding Move Up and Down menus" alt="Task Runner Explorer binding Move Up and Down menus"></p>

<p>The binding information is typically saved in a file in the same directory as the corresponding task
runner file, however this depends on how the task runner is implemented.</p>

<h3>Disabling Automatic Running of Tasks</h3>

<p>In preferences there is a Task Runner Explorer section which shows
a check box that can be used to enable or disable the automatic
running of tasks on opening a project or solution, and when building or cleaning.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerPreferences.png" title="Preferences - Automatically run tasks option" alt="Preferences - Automatically run tasks option"></p>

<h2>Cake Task Runner</h2>

<p>The Cake task runner supports running tasks defined in a build.cake file.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/CakeTaskRunner.png" title="Cake Task Runner" alt="Cake Task Runner"></p>

<p>This is based on the <a href="https://github.com/cake-build/cake-vs">Cake Task Runner for Visual Studio</a>.</p>

<h2>Gulp Task Runner</h2>

<p>The Gulp task runner supports running tasks defined in a gulpfile.js file.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/GulpTaskRunner.png" title="Gulp Task Runner" alt="Gulp Task Runner"></p>

<p><a href="https://gulpjs.com">Gulp</a> needs to be installed separately.</p>

<h2>Grunt Task Runner</h2>

<p>The Grunt task runner supports running tasks defined in a Gruntfile.js file.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/GruntTaskRunner.png" title="Grunt Task Runner" alt="Grunt Task Runner"></p>

<p><a href="https://gruntjs.com">Grunt</a> needs to be installed separately.</p>

<h2>NPM Task Runner</h2>

<p>The NPM task runner supports running tasks defined in a package.json file.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/NpmTaskRunner.png" title="NPM task runner" alt="NPM task runner"></p>

<p>The NPM task runner is a port of <a href="https://madskristensen.net/">Mads Kristensen&rsquo;s</a>
<a href="https://github.com/madskristensen/NpmTaskRunner">NPM Task Runner</a>.</p>

<p>The NPM task runner supports running with the verbose NPM option defined. If a
task is selected then a button will be displayed on the left hand side of the
Task Runner Explorer window. If this is selected then npm will be passed the
<code>-d</code> argument when it is run.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/NpmTaskRunnerVerboseButton.png" title="NPM task runner Verbose button" alt="NPM task runner Verbose button"></p>

<p>NPM needs to be installed separately.</p>

<h2>TypeScript Task Runner</h2>

<p>The TypeScript task runner supports running tcs build and tcs watch if a tsconfig.json file
is found.</p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/TypeScriptTaskRunner.png" title="TypeScript task runner" alt="TypeScript task runner"></p>

<p><img src="http://lastexitcode.com/images/blog/TaskRunnerExplorerInVisualStudioMac/TypeScriptWatchTaskOutput.png" title="TypeScript tcs watch output" alt="TypeScript tcs watch output"></p>

<p>The TypeScript task runner will try to use tsc that is distributed with the Web Tools extension that
is included in Visual Studio for Mac. If the Web Tools extension is not installed then the task
runner will fall back to running tsc directly.</p>

<h2>Installation</h2>

<p>There are two addins to be installed:</p>

<ul>
<li><a href="https://github.com/mrward/monodevelop-task-runner-addin/releases/download/0.1/MonoDevelop.TaskRunner_0.1.mpack">Task Runner</a></li>
<li><a href="https://github.com/mrward/monodevelop-task-runner-addin/releases/download/0.1/MonoDevelop.TaskRunnersBundle_0.1.mpack">Task Runners Bundle</a></li>
</ul>


<p>The Task Runner is the main addin. This will be used by other task runner addins and provides the
main task runner API and services.</p>

<p>The Task Runners Bundle addin contains the Cake, Gulp, Grunt, NPM and TypeScript task runners. These
are currently included together as a single addin instead of being distributed separately.</p>

<p>Download both of the above .mpack files. Install the Task Runner addin first since the Task Runners Bundle
addin depends on it. To install an addin&rsquo;s .mpack file, open the Extensions Manager
by selecting Extensions&hellip; from the main menu. Click the Install from file button. Select the .mpack file
and then click the Open button. After installing both the addins restart Visual Studio for Mac.</p>

<p>These addins are not currently available from the main Visual Studio for Mac extensions server.</p>

<h2>Source Code</h2>

<ul>
<li><a href="https://github.com/mrward/monodevelop-language-server-addin">Task Runner Explorer for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/monodevelop-cake-task-runner">Cake Task Runner for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/monodevelop-grunt-task-runner">Grunt Task Runner for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/monodevelop-gulp-task-runner">Gulp Task Runner for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/NpmTaskRunner">NPM Task Runner for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/monodevelop-typescript-task-runner">TypeScript Task Runner for Visual Studio for Mac</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.7]]></title>
    <link href="http://lastexitcode.com/blog/2018/12/19/NuGetSupportInVisualStudioMac7-7/"/>
    <updated>2018-12-19T14:40:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2018/12/19/NuGetSupportInVisualStudioMac7-7</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 4.8 support</li>
<li> Support PackageReferences without a Version</li>
<li> Fixed NuGet sdk resolver not being found in Mono 5.16</li>
<li> Fixed null reference exception in package compatiblity check</li>
<li> Fixed Update menu enabled when project has no PackageReferences</li>
<li> Fixed updating a NuGet package changing a reference&rsquo;s ItemGroup</li>
<li> Fixed updating a NuGet package changing a fully qualified reference hint path to a relative path</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.7</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#whats-new-in-77">release notes</a>.</p>

<h2>NuGet 4.8 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.8-rtm">NuGet 4.8.0.5385</a> is now
included with Visual Studio for Mac 7.7.2.</p>

<h2>Support PackageReferences without a Version</h2>

<p>Visual Studio for Mac did not support projects that used PackageReferences without
specifying a version.</p>

<pre><code>&lt;ItemGroup&gt;
    &lt;PackageReference Include="Newtonsoft.Json" /&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>The version may be defined elsewhere in another MSBuild file, such as the Directory.props file,
or by the .NET Core SDK, as with the
Microsoft.AspNetCore.App PackageReference in ASP.NET Core projects. By default a
PackageReference without a version will restore the lowest available version for
the NuGet package.</p>

<p>However in Visual Studio for Mac there were several problems with PackageReferences that
did not specify a version.</p>

<p>Opening a project with a PackageReference without a Version
would result in an ArgumentNullException being logged and the
Add Packages dialog could not be opened.</p>

<p>If the PackageReference, in a non-SDK project, had no Version
then it was not displayed in the Packages folder and a null reference
exception was logged. The Solution window would try to find
the package to check if it was installed which is not possible
with a missing version and NuGet&rsquo;s VersionFolderPathResolver
would throw a null reference exception.</p>

<p>If a PackageReference had no Version then a null reference exception
was logged when checking for updates. A null version is now handled.</p>

<p>Right clicking the package in the Packages folder would log a
null reference exception if a non-SDK style project was used and it
had a PackageReference without a version. This is now handled and the
menu label will show &ldquo;Version None&rdquo;.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed NuGet sdk resolver not being found in Mono 5.16</strong></p>

<p>More recent versions of MSBuild, such as MSBuild 16.0.40 which is included
with Mono 5.16.0.173, allow the sdk resolver to use a manifest.xml file to
define the assembly where the resolver can be found:</p>

<pre><code>&lt;SdkResolver&gt;
  &lt;Path&gt;..\..\Microsoft.Build.NuGetSdkResolver.dll&lt;/Path&gt;
&lt;/SdkResolver&gt;
</code></pre>

<p>This manifest file not supported and resulted in the NuGet sdk resolver not
being loaded. Any projects that use an MSBuild sdk from a NuGet
package no longer worked and would result in an &lsquo;Invalid configuration
mapping&rsquo; error shown in the Solution window. The sdk resolution in
Visual Studio for Mac has now
been updated based on the latest MSBuild source code.</p>

<p><strong>Fixed null reference exception in compatiblity check</strong></p>

<p>Changing the target framework of a project that uses a packages.config
file will result in a package compatiblity check being run.
If the project had both a PackageReference and a packages.config file
the package compatiblity check would fail with a null
reference exception. Visual Studio for Mac was treating the project as
though it was using a packages.config file, when it should have been
treated as a PackageReference project. This resulted in a null
reference exception being thrown when checking for package compatiblity.</p>

<p><strong>Fixed Update menu enabled when project has no PackageReferences</strong></p>

<p>The Update menu was enabled if the project used PackageReferences but
had none in the project. Without any PackageReferences in the
project there is no packages to update. The check to determine if the Update
menu should be enabled has been changed to make sure the project has
PackageReferences in the project file, not just imported
PackageReferences. The Update
NuGet Packages menu, which is used to update packages for the solution,
has also been changed to have the same behaviour.</p>

<p><strong>Fixed updating a NuGet package changing a reference&rsquo;s ItemGroup</strong></p>

<p>On updating a NuGet package the Reference item will now be modified in
place in the project file.</p>

<p>On updating a NuGet package in a project that used a packages.config
the old NuGet package is uninstalled and the new one is installed.
This removes the old references and adds new references. If the
references are in an ItemGroup with a condition then the new
reference may be added into a different ItemGroup if there are other
ItemGroups with references. To prevent this from happening the
changes to made to references are cached and not applied to the
project until all the NuGet actions have all been run. This allows
a NuGet package update which would remove a reference and then
add a new reference to be
converted into an update of the original Reference in the project,
changing just its HintPath, so its
location in the project file is not changed.</p>

<p>This was fixed in Visual Studio for Mac 7.7.3.</p>

<p><strong>Fixed updating a NuGet package changing a fully qualified reference hint path to a relative path</strong></p>

<p>Updating a NuGet package, where the project, which uses a packages.config file,
had been modified so the
original reference had a fully qualified hint path, would result in
a relative path used for the hint path when the reference was updated.</p>

<p>Now if the original hint path was full path then if the hint
path for the reference is changed it is saved using a full
path. This is different behaviour to how Visual Studio on Windows works, which
will always add a relative hint path for the reference.</p>

<p>This was fixed in Visual Studio for Mac 7.7.3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proxy Testing a Mac Application with Apache]]></title>
    <link href="http://lastexitcode.com/blog/2018/10/28/ProxyTestingMacApplicationWithApache/"/>
    <updated>2018-10-28T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2018/10/28/ProxyTestingMacApplicationWithApache</id>
    <content type="html"><![CDATA[<p>Here we look at using <a href="http://httpd.apache.org/">Apache</a> as
a proxy server in order to test that a Mac client application, such as Safari or Visual Studio for Mac, can make web
requests through a proxy. Enabling Basic and NTLM proxy authentication with Apache will be covered, as well as using
the Apache as a proxy without any authentication.</p>

<p>Apache will run on a separate Windows machine. Using a separate machine
allows us to check that the Mac client application is not bypassing the proxy and making direct
web requests to any server. This check can be done by configuring the local firewall to block all direct
connections out from the Mac machine but allow connections from the machine running Apache.</p>

<ul>
<li>Mac High Sierra 10.13</li>
<li><a href="https://www.apachehaus.com/cgi-bin/download.plx">Apache 2.4.35 on Windows</a></li>
</ul>


<h2>Apache Proxy &ndash; No authentication</h2>

<p>Unzip Apache and extract the files to c:\Apache24\ which is the default ServerRoot configured in the conf\httpd.conf
file.</p>

<pre><code>Define SRVROOT "/Apache24"
</code></pre>

<p>In the httpd.config file configure the port to be used by the Apache server if required.
By default port 80 is used. Here we will be using port 8888.</p>

<pre><code>Listen 8888
ServerName localhost:8888
</code></pre>

<p><a href="https://httpd.apache.org/docs/2.4/mod/mod_proxy.html">mod_proxy</a>,
<a href="https://httpd.apache.org/docs/2.4/mod/mod_proxy_connect.html">mod_proxy_connect</a> and
<a href="https://httpd.apache.org/docs/2.4/mod/mod_proxy_http.html">mod_proxy_http</a> should be loaded.
Edit the http.conf file and ensure these modules are loaded.</p>

<pre><code>LoadModule proxy_module modules/mod_proxy.so
LoadModule proxy_connect_module modules/mod_proxy_connect.so
LoadModule proxy_http_module modules/mod_proxy_http.so
</code></pre>

<p>Add a VirtualHost and Proxy section to the httpd.conf file.</p>

<pre><code>&lt;VirtualHost *&gt;
     ProxyRequests On

    &lt;Proxy *&gt;
        Require all granted
    &lt;/Proxy&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>To run Apache, open a command prompt, change into the Apache24\bin directory, then run httpd.exe</p>

<pre><code>cd c:\Apache24\bin
httpd.exe
</code></pre>

<p>On running Apache for the first time you will see a Windows Firewall dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithApache/FirewallAlertApache.png" title="Windows Firewall alert for Apache" alt="Windows Firewall alert for Apache"></p>

<p>Allow Apache to access both the private and public networks.</p>

<p>Configuring the Mac to use Apache as its proxy server can be done by opening System Preferences &ndash; Network.
For the active network select the Advanced button and open the Proxies tab. Enter the machine IP address
where Apache is running and its port into the Web Proxy (HTTP) and Secure Web Proxy (HTTPS) sections, and ensure both
of these are checked.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithApache/MacNetworkWebProxySettings.png" title="Mac web proxy settings" alt="Mac web proxy settings"></p>

<p>Finally click OK and Apply to enable the proxy settings.</p>

<p>Now http and https requests should be sent through Apache. A simple way to test this is
to open Safari and view a web page. In the C:\Apache24\logs\access.log file you should see entries for the
sites accessed.</p>

<pre><code>192.168.1.100 - - [28/Oct/2018:12:18:47 +0000] "GET http://neverssl.com/ HTTP/1.1" 200 1183
192.168.1.100 - - [28/Oct/2018:12:18:47 +0000] "GET http://neverssl.com/favicon.ico HTTP/1.1" 200 124
192.168.1.100 - - [28/Oct/2018:12:18:41 +0000] "CONNECT www.nuget.org:443 HTTP/1.1" 200 -
</code></pre>

<h2>Apache Proxy &ndash; Basic authentication</h2>

<p>To enable Basic authentication change the Proxy section in the httpd.conf file as shown below.</p>

<pre><code>&lt;VirtualHost *&gt;
     ProxyRequests On

    &lt;Proxy *&gt;
        AuthType Basic
        AuthName "Authentication required"
        AuthBasicProvider file
        AuthUserFile proxy-password.file
        Require valid-user
    &lt;/Proxy&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>Here we will be using <a href="https://httpd.apache.org/docs/2.4/programs/htpasswd.html">htpasswd.exe</a> to create a file to
store the username and password required to authenticate against
the proxy server. htpasswd.exe is in the Apache bin directory. Run the following to generate the proxy-password.file,
replacing user with the username to be used with the proxy.</p>

<pre><code>htpasswd.exe -c proxy-password.file user
</code></pre>

<p>Enter the password when prompted.</p>

<p>Copy the proxy-password.file to the Apache server&rsquo;s root directory c:\Apache24</p>

<p>To make it easier to see the basic auth header being sent you may want to enable
<a href="https://httpd.apache.org/docs/2.4/mod/mod_log_forensic.html">forensic logging</a> in Apache.
To do this add a LoadModule to the httpd.conf file.</p>

<pre><code>LoadModule log_forensic_module modules/mod_log_forensic.so
</code></pre>

<p>Define the path to the forensic log file using an IfModule.</p>

<pre><code>&lt;IfModule log_forensic_module&gt; 
    ForensicLog "logs/forensic.log"
&lt;/IfModule&gt; 
</code></pre>

<p>Run httpd.exe from the Apache24\bin directory.</p>

<p>When connecting through the proxy
for the first time the Mac will show a dialog asking for credentials.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithApache/ProxyAuthenticationRequiredDialog.png" title="Mac proxy authentication required dialog" alt="Mac proxy authentication required dialog"></p>

<p>Clicking the System Preferences button will show open a dialog where you can enter the credentials for the proxy.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithApache/ProxyCredentialsDialog.png" title="Mac proxy authentcation required - credentials dialog" alt="Mac proxy authentication required - credentials dialog"></p>

<p>Entering the credentials will result in the Mac&rsquo;s key chain being updated with the credentials associated with the proxy&rsquo;s address.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithApache/ProxyCredentialsMacKeyChain.png" title="Proxy credentials stored in Mac key chain" alt="Proxy credentials stored in Mac key chain"></p>

<p>If you open the Mac&rsquo;s Network settings you will see the Web Proxy and Secure Web Proxy settings now have a username and password
associated with them.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithApache/MacNetworkSettingsProxyUserNamePassword.png" title="Username and password associated with proxy in network settings" alt="Username and password associated with proxy in network settings"></p>

<p>In the Apache access.log you should see the requests being made and a Proxy authentication 407 status code.</p>

<pre><code>192.168.1.100 - - [28/Oct/2018:12:44:47 +0000] "CONNECT www.nuget.org:443 HTTP/1.1" 407 415
192.168.1.100 - - [28/Oct/2018:12:44:53 +0000] "GET http://neverssl.com/ HTTP/1.1" 407 415
</code></pre>

<p>In the forensic.log file you should see the basic proxy authorization header being used by the Mac.</p>

<pre><code>GET http%3a//neverssl.com/ HTTP/1.1|Host:neverssl.com|Connection:keep-alive|Proxy-Connection:keep-alive|Upgrade-Insecure-Requests:1|Proxy-Authorization:Basic MTox|Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8|User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Safari/605.1.15|Accept-Language:en-gb|DNT:1|Accept-Encoding:gzip, deflate
CONNECT www.nuget.org%3a443 HTTP/1.1|Host:www.nuget.org%3a443|User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Safari/605.1.15|Connection:keep-alive|Proxy-Authorization:Basic MTox|Proxy-Connection:keep-alive
</code></pre>

<h2>Apache Proxy &ndash; NTLM authentication</h2>

<p>In order to enable NTLM authentication the <a href="https://github.com/TQsoft-GmbH/mod_authn_ntlm">NTLM authentication module</a> needs to be downloaded.
Download <a href="https://www.apachehaus.com/cgi-bin/download.plx">Mod Auth NTLM for Apache 2.4.x x64 &ndash; mod_authn_ntml.zip</a>,
extract the files and copy the mod_auth_ntlm.so file to the Apache24\modules directory.</p>

<p>Add a LoadModule to the httpd.conf file for the mod_authn_ntlm.so file.</p>

<pre><code>LoadModule auth_ntlm_module modules/mod_authn_ntlm.so
</code></pre>

<p>Change the VirtualHost Proxy section as shown below:</p>

<pre><code>&lt;VirtualHost *&gt;
    ProxyRequests On

    &lt;Proxy *&gt;
        AuthType SSPI
        AuthName "Auth required"
        NTLMAuth On
        NTLMAuthoritative On

        &lt;RequireAll&gt;
            &lt;RequireAny&gt;
                Require valid-user
            &lt;/RequireAny&gt;

            &lt;RequireNone&gt;
                Require user "ANONYMOUS LOGON"
                Require user "NT AUTHORITY\ANONYMOUS LOGON"
            &lt;/RequireNone&gt;
        &lt;/RequireAll&gt;
    &lt;/Proxy&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>The username and password used to authenticate against the proxy needs to match an account on the Windows machine.
As with basic authentication, the Mac will prompt for credentials if they do not match
what is stored in the key chain for the proxy.</p>

<p>Run httpd.exe and then use Safari to open a web site to check web requests are being sent through the proxy.
You should see the Windows account being used to authenticate in Apache&rsquo;s access.log.</p>

<pre><code>192.168.1.100 - - [28/Oct/2018:13:09:19 +0000] "GET http://neverssl.com/ HTTP/1.1" 407 415
192.168.1.100 - windows\\useraccount [28/Oct/2018:13:09:19 +0000] "GET http://neverssl.com/ HTTP/1.1" 304 -
192.168.1.100 - - [28/Oct/2018:13:09:38 +0000] "CONNECT www.nuget.org:443 HTTP/1.1" 407 415
192.168.1.100 - windows\\useraccount [28/Oct/2018:13:09:12 +0000] "CONNECT www.nuget.org:443 HTTP/1.1" 200 -
</code></pre>

<p>The forensic log should show that the NTLM header is being used by the Mac.</p>

<pre><code>CONNECT www.nuget.org%3a443 HTTP/1.1|Host:www.nuget.org%3a443|User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Safari/605.1.15|Connection:keep-alive|Proxy-Authorization:NTLM T...|Proxy-Connection:keep-alive
GET http%3a//neverssl.com/ HTTP/1.1|Host:neverssl.com|Proxy-Connection:keep-alive|Proxy-Authorization:NTLM T...|If-Modified-Since:Thu, 14 Jun 2018 00%3a16%3a40 GMT|Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8|Accept-Language:en-gb|Accept-Encoding:gzip, deflate|Content-Length:0|User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/12.0 Safari/605.1.15|Connection:keep-alive|Upgrade-Insecure-Requests:1|DNT:1
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Proxy Testing a Mac Application with Fiddler]]></title>
    <link href="http://lastexitcode.com/blog/2018/10/21/ProxyTestingMacApplicationWithFiddler/"/>
    <updated>2018-10-21T12:38:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2018/10/21/ProxyTestingMacApplicationWithFiddler</id>
    <content type="html"><![CDATA[<p>Here we look at using <a href="https://www.telerik.com/fiddler">Fiddler</a> as
a proxy server in order to test a Mac client application, such as Safari or Visual Studio for Mac, can make web
requests through the proxy. Enabling Basic proxy authentication with Fiddler will be covered, as well as using
the Fiddler as a proxy without any authentication.</p>

<p>Fiddler will run on a separate Windows machine. Using a separate machine
allows us to check that the Mac client application is not bypassing the proxy and making direct
web requests to any server. This check can be done by configuring the local firewall to block all direct
connections out from the Mac machine but allow connections from the machine running Fiddler.</p>

<ul>
<li>Mac High Sierra 10.13</li>
<li>Fiddler 5.0 on Windows</li>
</ul>


<h2>Fiddler Proxy &ndash; No authentication</h2>

<p>To enable the Mac to use Fiddler as its proxy first configure Fiddler to allow remote connections.
This can be done by open the Tools menu, selecting Options, opening the Connections tab, and
checking <a href="http://docs.telerik.com/fiddler/Configure-Fiddler/Tasks/MonitorRemoteMachine">Allow remote computers to connect</a>.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithFiddler/FiddlerRemoteConnections.png" title="Fiddler allow remote connections" alt="Fiddler allow remote connections"></p>

<p>Configuring the Mac to use Fiddler as its proxy server can be done by opening System Preferences &ndash; Network.
For the active network select the Advanced button and open the Proxies tab. Enter the Fiddler&rsquo;s machine IP address and
port into the Web Proxy (HTTP) and Secure Web Proxy (HTTPS) sections, and ensure both
of these are checked.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithFiddler/MacNetworkWebProxySettings.png" title="Mac web proxy settings" alt="Mac web proxy settings"></p>

<p>Finally click OK and Apply to enable the proxy settings.</p>

<p>Now http and https requests should be sent through Fiddler. A simple way to test this is
to open Safari and open a web page.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithFiddler/FiddlerNuGetHttpsRequest.png" title="Fiddler https request recorded" alt="Fiddler https request recorded"></p>

<h2>Fiddler Proxy &ndash; Basic authentication</h2>

<p>To enable Basic proxy authentication in Fiddler open the Rules menu and ensure that
Require Proxy Authentication is checked.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithFiddler/FiddlerProxyAuthEnabled.png" title="Fiddler require proxy authentication option" alt="Fiddler require proxy authentication option"></p>

<p>This will result in Fiddler requiring Basic authentication with a username &lsquo;1&rsquo; and a
password &lsquo;1&rsquo;.</p>

<p>Unfortunately it seems that the native Mac networking API does not work with Fiddler
for https requests but will work for non-secure http requests. Opening a web page in Safari will cause the Mac to prompt for
the proxy credentials.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithFiddler/ProxyAuthenticationRequiredDialog.png" title="Mac proxy authentication required dialog" alt="Mac proxy authentication required dialog"></p>

<p>Clicking the System Preferences button will show open a dialog where you can enter the credentials for the proxy.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithFiddler/ProxyCredentialsDialog.png" title="Mac proxy authentcation required - credentials dialog" alt="Mac proxy authentication required - credentials dialog"></p>

<p>Entering the credentials will result in the Mac&rsquo;s key chain being updated with the credentials associated with the proxy&rsquo;s address.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithFiddler/ProxyCredentialsMacKeyChain.png" title="Proxy credentials stored in Mac key chain" alt="Proxy credentials stored in Mac key chain"></p>

<p>If you open the Mac&rsquo;s Network settings you will see the Web Proxy and Secure Web Proxy settings now have a username and password
associated with them.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithFiddler/MacNetworkSettingsProxyUserNamePassword.png" title="Username and password associated with proxy in network settings" alt="Username and password associated with proxy in network settings"></p>

<p>Safari will display an error page when accessing a web page over https when the Mac is configured to use Fiddler&rsquo;s basic authentation proxy.</p>

<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithFiddler/SafariProxyServerError.png" title="Safari 310 proxy error" alt="Safari 310 proxy error"></p>

<p>It seems that for a https request the Mac sends the request with two keep alive headers:</p>

<ul>
<li>Connection: keep-alive</li>
<li>Proxy-Connection: keep-alive</li>
</ul>


<p>Fiddler responds with a 407 proxy authentication required response and a close
header.</p>

<ul>
<li>Connection: close</li>
</ul>


<p><img src="http://lastexitcode.com/images/blog/ProxyTestingMacApplicationWithFiddler/FiddlerProxyAuthHttpsRequestDenied.png" title="Fiddler https request denied" alt="Fiddler https request denied"></p>

<p>Since the keep-alive is not being honoured by Fiddler the web request sent from the Mac fails and an kCFErrorDomainCFNetwork 310
error occurs. This maps to the kCFErrorHTTPSProxyConnectionFailure status code.</p>

<p>Other applications that do not use the native Mac networking API, such as the Google Chrome web browser,
will work with Fiddler and will prompt for credentials.</p>

<p>Unfortunately you currently cannot use Fiddler with basic proxy authentication enabled to test
a Mac application making https requests. As an alternative you can use another proxy server, such as Apache.</p>
]]></content>
  </entry>
  
</feed>
