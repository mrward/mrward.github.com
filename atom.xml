<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt Ward]]></title>
  <link href="http://lastexitcode.com/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2014-09-07T13:54:03+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.3]]></title>
    <link href="http://lastexitcode.com/blog/2014/09/07/NuGetSupportInXamarinStudio5-3/"/>
    <updated>2014-09-07T10:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/09/07/NuGetSupportInXamarinStudio5-3</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet package restore is now part of Xamarin Studio and no longer uses NuGet.exe</li>
<li> Add Packages dialog &ndash; Package sources could not be reached shown for failing package sources</li>
<li> Packages restored for the selected project instead of the solution</li>
<li> Show packages added to solution in Add Packages dialog</li>
<li> Show packages up to date message in status bar if there are no package updates available</li>
<li> Show status bar warning message when no updates found and package sources are unavailable</li>
<li> Restore missing packages before updating a package</li>
<li> Do not check for updated packages if the project has no packages</li>
<li> Fix version shown as download count in Add Packages dialog when searching for package versions</li>
<li> Fix empty source being selected in Add Packages dialog when package source disabled and All Sources selected</li>
<li> Fix packages.config marked as deleted by Git when updating packages</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.3 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.3/xamarin.studio_5.3/">release notes</a>. Now let us take a more detailed look at the new NuGet changes.</p>

<h2>NuGet package restore no longer uses NuGet.exe</h2>

<p>The NuGet package restore is now a part of Xamarin Studio and no longer uses NuGet.exe. This allows the package restore to integrate with the Xamarin Studio credential provider and provides more control over the package restore process. So if a package source needs authentication, or uses a proxy, then Xamarin Studio will now show a dialog asking for credentials if the credentials are not stored. Previously the package restore would fail with an error message logged in the Package Console.</p>

<h2>Add Packages dialog &ndash; Package sources could not be reached</h2>

<p>Previously when All Sources was selected and if any package source could not be reached then an error message would be displayed and no packages would be shown in the list. Now packages will be displayed with a warning even if one package source could not be reached.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-3/AddPackagesDialogPackageSourcesCouldNotBeReachedWarning.png" title="Add Packages dialog - package sources could not be reached warning" alt="Add Packages dialog - package sources could not be reached warning"></p>

<h2>Packages restored for the selected project instead of the solution</h2>

<p>Xamarin Studio will now restore packages for the selected project instead of the entire solution. When you right click the <strong>Packages</strong> folder in the Solution window and select <strong>Restore</strong> only the packages for that project will be restored.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowRestorePackagesMenu.png" title="Packages folder - Restore menu" alt="Packages folder - Restore menu"></p>

<p>This is now possible since Xamarin Studio is now responsible for restoring packages instead of using NuGet.exe which would only restore for the entire solution.</p>

<p>To restore packages for the entire solution you can still use the <strong>Restore Packages</strong> menu which is available from the Project menu or by right clicking the solution in the Solution window.</p>

<h2>Show packages added to solution in Add Packages dialog</h2>

<p>Opening the Add Packages dialog will now show the packages added to all projects in the current solution.</p>

<p>The order of the items displayed in the Add Packages dialog is recent packages first, then solution packages, and then the packages from the active package source.</p>

<h2>Show packages up to date message in status bar if there are no package updates available</h2>

<p>When you try to update a package and there are no package updates available then the status bar now displays a message indicating that the package is already up to date.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-3/PackageUpToDateStatusBarMessage.png" title="Package up to date status bar message" alt="Package up to date status bar message"></p>

<p>Similarly if you update multiple packages and there are no updates available then the status bar will now show a packages are up to date message.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-3/PackagesAreUpToDateStatusBarMessage.png" title="Packages are up to date status bar message" alt="Packages are up to date status bar message"></p>

<p>Previously the status bar would show a message that the package was updated successfully even if nothing was updated.</p>

<h2>Show status bar warning message when no updates found and package sources are unavailable</h2>

<p>When one or more of the package sources is unavailable or invalid then Xamarin Studio will now report a warning in the status bar after checking for updates.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-3/NoUpdateFoundButWarningsReportedStatusBarMessage.png" title="No update but warnings reported status bar message" alt="No updated found but warnings reported status bar message"></p>

<h2>Restoring missing packages before updating packages</h2>

<p>Previously when NuGet packages were unrestored and an attempt was made to update a NuGet package, which had updates available from the package source, the update would fail with a message indicating that the package was installed successfully but the project did not reference the package.</p>

<p>To prevent the update from failing Xamarin Studio will now check that the packages are restored for the project before trying to update and restore any missing packages. In the status bar a <strong>Restoring packages before update</strong> message will be displayed when a restore must be completed first.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-3/RestoringPackagesBeforeUpdateStatusBarMessage.png" title="Restoring packages before update status bar message" alt="Restoring packages before update status bar message"></p>

<h2>Bug Fixes</h2>

<p><strong>Do not check for updated packages if the project has no packages</strong></p>

<p>Xamarin Studio was checking for package updates in all projects even if they had no packages.config file when the solution was opened. This would result in the <strong>Packages are up to date</strong> message being displayed in the status bar even when no projects were using any NuGet packages.</p>

<p>Now if the project has no packages.config file then Xamarin Studio will not check for updates.</p>

<p><strong>Fix version shown as download count in Add Packages dialog when searching for package versions</strong></p>

<p>When running a package version search, such as <strong>Xamarin.Forms version:</strong>*, the right hand side of the dialog was showing the version number instead of the download count.</p>

<p>Now the dialog shows the download count. Ideally it would show the download count of that particular version but this is not currently available from the Package object returned by NuGet. It is returned in the results back from the package source but it is not available on the Package object.</p>

<p>Also the download counts are different for the same package if you compare the normal search result with a package version search result. The package version search shows a larger download count number. This may be related to the <a href="http://blog.nuget.org/20140603/nuget-stats.html">stats problem</a> NuGet had recently. Currently Xamarin Studio is showing the download count it receives. The standard search download counts match those shown in Visual Studio&rsquo;s Manage Packages dialog. For the package version search the download count value matches that shown on the NuGet.org website for an individual package (e.g. <a href="https://www.nuget.org/packages/jQuery">https://www.nuget.org/packages/jQuery</a>).</p>

<p><strong>Fix empty source being selected in Add Packages dialog when package source disabled and All Sources selected</strong></p>

<p>An empty package source selected in the Add Packages dialog could occur when All Sources was selected in the Add Packages dialog and one of the enabled package sources was unchecked in Preferences. On opening the Add Packages dialog again an empty package source would be displayed as the selected package source.</p>

<p>Now the Add Packages dialog will have the remaining enabled package source selected.</p>

<p><strong>Fix packages.config marked as deleted by Git when updating packages</strong></p>

<p>On updating packages in a project, and the project is using Git for version control, then the update was causing Git to show the packages.config file as deleted. This would occur if all the NuGet packages were uninstalled as part of the update which caused NuGet to see that there were no NuGet packages referenced and delete the packages.config file.</p>

<p>Now the packages.config file is shown as modified instead of deleted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.2]]></title>
    <link href="http://lastexitcode.com/blog/2014/08/10/NuGetSupportInXamarinStudio5-2/"/>
    <updated>2014-08-10T12:44:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/08/10/NuGetSupportInXamarinStudio5-2</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> Automatic package update check</li>
<li> Package framework retargeting</li>
<li> Support for custom packages directory in NuGet.Config</li>
<li> Add all checked packages even if they are not visible</li>
</ul>


<p>More details on all the new features and changes in Xamarin Studio 5.2 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.2/xamarin.studio_5.2/">release notes</a>. Now let us take a more detailed look at the new NuGet features.</p>

<h2>Automatic package update check</h2>

<p>On opening a solution Xamarin Studio will check in the background for updated packages used by your projects. When the update check begins the status bar will show a <strong>Checking for package updates</strong> message.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/CheckingForPackageUpdatesStatusBarMessage.png" title="Checking for package updates status bar message" alt="Checking for package updates status bar message"></p>

<p>If Xamarin Studio finds there are new updated packages available then the status bar will show a <strong>Package Updates are available</strong> message.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/PackageUpdatesAreAvailableStatusBarMessage.png" title="Package updates are available status bar message" alt="Package updates are available status bar message"></p>

<p>The <strong>Solution</strong> window will show information about the updates in the Packages folder.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/PackageUpdatesInSolutionWindow.png" title="Package updates shown in Solution window" alt="Package updates shown in Solution window"></p>

<p>The <strong>Packages</strong> folder will show the number of updated packages available for a project. For each package inside the Packages folder you can see the version number for the update.</p>

<p>Note that Xamarin Studio will only show updates that are for non-pre-release packages.</p>

<p>The automatic package update feature can be disabled in <strong>Preferences</strong> by unchecking <strong>Check for package updates when opening a solution</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/CheckForPackageUpdatesOptionInPreferences.png" title="Preferences dialog - Check for package updates when opening a solution" alt="Preferences dialog - Check for package updates when opening a solution"></p>

<h2>Framework retargeting</h2>

<p>A NuGet package will often contain assemblies for several target frameworks. Json.NET, for example, contains assemblies for:</p>

<ul>
<li>.NET 2.0</li>
<li>.NET 3.5</li>
<li>.NET 4.0</li>
<li>.NET 4.5</li>
<li>.NET Core 4.5 (Windows Store)</li>
<li>Portable Class Library (PCL)

<ul>
<li>.NET 4, Silverlight 5, Windows Phone 8, Windows 8, Windows Phone   Application 8.1</li>
</ul>
</li>
<li>Portable Class Library (PCL)

<ul>
<li>.NET 4.5, Windows Phone 8, Windows 8, Windows Phone Application 8.1</li>
</ul>
</li>
</ul>


<p>When you install this NuGet package into your project the assembly that is referenced is determined by your project&rsquo;s target framework. NuGet will reference the assembly which it considers to be the best match for your project&rsquo;s target framework. So if you install Json.NET into a project that targets .NET 4.5 the Json.NET assembly referenced will be taken from the .NET 4.5 folder inside the NuGet package.</p>

<p>If you change your project&rsquo;s target framework after you have installed the NuGet package your project may be referencing a different assembly compared with what would have been referenced if you had installed it after changing the project&rsquo;s target framework. In some cases the project&rsquo;s target framework may not be compatible with the NuGet package. For example, your project targeted .NET 4.5 and you then changed it to .NET 2.0. In this case you would be referencing a .NET 4.5 assembly that would not work with .NET 2.0. Another example is if you change the PCL profile of your project which could affect which PCL assemblies are used from the NuGet package.</p>

<p>In Xamarin Studio 5.2 if you change your project&rsquo;s target framework then the NuGet packages referenced by your project are checked to see if they are still compatible. The result of this check is displayed in the <strong>Package Console</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/PackagesNeedRetargetingMessagesInPackageConsole.png" title="Packages need retargeting messages in Package Console" alt="Packages need retargeting messages in Package Console"></p>

<p>In the screenshot above the project&rsquo;s target framework was changed from .NET 4.5 to .NET 2.0 whilst the project had the Json.NET and Moq NuGet packages installed. Json.NET is compatible with .NET 2.0 and can be retargeted. Moq does not support .NET 2.0 and is not compatible.</p>

<p>To retarget an individual NuGet package you can select the package in the <strong>Solution</strong> window, right click and select <strong>Retarget</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/RetargetSinglePackageSolutionWindowMenuItem.png" title="Solution window - Retarget menu item" alt="Solution window - Retarget menu item"></p>

<p>To retarget all packages in the project you can select <strong>Packages</strong> in the <strong>Solution</strong> window, right click and select <strong>Retarget</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-2/RetargetAllProjectPackagesSolutionWindowMenuItem.png" title="Solution window - Retarget project packages menu item" alt="Solution window - Retarget project packages menu item"></p>

<p>Selecting <strong>Retarget</strong> will remove the NuGet package and then add it again so the correct assembly is referenced by your project. The status bar will be updated as the package is retargeted and full details can be seen in the Package Console.</p>

<p>The Retarget menu item is only available if NuGet packages need to be retargeted.</p>

<p>Note that if you retarget a NuGet package that is incompatible with your project&rsquo;s target framework then the retargeting will fail and the NuGet package will be removed from the project.</p>

<h2>Support for custom packages directory in NuGet.Config</h2>

<p>When a NuGet package is installed into a project the NuGet packages are by default downloaded into a packages directory inside the solution directory. The location and name of this packages directory can be configured by specifying the repositoryPath in the NuGet.config file.</p>

<pre><code>&lt;configuration&gt;
  &lt;config&gt;
    &lt;add key="repositoryPath" value="../../MyPackages" /&gt;
  &lt;/config&gt;
&lt;/configuration&gt;
</code></pre>

<p>If you create a NuGet.config file and put it the .nuget directory inside the solution, or in the project&rsquo;s directory, then Xamarin Studio will read the repositoryPath and use it when downloading NuGet packages. The path is relative to the NuGet.config file but you can specify a full path if you need to.</p>

<p>Note that if you make a change to the repositoryPath whilst the solution is open you will need to close and re-open the solution for the changes to be detected.</p>

<h2>Add all checked packages even if they are not visible</h2>

<p>The Add Packages dialog will now add all packages that were checked when you click the Add Packages button even if they are not currently being displayed in the dialog. This allows you to run multiple searches in the dialog, check multiple packages and then add them to the project in one step without having to open the Add Packages dialog multiple times. Previously only the checked packages that were displayed in the list of packages would be added to your project.</p>

<h2>Bug Fixes</h2>

<p><strong>Incorrect path separator used for MSBuild Import</strong></p>

<p>A NuGet package can contain custom MSBuild .targets and .props files. Previously when a NuGet package was installed on the Mac a forward slash path separator was used when adding the paths for custom MSBuild .targets file. This would cause Xamarin Studio on Windows to fail to compile the project. Now backslashes are used for all paths added to the project file.</p>

<p>Xamarin Studio will also now add a Condition to the project file that checks the imported MSBuild .targets file exists. Without this condition the project cannot be opened in Visual Studio if the NuGet packages are missing.</p>

<p>As an example, if Xamarin.Forms 1.1.1.6206 is installed into a project the following Import element will be added.</p>

<pre><code>&lt;Import 
    Project="packages\Xamarin.Forms.1.1.1.6206\build\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\Xamarin.Forms.targets"
    Condition="Exists('packages\Xamarin.Forms.1.1.1.6206\build\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\Xamarin.Forms.targets')" /&gt;
</code></pre>

<p><strong>Repositories.config not restored</strong></p>

<p>When NuGet packages were restored for the solution the repositories.config file was not being restored. The repositories.config file contains references to all the projects in the solution that have NuGet packages. This information is used by NuGet to determine whether a NuGet package can be removed from the packages directory when a NuGet package is removed from a project. Without this information a NuGet package that is still referenced by other projects could be removed from the packages directory and cause the compilation to fail.</p>

<p><strong>Package Dependencies not resolved from enabled package sources</strong></p>

<p>Xamarin Studio will now use all enabled package sources when resolving dependencies for a NuGet package even if a single package source is selected in the Add Packages dialog. This allows the use of a NuGet package source that has packages that have dependencies that are not available from that particular package source but are available from another package source.</p>

<p><strong>Packages are up to date status bar message</strong></p>

<p>If you have the automatic check for updates disabled and update one or more NuGet packages the status bar will now display a message indicating that the packages are up to date if there are no updates available. Previously Xamarin Studio would show a message that the packages were updated when they were not.</p>

<p><strong>Updating an unrestored package</strong></p>

<p>If you have automatic package restore disabled and you attempt to update a NuGet package the package will now be restored before the update is attempted. Previously this would fail when an update was available since NuGet looks at the old package to work out how to remove it from the project before updating to the new NuGet package.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.1]]></title>
    <link href="http://lastexitcode.com/blog/2014/07/06/NuGetSupportInXamarinStudio5-1/"/>
    <updated>2014-07-06T10:48:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/07/06/NuGetSupportInXamarinStudio5-1</id>
    <content type="html"><![CDATA[<p><a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.1/xamarin.studio_5.1/">Xamarin Studio 5.1</a> was released last week and it includes some new features for the NuGet addin.</p>

<h2>New Features</h2>

<ul>
<li> Searching and installing a specific version of a NuGet package.</li>
<li> Support for NuGet package sources defined in a solution specific NuGet.Config file.</li>
</ul>


<p>More details on all the new features and changes in Xamarin Studio 5.1 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.1/xamarin.studio_5.1/">release notes</a>. Now let us take a look at the new NuGet features.</p>

<h2>Searching and installing a specific version of a NuGet package</h2>

<p>The Add Packages dialog can now be used to search and install a specific version of a NuGet package. You can search for all versions, a range of versions, or a specific version of a NuGet package. To do this the following search syntax is used:</p>

<pre><code>PackageId version:VersionNumber
</code></pre>

<p>The packages are shown in the Add Packages dialog with the most recent version at the top. At the top right of each package in the package list you will see the package version instead of the download count allowing you to find the particular version you want to install.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-1/AddPackagesDialogAllAutoMapperPackageVersions.png" title="Add Packages dialog - all AutoMapper package versions" alt="Add Packages dialog - all AutoMapper package versions"></p>

<p>To search for all versions of the AutoMapper NuGet package you can use an asterisk or leave the version number blank.</p>

<pre><code>AutoMapper version:*
</code></pre>

<p>To search for all the 2.1 versions of the AutoMapper NuGet package you can use the search:</p>

<pre><code>AutoMapper version:2.1
</code></pre>

<p>This will return a range of versions from 2.1.0 up to but not including 2.2.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-1/AddPackagesDialogAutoMapperPackageVersions21.png" title="Add Packages dialog - AutoMapper 2.1 package versions" alt="Add Packages dialog - AutoMapper 2.1 package versions"></p>

<p>The package id used in the search must match the id of the NuGet package otherwise no results will be returned.</p>

<p>Searching for package versions is also supported in the universal search at the top right of Xamarin Studio.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-1/PackageVersionSearchInUniversalSearch.png" title="Package version search in universal search" alt="Package version search in universal search"></p>

<h2>Package sources defined in a solution specific NuGet.Config file</h2>

<p> If package sources are defined in the solution&rsquo;s NuGet.Config file then these will be available in the Add Packages dialog when this solution is opened. The NuGet.Config file can be in the solution directory or in the .nuget subdirectory. An example NuGet.Config file is shown below.</p>

<pre><code>&lt;configuration&gt;
  &lt;packageSources&gt;
    &lt;add key="ASP.NET vNext - MyGet" value="https://www.myget.org/F/aspnetvnext/" /&gt;
  &lt;/packageSources&gt;
&lt;/configuration&gt;
</code></pre>

<p>When the solution is opened the package sources defined in the NuGet.config file are available in the drop down list at the top left of the Add Packages dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-1/AddPackagesWithPackageSourceFromSolutionLevelNuGetConfig.png" title="Add Packages dialog - package sources from solution NuGet.Config" alt="Add Packages dialog - package sources from solution NuGet.config"></p>

<h2>Bug Fixes</h2>

<p><strong>Proxy credentials not being requested for a https package source.</strong></p>

<p>   Added a workaround to NuGet to handle Mono returning a different http response when proxy authentication is required.</p>

<p><strong>Web.config transforms not being applied when installing NuGet packages such as Nancy.Hosting.Aspnet.</strong></p>

<p>   Projects were not being recognised as web projects so transforms were only being applied to app.config files.</p>

<p><strong>XDT remove transforms (Xml Document Transformations) failing on Mono.</strong></p>

<p>   Modified the XDT library that ships with Xamarin Studio to handle different behaviour on Mono compared with Microsoft&rsquo;s .NET Framework. These transforms are used in the Microsoft.AspNet.Mvc NuGet package.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet PowerShell Console for Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2014/06/22/NuGetPowerShellConsoleForXamarinStudio/"/>
    <updated>2014-06-22T21:05:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/06/22/NuGetPowerShellConsoleForXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 5.0 now has <a href="http://lastexitcode.com/blog/2014/06/01/NuGetSupportInXamarinStudio5-0/">NuGet support built in</a>. There are also some experimental NuGet features that are available for Xamarin Studio 5.0 and MonoDevelop 5.0 as part of a separate <a href="https://github.com/mrward/monodevelop-nuget-extensions">NuGet extensions addin</a>. One such experimental feature is a new PowerShell console window that provides Xamarin Studio with the standard NuGet commands and also works on the Mac, not just Windows.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellConsoleForXamarinStudio/PackageConsoleExtensionWindow.png" title="NuGet PowerShell Console Window" alt="NuGet PowerShell Console Window"></p>

<p>The new console window is powered by Pash. Pash is a open source reimplementation of PowerShell that works with Mono and runs on Windows, Mac and Linux. It was created by <a href="https://twitter.com/igor_moochnick">Igor Moochnick</a> and more recently development has been restarted by <a href="https://twitter.com/jaybazuzi">Jay Bazuzi</a>.</p>

<h2>PowerShell Console Features</h2>

<ul>
<li> Standard NuGet PowerShell commands available &ndash; Install-Package, Update-Package, Uninstall-Package, Get-Project and Get-Package</li>
<li> Integrates with the existing NuGet addin that ships with Xamarin Studio.</li>
<li> Cross platform &ndash; works on Windows and Mac.</li>
<li> Powered by <a href="https://github.com/Pash-Project/Pash">Pash</a>.</li>
<li> Partial implementation of the <a href="http://msdn.microsoft.com/en-us/library/envdte.aspx">Visual Studio object model EnvDTE</a>.</li>
</ul>


<h2>Limitations</h2>

<ul>
<li> PowerShell support is not fully implemented in Pash so PowerShell scripts may not fully work.</li>
<li> Xamarin Studio needs to be closed and re-opened before the console can be used. Otherwise the Xamarin Studio will crash.</li>
<li> Some standard parameters are missing from the NuGet commands (e.g. -verbose).</li>
<li> The NuGet commands are not fully up to date compared with the commands available in Visual Studio. One example is <strong>Update-Package -Reinstall</strong> which is currently not supported.</li>
</ul>


<h2>Installation</h2>

<p>The NuGet extensions addin is available from the <a href="http://addins.monodevelop.com/Project/Index/121">MonoDevelop addin repository</a>. To install the addin:</p>

<ul>
<li>Open the <strong>Add-in Manager</strong> dialog.</li>
<li>Select the <strong>Gallery</strong> tab.</li>
<li>Select <strong>Xamarin Studio Add-in Repository (Alpha channel)</strong> from the drop down list.</li>
<li>Expand <strong>IDE extensions</strong>.</li>
<li>Select <strong>NuGet Package Management Extensions</strong>.</li>
<li>Click the <strong>Refresh</strong> button if the addin is not visible.</li>
<li>Click <strong>Install&hellip;</strong> to install the addin.</li>
</ul>


<p>Please close and re-open Xamarin Studio before trying to open the PowerShell Console window otherwise Xamarin Studio will crash.</p>

<h2>Using the PowerShell Console</h2>

<p>To open the console window, from the <strong>View</strong> menu select <strong>Pads</strong> and then select <strong>Package Console Extension</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellConsoleForXamarinStudio/ViewPackageConsoleExtensionPadMenuItem.png" title="View - Package Console Extension menu item" alt="View - Package Console Extension menu item"></p>

<p>The top of the console window has drop downs allowing you to choose a different default package source or default project. At the top right there is a Clear Console button which will clear all the text from the console.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellConsoleForXamarinStudio/PackageConsoleExtensionWindowInstallingJsonNet.png" title="PowerShell Console Window - Installing Json.NET" alt="PowerShell Console Window - Installing Json.NET"></p>

<p>The standard <a href="http://docs.nuget.org/docs/reference/package-manager-console-powershell-reference">NuGet PowerShell commands</a> are available from the console window:</p>

<ul>
<li>Install-Package</li>
<li>Uninstall-Package</li>
<li>Update-Package</li>
<li>Get-Package</li>
<li>Get-Project</li>
</ul>


<p>There is also a partial implementation of the <a href="http://msdn.microsoft.com/en-us/library/envdte.aspx">Visual Studio object model (EnvDTE)</a> which you can use from the console and from PowerShell scripts inside a NuGet package. Currently the Solution object and the CodeModel is not fully implemented when compared with SharpDevelop.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPowerShellConsoleForXamarinStudio/PackageConsoleExtensionWindowUsingEnvDTEProjectModel.png" title="PowerShell Console Window - Using EnvDTE project model" alt="PowerShell Console Window - Using EnvDTE project model"></p>

<p>When you install a NuGet package from the console and the NuGet package has an <strong>init.ps1</strong> or an <strong>install.ps1</strong> PowerShell script then these scripts will be run. Similarly on uninstalling a NuGet package if it contains an <strong>uninstall.ps1</strong> script then this will be run in the console. However there are some areas of PowerShell that are not fully implemented in Pash so the script may well fail. The failure will be logged in the console window but it will not prevent the package from being installed or uninstalled.</p>

<p>That concludes the introduction to the experimental NuGet Package Console in Xamarin Studio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.0]]></title>
    <link href="http://lastexitcode.com/blog/2014/06/01/NuGetSupportInXamarinStudio5-0/"/>
    <updated>2014-06-01T18:25:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/06/01/NuGetSupportInXamarinStudio5-0</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 5.0 was released last week as part of the <a href="http://blog.xamarin.com/announcing-xamarin-3/">Xamarin 3.0 release</a> and it now has built-in support for NuGet. There is no need to install the NuGet addin separately into Xamarin Studio 5.0 or MonoDevelop 5.0 since it is now &ldquo;in the box&rdquo;.</p>

<h2>New Features</h2>

<ul>
<li> Re-designed user interface.</li>
<li> More integrated with the Solution window.</li>
<li> Supports <a href="http://docs.nuget.org/docs/reference/search-syntax">NuGet&rsquo;s search syntax</a>.</li>
<li> Background package installation.</li>
<li> Integrates with Xamarin Studio&rsquo;s unified search.</li>
<li> Support for NuGet packages in project templates.</li>
<li> Package restore on opening a solution.</li>
<li> Integrates with Xamarin Studio&rsquo;s credential provider to provide proxy and package source authentication.</li>
</ul>


<p>So let us a look at these features in more detail by looking at how to use the NuGet addin in Xamarin Studio 5.0.</p>

<h2>Adding NuGet Packages</h2>

<p>To add a NuGet package we need to open the <strong>Add Packages</strong> dialog. This can be done in the following ways:</p>

<ul>
<li>From the <strong>Project</strong> menu select <strong>Add Packages</strong>. The project will need to be selected in the <strong>Solution</strong> window.</li>
<li>From the <strong>Solution</strong> window, right click the project and select <strong>Add &ndash; Add Packages</strong>.</li>
</ul>


<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesMenuOptionSolutionWindow.png" title="Solution Window right click Add Packages menu" alt="Solution Window right click Add Packages menu"></p>

<ul>
<li>From Xamarin Studio&rsquo;s unified search, available in the top right of the main window, enter the name of the package you would like to search for, then select <strong>Search Packages</strong>.</li>
</ul>


<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SearchPackagesUsingUnifiedSearch.png" title="Search packages using unified search" alt="Search packages using unified search"></p>

<ul>
<li>Double clicking the <strong>Packages</strong> folder in the <strong>Solution</strong> window will also open the Add Packages dialog (note the Packages folder is only displayed if you have a NuGet package installed in your project).</li>
</ul>


<p>On opening the Add Packages dialog you will see a re-designed user interface.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesDialog.png" title="Add Packages dialog" alt="Add Packages dialog"></p>

<p>If a NuGet package has an associated image then it will now be displayed in the list of packages.</p>

<p>The search text box at the top right of the dialog will now search for packages as you type.</p>

<p>The package source combo box at the top left of the dialog now includes a new <strong>Configure Sources</strong> item which allows you to quickly switch to the configured package sources in preferences and back again to the Add Packages dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesDialogConfigureSources.png" title="Configuring sources from Add Packages dialog" alt="Configuring sources from Add Packages dialog"></p>

<p>The list of packages now has infinite scroll support. As you scroll down the list new packages will be retrieved from the package source and displayed. Previously you had to click a button to move to the next page.</p>

<p>To install a NuGet package in the Add Packages dialog you can do one of the following:</p>

<ul>
<li>Select a package and double click it.</li>
<li>Select a package and press the enter key.</li>
<li>Select a package and press the <strong>Add Package</strong> button.</li>
</ul>


<p>To install two or more NuGet packages you can click the check box next to the package and then select the <strong>Add Packages</strong> button.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesDialogTwoPackagesChecked.png" title="Two packages checked in Add Packages dialog" alt="Two packages checked in Add Packages dialog"></p>

<p>On adding the NuGet package the Add Packages dialog will close and the package installation will complete in the background. You will see status messages appear in the status bar at top of the main window as the installation progresses. The screenshots below show the status messages that are displayed when the NUnit NuGet package is installed.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/AddNUnitPackageStatusBarMessage.png" title="Adding NUnit package status bar message" alt="Adding NUnit package status bar message"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/NUnitPackageAddedSuccessfullyStatusBarMessage.png" title="NUnit package added successfully status bar message" alt="NUnit package added successfully status bar message"></p>

<p>More detailed information about the installation can be seen in the <strong>Package Console</strong> window.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/NUnitPackageAddedPackageConsole.png" title="NUnit package added messages in Package Console" alt="NUnit package added messages in Package Console"></p>

<p>The Package Console can be opened by clicking on a package status message in the status bar or from the <strong>View</strong> menu by selecting <strong>Pads &ndash; Package Console</strong>. If there is an error when installing a NuGet package then the Package Console will automatically open to show more information about the error.</p>

<p>On adding the first NuGet package to a project a <strong>Packages</strong> folder will be displayed in the Solution window.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowPackagesFolder.png" title="Solution window - Packages folder" alt="Solution window - Packages folder"></p>

<p>Any assembly references that a NuGet package adds to your project will be displayed in
the <strong>From Packages</strong> folder inside <strong>References</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowFromPackagesFolder.png" title="Solution window - From Packages folder" alt="Solution window - From Packages folder"></p>

<p>Whilst the NuGet package is being installed the package id text will be highlighted.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowPackagesBeingAdded.png" title="Solution window - packages being added" alt="Solution window - packages being added"></p>

<p>After the NuGet package is installed the text will be changed to black and a status message will be shown in the status bar.</p>

<h2>Searching for Packages</h2>

<p>The Add Packages dialog now supports the <a href="http://docs.nuget.org/docs/reference/search-syntax">extended NuGet search syntax</a>. Note that the NuGet package source will need to support this syntax. The main NuGet.org package source supports this search syntax.</p>

<p>So you can now make your search more specific by using one of the special tags, such as id, packageid, tags, author or owner. Some example searches are shown below:</p>

<pre><code>id:NUnit
packageid:Xamarin.Forms
tags:typescript
owner:xamarin
author:xamarin
</code></pre>

<h2>Removing NuGet Packages</h2>

<p>You can remove a NuGet package from the Solution window. Expand the <strong>Packages</strong> folder for your project, select the package, right click and select <strong>Remove</strong>, or press the delete key.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowPackageBeingRemoved.png" title="Solution window - remove package menu" alt="Solution window - package remove menu"></p>

<p>The package will then be uninstalled in the background. Status information will appear in the status bar and more detailed information will be shown in the Package Console window.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/RemovingNUnitPackageStatusBarMessage.png" title="Removing package status bar message" alt="Removing package status bar message"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/NUnitPackageRemovedSuccessfullyStatusBarMessage.png" title="Package removed status bar message" alt="Package removed status bar message"></p>

<h2>Updating NuGet Packages</h2>

<p>You can update an individual NuGet package by selecting it in the <strong>Solution</strong> window, right clicking and selecting <strong>Update</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowUpdatePackageMenu.png" title="Solution window - update package menu" alt="Solution window update package menu"></p>

<p>You can update all the packages in a project by right clicking the <strong>Packages</strong> folder and selecting <strong>Update</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowUpdateAllProjectPackagesMenu.png" title="Solution window - update all packages in project menu" alt="Solution window update all packages in project menu"></p>

<p>To update all the packages in the solution, either right click the solution in the <strong>Solution</strong> window and select <strong>Update Packages</strong>, or from the <strong>Project</strong> menu select <strong>Update Packages</strong>.</p>

<p>As with adding and removing a NuGet package you will see status bar messages as the update progresses and detailed information in the Package Console window.</p>

<h2>Restoring NuGet Packages</h2>

<p>By default NuGet packages will be automatically restored when a solution is opened.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/RestorePackagesStatusBarMessage.png" title="Packages being restored status bar message" alt="Packages being restored status bar message"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/PackagesRestoredSuccessfullyStatusBarMessage.png" title="Packages restored status bar message" alt="Packages restored status bar message"></p>

<p>You can disable this by going into preferences and unchecking <strong>Automatically restore packages when opening a solution</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/PreferencesAutomaticPackageRestore.png" title="Preferences - automatic package restore" alt="Preferences - automatic package restore"></p>

<p>With automatic package restore disabled you can manually restore NuGet packages in the following ways:</p>

<ul>
<li>Right click the <strong>Packages</strong> folder in the Solution window and select <strong>Restore</strong>.</li>
<li>Right click the solution and select <strong>Restore Packages</strong>.</li>
<li>From the <strong>Project</strong> menu select <strong>Restore Packages</strong>.</li>
</ul>


<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowRestorePackagesMenu.png" title="Solution window - restore packages menu" alt="Solution window - restore packages menu"></p>

<p>The status bar will be updated with information on the progress of the restore. More detailed information can be seen in the Package Console window.</p>

<h2>NuGet Packages in Project Templates</h2>

<p>You can now have a project template that will install NuGet packages. To do this you add a <strong>Packages</strong> element inside the <strong>Project</strong> element of the project template.</p>

<pre><code>&lt;Packages&gt;
    &lt;Package id="NUnit" /&gt;
    &lt;Package id="jQuery" version="1.7.1" /&gt;
&lt;/Packages&gt;
</code></pre>

<p>You can specify an exact version for the NuGet package. If the version is not specified then the latest version of the NuGet package will be installed.</p>

<p>By default Xamarin Studio will look for the NuGet packages from the main NuGet.org package source. To use your own package source instead you can create an addin and define the package source in its .addin.xml file. Inside your .addin.xml file you can add an <em>*Extension</em> element which supports both online NuGet package sources and local directory package sources.</p>

<p>To define an online NuGet package source you can use the <strong>url</strong> attribute in your .addin.xml file:</p>

<pre><code>&lt;Extension path = "/MonoDevelop/Ide/ProjectTemplatePackageRepositories"&gt;
    &lt;PackageRepository url="https://mynugetfeed.nget/packages" /&gt;
&lt;/Extension&gt;
</code></pre>

<p>If you want your addin to work offline then you can include the NuGet packages with your addin in a subdirectory and use the following extension in your .addin.xml:</p>

<pre><code>&lt;Extension path = "/MonoDevelop/Ide/ProjectTemplatePackageRepositories"&gt;
    &lt;PackageRepository path="packages" /&gt;
&lt;/Extension&gt;
</code></pre>

<p>The <strong>path</strong> attribute here should contain the directory relative to where the addin is installed.</p>

<h2>Package Source and Proxy Authentication</h2>

<p>If a NuGet package source or a proxy needs authentication then Xamarin Studio will prompt for credentials.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesProxyCredentialPrompt.png" title="Proxy credentials dialog prompt" alt="Proxy credentials dialog prompt"></p>

<p>Please note that there is a bug that currently prevents proxy authentication with package sources that use https which will be fixed in the next release of Xamarin Studio.</p>

<h2>Configuring NuGet Package Sources</h2>

<p>NuGet package sources can be configured in preferences.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-0/PreferencesAddPackageSource.png" title="Preferences - adding package source" alt="Preferences - adding package source"></p>

<p>A new feature here is the ability to specify a username and password for a package source that requires authentication. The username and passwords are encrypted and stored in the NuGet.config file in the same way that NuGet.exe will if you use it on the command line.</p>

<p>That concludes our look at the new NuGet features in Xamarin Studio and MonoDevelop 5.0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop NuGet Addin 0.9 Released]]></title>
    <link href="http://lastexitcode.com/blog/2014/04/13/MonoDevelopNuGetAddin0-9Released/"/>
    <updated>2014-04-13T14:51:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/04/13/MonoDevelopNuGetAddin0-9Released</id>
    <content type="html"><![CDATA[<p>A new version of the NuGet addin for Xamarin Studio and MonoDevelop has been released.</p>

<h2>New Features</h2>

<p>The main change is to include <a href="http://docs.nuget.org/docs/release-notes/nuget-2.8.1">NuGet 2.8.1</a> which adds support for Windows Phone 8.1 projects.
Also some of the newer NuGet packages, such as Microsoft.Bcl.Immutable 1.1.20-beta, which the <a href="https://www.nuget.org/packages/Microsoft.CodeAnalysis">Roslyn NuGet packages</a> depend on, will not install unless NuGet 2.8.1 is being used.</p>

<p>For a detailed look at the changes please read the <a href="http://lastexitcode.com/projects/MonoDevelopNuGetAddin/Releases/0.9/">release note</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop NuGet Addin 0.8 Released]]></title>
    <link href="http://lastexitcode.com/blog/2013/12/15/MonoDevelopNuGetAddin0-8Released/"/>
    <updated>2013-12-15T18:22:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2013/12/15/MonoDevelopNuGetAddin0-8Released</id>
    <content type="html"><![CDATA[<p>A new version of the NuGet addin for Xamarin Studio and MonoDevelop has been released.</p>

<h2>New Features</h2>

<p>The main change is support for <a href="http://docs.nuget.org/docs/release-notes/nuget-2.7.2">NuGet 2.7.2</a> so you can now add NuGet packages, that include Portable Class Libraries (PCLs), to projects that target MonoAndroid.</p>

<p>For a detailed look at the changes please read the <a href="http://lastexitcode.com/projects/MonoDevelopNuGetAddin/Releases/0.8/">release note</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop NuGet Addin 0.7 Released]]></title>
    <link href="http://lastexitcode.com/blog/2013/11/03/MonoDevelopNuGetAddin0-7Released/"/>
    <updated>2013-11-03T15:28:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2013/11/03/MonoDevelopNuGetAddin0-7Released</id>
    <content type="html"><![CDATA[<p>A new version of the NuGet addin for Xamarin Studio and MonoDevelop has been released.</p>

<h2>New Features</h2>

<ul>
<li><a href="http://docs.nuget.org/docs/release-notes/nuget-2.7.1">NuGet 2.7.1</a> support.</li>
<li>Improved support for Portable Class Libraries (PCLs) on Linux and Mac.</li>
<li>Support using package restore with different parallel mono environments (Thanks to <a href="https://github.com/kjohnphillip">Kevin John-Philip</a>).</li>
</ul>


<p>For a detailed look at the new features please read the <a href="http://lastexitcode.com/projects/MonoDevelopNuGetAddin/Releases/0.7/">release note</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop NuGet Addin 0.6 Released]]></title>
    <link href="http://lastexitcode.com/blog/2013/08/26/MonoDevelopNuGetAddin0-6Released/"/>
    <updated>2013-08-26T13:21:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2013/08/26/MonoDevelopNuGetAddin0-6Released</id>
    <content type="html"><![CDATA[<p>A new version of the NuGet addin for Xamarin Studio and MonoDevelop has been released.</p>

<h2>New Features</h2>

<ul>
<li><a href="http://docs.nuget.org/docs/release-notes/nuget-2.7">NuGet 2.7</a> support.</li>
<li>Support for restoring NuGet packages.</li>
<li>Added message to show that the Manage Packages dialog is searching for packages.</li>
</ul>


<p>For a detailed look at the new features please read the <a href="http://lastexitcode.com/projects/MonoDevelopNuGetAddin/Releases/0.6/">release note</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop NuGet Addin 0.5 Released]]></title>
    <link href="http://lastexitcode.com/blog/2013/07/14/MonoDevelopNuGetAddin0-5Released/"/>
    <updated>2013-07-14T15:40:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2013/07/14/MonoDevelopNuGetAddin0-5Released</id>
    <content type="html"><![CDATA[<p>A new version of the NuGet addin for Xamarin Studio 4.0 has been released.</p>

<h2>New Features</h2>

<ul>
<li><a href="http://docs.nuget.org/docs/release-notes/nuget-2.6">NuGet 2.6</a> support.</li>
<li>Support for prerelease packages.</li>
<li>Support for packages using <a href="https://xdt.codeplex.com/">XML Document Transformations</a> (XDTs).</li>
<li>File conflict dialog when installing a package that is trying to add files that already exist in the project.</li>
<li>Installation errors now displayed in the Manage Packages dialog.</li>
<li>Support for packages that include MSBuild targets and properties files.</li>
<li>Support for accessing authenticated feeds.</li>
<li>Update All button added to Manage Packages dialog so all packages can be updated in a project or solution in one step.</li>
<li>Package title displayed in the list of packages instead of the package id. The package id displayed when a package is selected on the right hand side of the dialog.</li>
</ul>


<p>For a detailed look at the new features please read the <a href="http://lastexitcode.com/projects/MonoDevelopNuGetAddin/Releases/0.5/">release note</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IronPython Error: Attribute of Namespace Object is Read-Only]]></title>
    <link href="http://lastexitcode.com/blog/2012/11/17/IronPythonErrorAttributeOfNamespaceObjectIsReadOnly/"/>
    <updated>2012-11-17T14:40:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2012/11/17/IronPythonErrorAttributeOfNamespaceObjectIsReadOnly</id>
    <content type="html"><![CDATA[<p>If you are seeing an AttributeError, as shown below, when running IronPython 2.7 then check you have added all the required assembly reference to your application.</p>

<pre><code>AttributeError: attribute 'Xml' of 'namespace#' object is read-only
</code></pre>

<p>The attribute name displayed will most likely be different but the underlying problem is that you are trying to use a type that exists in an assembly that is not referenced. Here is a simple example that reproduces the error.</p>

<pre><code>import System
doc = System.Xml.XmlDocument()
</code></pre>

<p>The code above is importing the System namespace and then attempting to create an XmlDocument object. Running the above code with ipy.exe will result in the AttributeError being displayed.</p>

<pre><code>D:\projects&gt;ipy
IronPython 2.7.3 (2.7.0.40) on .NET 4.0.30319.296 (32-bit)
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import System
&gt;&gt;&gt; doc = System.Xml.Document()
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
AttributeError: attribute 'Xml' of 'namespace#' object is read-only
&gt;&gt;&gt;
</code></pre>

<p>The cryptic error message indicates that we do not have a reference to the System.Xml assembly. To fix the problem we add the following two lines of code before the code that creates the XmlDocument object.</p>

<pre><code>import clr
clr.AddReference("System.Xml")
</code></pre>

<p>Running the code again will now cause the XmlDocument object to be created without an error.</p>

<pre><code>D:\projects&gt;ipy
IronPython 2.7.3 (2.7.0.40) on .NET 4.0.30319.296 (32-bit)
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import clr
&gt;&gt;&gt; clr.AddReference("System.Xml")
&gt;&gt;&gt; import System
&gt;&gt;&gt; doc = System.Xml.XmlDocument()
&gt;&gt;&gt; doc.ToString()
'System.Xml.XmlDocument'
&gt;&gt;&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloning a CodePlex Repository over to GitHub]]></title>
    <link href="http://lastexitcode.com/blog/2012/09/26/CloneCodePlexRepositoryToGitHub/"/>
    <updated>2012-09-26T16:36:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2012/09/26/CloneCodePlexRepositoryToGitHub</id>
    <content type="html"><![CDATA[<p>How do you clone a CodePlex Git repository over to GitHub?</p>

<p>Here we take a look at how to clone the<a href="http://entityframework.codeplex.com/"> Entity Framework Git repository</a>, which is available on CodePlex, over to GitHub. The goal is to be able to take new commits from the original CodePlex Git repository and update the repository being hosted on GitHub.</p>

<ol>
<li><p>Create a repository on GitHub.</p>

<p> Do not initialise the repository with a readme file just create the repository. We are going to call this repository entityframework-sharpdevelop since this will be a port of the Entity Framework which will work with SharpDevelop.</p></li>
<li><p>Clone the CodePlex repository to your local machine.</p>

<p> Using your favourite Git client clone the Entity Framework repository at CodePlex to your local machine.</p>

<pre><code> git clone https://git01.codeplex.com/entityframework entityframework
</code></pre></li>
<li><p>Configure Git Remotes</p>

<p> Our goal is to have a setup similar to the following.</p>

<pre><code> git remote -v

 origin  git@github.com:mrward/entityframework-sharpdevelop.git (fetch)
 origin  git@github.com:mrward/entityframework-sharpdevelop.git (push)
 upstream        https://git01.codeplex.com/entityframework (fetch)
 upstream        https://git01.codeplex.com/entityframework (push)
</code></pre>

<p> We want an upstream remote that points to the original Entity Framework repository on CodePlex. We also want an origin remote that points our GitHub repository</p>

<p> First we create the upstream remote by renaming the origin remote. From inside the entityframework folder we run the following command.</p>

<pre><code> git remote rename origin upstream
</code></pre>

<p> Now we add the new origin remote.</p>

<pre><code> git remote add origin git@github.com:mrward/entityframework-sharpdevelop.git
</code></pre>

<p> Run <strong>git remote -v</strong> to check that the configuration is correct.</p></li>
<li><p>Push the code to GitHub</p>

<pre><code> git push -u origin master
</code></pre></li>
<li><p>Get the latest Entity Framework Commits into GitHub</p>

<p> Now when you want to get the latest Entity Framework commits from CodePlex you can run the following commands to merge these commits into your local master branch.</p>

<pre><code> git fetch upstream
 git merge upstream/master
</code></pre>

<p> Then you can push the changes up to GitHub.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a GitHub hosted blog with Octopress]]></title>
    <link href="http://lastexitcode.com/blog/2012/09/26/CreatingAGitHubHostedBlogWithOctopress/"/>
    <updated>2012-09-26T13:55:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2012/09/26/CreatingAGitHubHostedBlogWithOctopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> is a blogging framework created by Brandon Mathis. Octopress has great documentation on how to setup Octopress on a <a href="http://pages.github.com/">GitHub hosted blog</a> which this guide is not trying to replace. The following guide is a simple overview of how to setup Octopress with Windows being used to create the blog posts and push them to GitHub.</p>

<h2>Prerequisites</h2>

<ol>
<li>You have GitHub account.</li>
<li>You have a Git client, such as Tortoise Git, installed.</li>
</ol>


<h2>Software Versions</h2>

<p>This guide is based on the using the following software:</p>

<ul>
<li>Octopress 2.0</li>
<li>Windows 7 (client machine)</li>
<li>Ruby 1.9.3</li>
</ul>


<h2>How to setup a GitHub based blog with Octopress</h2>

<ol>
<li>Download and install Ruby 1.9.3 from <a href="http://rubyinstaller.org/downloads/">http://rubyinstaller.org/downloads/</a></li>
<li><p>Add ruby to your path</p>

<pre><code> PATH=c:\ruby193\bin
</code></pre></li>
<li><p>Download the <a href="https://GitHub.com/oneclick/rubyinstaller/wiki/Development-Kit">Ruby devkit</a> from <a href="http://rubyinstaller.org/downloads/">http://rubyinstaller.org/downloads/</a></p>

<p> Extract to c:\RubyDevKit</p>

<p> Change into this folder and run</p>

<pre><code> ruby dk.rb init
 ruby dk.rb install
</code></pre>

<p> If you do not install the Ruby devkit then you will get an error when running setting up Octopress and running gem in step 5):</p>

<pre><code> Gem::InstallError: The 'posix-spawn' native gem requires installed build tools.
</code></pre></li>
<li><p>Clone octopress</p>

<pre><code> git://GitHub.com/imathis/octopress.git octopress
</code></pre></li>
<li><p>Setup Octopress</p>

<p> Open a command prompt in the octopress folder. Run the following commands</p>

<pre><code> gem install bundler
 bundle install
 rake install
 rake generate
 rake preview
</code></pre>

<p> Then open a browser and go to <a href="http://localhost:4000">http://localhost:4000</a> to view your blog.</p></li>
<li><p>Create a GitHub repository for your blog</p>

<p> See the <a href="http://octopress.org/docs/deploying/github/">Octopress guide</a>.</p>

<p> Create a new repository in GitHub that has your GitHub username followed by .github.com (e.g. mrward.github.com).</p></li>
<li><p>Deploy your blog to GitHub</p>

<p> From the octopress folder run</p>

<pre><code> rake setup_GitHub_pages
 rake generate
 rake deploy
</code></pre>

<p> The deploy command will cause your blog to be pushed to the master branch of your GitHub repository. Your blog will then be published and accessible via <a href="http://username.github.com">http://username.github.com</a> (where username is replaced with your GitHub username).</p>

<p> Then you will need to commit your changes made in the source branch and push them to GitHub.</p>

<p> You now have a repository on GitHub containing your blog. It will have two branches master and source. The master branch contains your blog web pages. The source branch contains the octopress files and your original blog posts. On your local machine the master branch will exist in the _deploy folder. The octopress folder will be tracking the source branch.</p></li>
<li><p>Configure your blog</p>

<p> You will want to configure various settings, such as google analytics, for your blog. The <a href="http://octopress.org/docs/configuring/">documentation on the Octopress site</a> has the full details on how to configure everything.</p></li>
<li><p>Creating blog posts</p>

<p> From the Octopress folder run:</p>

<pre><code> rake new_post["Name of your post"]
</code></pre>

<p> This will generate a file in the source\_posts folder which you can edit.</p>

<p> To generate your blog and preview it in the browser run</p>

<pre><code> rake generate
 rake preview
</code></pre>

<p> The generate command will regenerate your blog web pages in the public folder. You will need to copy these files to the _deploy folder. The final step is then to commit and push your changes to GitHub. You will want to commit the changes made in the Octopress folder (i.e. the source branch) and also your blog pages in the _deploy folder (i.e. the master branch). You can use the rake deploy command to automate this copying of pages, committing and pushing your blog web pages to GitHub but if you want more control over the commit message then you can do this final set of steps yourself and commit the pages using your favourite Git client.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ExecutionEngineException thrown when using Code Contracts]]></title>
    <link href="http://lastexitcode.com/blog/2012/09/25/ExecutionEngineExceptionThrownWhenUsingCodeContracts/"/>
    <updated>2012-09-25T17:35:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2012/09/25/ExecutionEngineExceptionThrownWhenUsingCodeContracts</id>
    <content type="html"><![CDATA[<p>Whilst changing the Entity Framework 5.0 NuGet package to work with <a href="http://www.icsharpcode.net/OpenSource/SD/">SharpDevelop</a> a custom build of the NuGet package was causing Visual Studio 2010 to crash when the package was being installed. Debugging the crash by attaching another instance of Visual Studio revealed that an <a href="http://msdn.microsoft.com/en-us/library/system.executionengineexception.aspx">ExecutionEngineException</a> was being thrown when the following line of code was being executed.</p>

<pre><code>Contract.Requires(project != null);
</code></pre>

<p>The exception itself had no other information. The exception&rsquo;s message just repeated the exception that was being thrown: &ldquo;Exception of type &lsquo;System.ExecutionEngineException&rsquo; was thrown.&rdquo;. This exception indicates an internal error occurred in the CLR execution engine.</p>

<p>The real problem is the use of <a href="http://research.microsoft.com/en-us/projects/contracts/">Code Contracts</a> and not following the <a href="http://entityframework.codeplex.com/documentation">Entity Framework documentation on how to build it from source code</a>.</p>

<p>The <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.contracts.contract.aspx">Contract</a> class is used to define required preconditions and postconditions for a method and is used when defining Code Contracts. It is part of the .NET Framework 4.0 and can be found in mscorlib.dll in the System.Diagnostics.Contracts namespace.</p>

<p>The problem with the custom build of Entity Framework is that there are parts of Code Contracts included with .NET Framework 4.0 so you can compile a project that uses Code Contracts without any errors but on running the application you can have an ExecutionEngineException thrown. This can occur if you do not have the <a href="http://msdn.microsoft.com/en-us/devlabs/dd491992.aspx">Code Contracts Visual Studio extension</a> installed when the project is built. With this extension installed your assembly will be modified when it is compiled by the code contracts binary rewriter.  The rewriter will inject the contracts into your assembly so the checks will be run when the code is executed.</p>

<h2>Solution</h2>

<p>To get around this problem you have two options.</p>

<ol>
<li><p>Install the <a href="http://msdn.microsoft.com/en-us/devlabs/dd491992.aspx">Code Contracts</a> Visual Studio extension and then rebuild your project. After installing you should have a Code Contracts page in your project options.</p></li>
<li><p>Remove <a href="http://msmvps.com/blogs/luisabreu/archive/2008/11/12/code-contracts-and-runtime-rewriting.aspx">CONTRACTS_FULL</a> from the conditional compilation symbols in the project&rsquo;s options.</p></li>
</ol>


<p>CONTRACTS_FULL is used to enable runtime checking of the code contracts. If this is not defined then the calls made to the any of Contract methods are ignored by the compiler when building your project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET MVC 3 T4 Template Properties]]></title>
    <link href="http://lastexitcode.com/blog/2011/10/13/T4TemplatePropertiesAspNetMvc3/"/>
    <updated>2011-10-13T21:30:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2011/10/13/T4TemplatePropertiesAspNetMvc3</id>
    <content type="html"><![CDATA[<p>Here are the properties that ASP.NET MVC 3.0 provides to T4 templates when you use the Add View and Add Controller dialogs inside Visual Studio 2010.</p>

<h2>Add Controller</h2>

<table class="article" title="T4 template controller properties for ASP.NET MVC 3.0">
  <thead>
    <tr>
      <th>Property Name</th>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>AddActionMethods</td>
      <td>Boolean</td>
      <td>Adds action methods to the generated controller 
      class.</td>
    </tr>
    <tr>
      <td>AreaName</td>
      <td>System.String</td>
      <td>The name of the Area that the controller is created 
      for.</td>
    </tr>
    <tr>
      <td>ContextType</td>
      <td>System.Type</td>
      <td>The type of the data context.</td>
    </tr>
    <tr>
      <td>ControllerName</td>
      <td>String</td>
      <td>The name of the controller class that will be 
      generated.</td>
    </tr>
    <tr>
      <td>ControllerRootName</td>
      <td>String</td>
      <td>The name of the controller class excluding the Controller 
      part at the end of the name.</td>
    </tr>
    <tr>
      <td>EntitySetName</td>
      <td>String</td>
      <td>Name of the property on the data context class containing 
      the set of entities.</td>
    </tr>
    <tr>
      <td>ModelType</td>
      <td>System.Type</td>
      <td>The type of the model class specified in the Add 
      Controller dialog.</td>
    </tr>
    <tr>
      <td>Namespace</td>
      <td>String</td>
      <td>Namespace that will be used for the generated controller 
      class.</td>
    </tr>
    <tr>
      <td>PrimaryKeys</td>
      <td>
        PrimaryKey[]
        <br />
        (Microsoft.
        <br />
        VisualStudio.
        <br />
        Web.Mvc.
        <br />
        Scaffolding.
        <br />
        BuiltIn)
      </td>
      <td>Primary keys for the model. See table at end for 
      PrimaryKey properties.</td>
    </tr>
    <tr>
      <td>RelatedProperties</td>
      <td>
        Dictionary&lt;String,
        <br />
        RelatedModel
        <br />
        (Microsoft.
        <br />
        VisualStudio.
        <br />
        Web.
        <br />
        Mvc.
        <br />
        Scaffolding.
        <br />
        BuiltIn)&gt;
      </td>
      <td>Related properties on the model. See table at end for 
      RelatedModel properties.</td>
    </tr>
  </tbody>
</table>


<h2>Add View</h2>

<table class="article" title="T4 template view properties for ASP.NET MVC 3.0">
  <thead>
    <tr>
      <th>Property Name</th>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>AreaName</td>
      <td>System.String</td>
      <td>The name of the Area that the view is being created 
      for.</td>
    </tr>
    <tr>
      <td>ContentPlaceHolderIDs</td>
      <td>List&lt;string&gt;</td>
      <td>List of content place holder IDs in the master page.</td>
    </tr>
    <tr>
      <td>IsContentPage</td>
      <td>Boolean</td>
      <td>True if the generated view will be created with a master 
      page or a Razor layout page.</td>
    </tr>
    <tr>
      <td>IsPartialView</td>
      <td>Boolean</td>
      <td>True if the generated view is a partial view (e.g. an 
      ASP.NET user control).</td>
    </tr>
    <tr>
      <td>MasterPageFile</td>
      <td>String</td>
      <td>Master page file or Razor layout to be used with view 
      (e.g. ~/Views/Shared/Site.Master).</td>
    </tr>
    <tr>
      <td>Namespace</td>
      <td>String</td>
      <td>Namespace that will be used for the generated view.</td>
    </tr>
    <tr>
      <td>PrimaryContentPlaceHolderID</td>
      <td>String</td>
      <td>Primary content place holder ID to be used when creating 
      a view using a master page.</td>
    </tr>
    <tr>
      <td>ReferenceScriptLibraries</td>
      <td>Boolean</td>
      <td>True if checked in the Add View dialog.</td>
    </tr>
    <tr>
      <td>ViewDataType</td>
      <td>System.Type</td>
      <td>The view model&apos;s type.</td>
    </tr>
    <tr>
      <td>ViewDataTypeName</td>
      <td>String</td>
      <td>Fully qualified name for the view model&apos;s type.</td>
    </tr>
    <tr>
      <td>ViewName</td>
      <td>String</td>
      <td>Name of the view.</td>
    </tr>
  </tbody>
</table>


<h2>Common Properties</h2>

<table class="article" title="T4 template common properties for ASP.NET MVC 3.0">
  <thead>
    <tr>
      <th>Property Name</th>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>AssemblyPath</td>
      <td>List&lt;string&gt;</td>
      <td>List of assemblies referenced by the project and the 
      project&apos;s output assembly. Internal use.</td>
    </tr>
    <tr>
      <td>Errors</td>
      <td>
        CompilerErrorCollection
        <br />
        (System.CodeDom.Compiler)
      </td>
      <td>Used to stored errors that occur whilst processing the T4 
      template. Internal use.</td>
    </tr>
    <tr>
      <td>FileEncoding</td>
      <td>System.Text.Encoding</td>
      <td>The encoding of the file that will be generated.</td>
    </tr>
    <tr>
      <td>FileExtension</td>
      <td>String</td>
      <td>Not set.</td>
    </tr>
    <tr>
      <td>FrameworkVersion</td>
      <td>System.Version</td>
      <td>The .NET framework version.</td>
    </tr>
    <tr>
      <td>OutputFileExtension</td>
      <td>System.String</td>
      <td>The extension of the file that will be generated.</td>
    </tr>
    <tr>
      <td>TemplateFile</td>
      <td>System.String</td>
      <td>The full path to the T4 template file being used.</td>
    </tr>
  </tbody>
</table>


<h2>Primary Key Properties</h2>

<table class="article" title="T4 template common properties for ASP.NET MVC 3.0">
  <thead>
    <tr>
      <th>Property Name</th>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Name</td>
      <td>String</td>
      <td/>
    </tr>
    <tr>
      <td>ShortTypeName</td>
      <td>String</td>
      <td/>
    </tr>
    <tr>
      <td>Type</td>
      <td>System.Type</td>
      <td/>
    </tr>
  </tbody>
</table>


<h2>Related Model Properties</h2>

<table class="article" title="T4 template common properties for ASP.NET MVC 3.0">
  <thead>
    <tr>
      <th>Property Name</th>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>DisplayPropertyName</td>
      <td>String</td>
      <td/>
    </tr>
    <tr>
      <td>EntitySetName</td>
      <td>String</td>
      <td/>
    </tr>
    <tr>
      <td>ForeignKeyPropertyName</td>
      <td>String</td>
      <td/>
    </tr>
    <tr>
      <td>PrimaryKey</td>
      <td>String</td>
      <td/>
    </tr>
    <tr>
      <td>PropertyName</td>
      <td>String</td>
      <td/>
    </tr>
    <tr>
      <td>TypeName</td>
      <td>String</td>
      <td/>
    </tr>
  </tbody>
</table>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[T4 Import Directive - Namespace Alias]]></title>
    <link href="http://lastexitcode.com/blog/2011/10/04/T4ImportNamespaceAlias/"/>
    <updated>2011-10-04T19:54:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2011/10/04/T4ImportNamespaceAlias</id>
    <content type="html"><![CDATA[<p>How do you specify a namespace alias when using the <a href="http://msdn.microsoft.com/en-us/library/gg586948.aspx">Import directive</a> in a T4 template?</p>

<p>The <a href="http://msdn.microsoft.com/en-us/library/gg586948.aspx">Import directive</a> in a T4 template is used to bring a namespace  into scope for any code that will be run when the T4 template is processed. Here is an example template that imports the System.IO namespace without using a namespace alias.</p>

<pre><code>&lt;#@ template language="C#" #&gt; 
&lt;#@ output extension=".txt" #&gt; 
&lt;#@ import namespace="System.IO" #&gt; 
&lt;# 
 string text = File.ReadAllText(@"d:\MyFile.txt"); 
#&gt; 
File content: &lt;#= text #&gt;
</code></pre>

<p>The T4 template reads all the text in the d:\MyFile.txt which is then saved in the file generated by the template.</p>

<p>If you want to use a namespace alias you can specify it in the import directive in a similar way to how it is done with C# or VB.NET. Here is the example template modified so that an alias of IO is used for the System.IO namespace.</p>

<pre><code>&lt;#@ template language="C#" #&gt; 
&lt;#@ output extension=".txt" #&gt; 
&lt;#@ import namespace="IO = System.IO" #&gt; 
&lt;# 
 string text = IO.File.ReadAllText(@"d:\temp\test.xsd"); 
#&gt; 
File content: &lt;#= text #&gt;
</code></pre>

<h2>Why does this Work?</h2>

<p>T4 templates use the  <a href="http://msdn.microsoft.com/en-us/library/y2k85ax6.aspx">CodeDom</a> to generate C# or VB.NET code which is then executed as the template is processed. When the T4 templating engine processes the Import directive it creates a    <a href="http://msdn.microsoft.com/en-us/library/system.codedom.codenamespaceimport.aspx">CodeNamespaceImport</a> Object and passes it the Namespace attribute&apos;s value. The CodeNamespaceImport object supports generating a namespace alias when you specify a string of the form &quot;Alias = Namespace&quot; and pass this to its constructor.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a JavaScript Parser with ANTLR that can be used from CSharp]]></title>
    <link href="http://lastexitcode.com/blog/2011/08/21/UsingAntlrJavascriptParserInCSharp/"/>
    <updated>2011-08-21T19:30:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2011/08/21/UsingAntlrJavascriptParserInCSharp</id>
    <content type="html"><![CDATA[<p>How do you create a JavaScript parser that you can use from C#? One way is to use <a href="http://www.antlr.org/about.html">ANTLR</a>. ANother Tool for Language Recognition (ANTLR) is a parser generated created and maintained by Terence Parr.</p>

<p>The ANTLR website has a JavaScript grammar already defined so we will take that grammar, get ANTLR to create a parser, and then use that parser to parse some JavaScript code. The following guide is based on using <a href="http://www.antlr.org/works/index.html">ANTLRWorks 1.4.2</a>, which includes ANTLR 3.3, and the CSharp3 code generator version 3.3.1.</p>

<h2>Installing ANTLR</h2>

<ol>
<li>Install the <a href="http://www.oracle.com/technetwork/java/javase/downloads/index-jdk5-jsp-142662.html">Java JDK 1.5</a>. Newer versions than 1.5 may work with ANTLR.</li>
<li>Download <a href="http://www.antlr.org/download/antlrworks-1.4.2.jar">ANTLRWorks 1.4.2</a> (which includes Antlr 3.3).</li>
</ol>


<p>Check ANTLRWorks can be started by either double clicking the antlrworks-1.4.2.jar file or opening a command prompt and running the following command.</p>

<pre><code>java -jar antlrworks-1.4.2.jar
</code></pre>

<h2>Generating a JavaScript Parser</h2>

<p>Download a JavaScript grammar from <a href="http://www.antlr.org/grammar/list">http://www.antlr.org/grammar/list</a>](<a href="http://www.antlr.org/grammar/list">http://www.antlr.org/grammar/list</a>).</p>

<p>I used <a href="http://www.antlr.org/grammar/1206736738015/JavaScript.g">Chris Lambrou&rsquo;s JavaScript grammar</a> since this was the most recent.</p>

<p>Open the JavaScript.g file in ANTLRWorks by selecting Open from the File menu.</p>

<p>Edit the JavaScript.g file and add &ldquo;language=CSharp3&rdquo; to the options section.</p>

<pre><code>options 
{ 
    output=AST; 
    backtrack=true; 
    memoize=true; 
    language=CSharp3; 
}
</code></pre>

<p>The language determines what language the parser code will be generated in. To generate C# there are 3 choices for the language.</p>

<ol>
<li><a href="http://www.antlr.org/wiki/display/ANTLR3/Antlr+3+CSharp+Target">CSharp</a>  (.NET 1.1 code generated)</li>
<li>CSharp2 (.NET 2.0 code generated)</li>
<li><a href="http://www.antlr.org/wiki/display/ANTLR3/Antlr3CSharpReleases">CSharp3</a> (.NET 3 code generated)</li>
</ol>


<p>To specify a namespace for the generated C# classes add another line to the JavaScript.g file.</p>

<pre><code>@namespace { ICSharpCode.JavaScriptBinding }
</code></pre>

<p> In ANTLRWorks select Generate Code from the Generate menu. Three files should be generated in an output directory below where  JavaScript.g file is located</p>

<ul>
<li>JavaScript.tokens</li>
<li>JavaScriptLexer.cs</li>
<li>JavaScriptParser.cs</li>
</ul>


<p>The two C# files are the ones we are interested in and we will now take a look at how we can use them in a C# application.</p>

<h2>Using the JavaScript Parser</h2>

<p>The C# files that were generated depend on another set of assemblies.</p>

<p>If you generated code using the CSharp3 target then download the <a href="http://www.tunnelvisionlabs.com/downloads/antlr/antlr-dotnet-tool-3.3.1.7705.7z">CSharp3 assemblies</a>.</p>

<p>For code generated using the CSharp2 and CSharp then download <a href="http://www.antlr.org/download/CSharp">CSharp2 assemblies</a>.</p>

<p>In both cases the assembly you need is Antlr3.Runtime.dll so extract that file from the downloaded zip file.</p>

<p>Now we need to use our parser and lexer.</p>

<p>Create a C# console project and add the JavaScriptLexer.cs and JavaScriptParser.cs files into the project. Add a reference to the Antlr3.Runtime.dll.</p>

<p>Compile the project.</p>

<p>If you receive an error about HIDDEN being undefined then rename HIDDEN to Hidden in the JavaScriptLexer.cs file.</p>

<p>Remove the &ldquo;[System.CLSCompliant(false)]&rdquo; from the lexer and parser files to fix the warning about not requiring CLSCompliant to be set.</p>

<p>In order to get access to the results the parser generates you will need to make a modification to the JavaScriptParser.cs. Make the program() method public, as shown below.</p>

<pre><code>public JavaScriptParser.program_return program()
</code></pre>

<p>If you generate the parser and lexer as java source code files this method is public but for it is private when using any of the CSharp targets.</p>

<p>The correct way to fix the problem with the program method being private is to modify the JavaScript grammar file. If you add the public keyword to JavaScript.g grammar file as shown below then after regenerating the lexer and parser files using ANTLRWorks the  program method will be public.</p>

<pre><code> public program 
      : LT!* sourceElements LT!* EOF! 
      ; 
</code></pre>

<p>Now how do we use the parser? The following code shows you  how.</p>

<pre><code>using System; 
using Antlr.Runtime; 
using Antlr.Runtime.Tree; 
using ICSharpCode.JavaScriptBinding; 

namespace JavaScriptParserConsole 
{ 
    class Program 
    { 
        public static void Main(string[] args) 
        { 
            try { 
                string text = "var a = 1;"; 

                var stream = new ANTLRStringStream(text); 
                var lexer = new JavaScriptLexer(stream); 
                var tokenStream = new CommonTokenStream(lexer); 
                var parser = new JavaScriptParser(tokenStream); 
                JavaScriptParser.program_return programReturn = parser.program(); 

            } catch (Exception ex) { 
                Console.WriteLine(ex.ToString()); 
            } 

            Console.Write("Press any key to continue..."); 
            Console.ReadKey(true); 
        } 
    } 
} 
</code></pre>

<p>First we have some JavaScript code to parse. In this case we have a simple variable assignment. This JavaScript code is then passed to a ANTLRStringStream class. The lexer takes this stream and produces a set of tokens. We turn the lexer into a CommonTokenStream and then this is passed to the parser. The program_return class returned from the parser is an <a href="http://en.wikipedia.org/wiki/Abstract_syntax_tree">Abstract Syntax Tree</a> (AST). Getting access to the AST will depend on how the grammar has been defined. In the JavaScript grammar the top part of the AST is called program.</p>

<pre><code>  public program 
      : LT!* sourceElements LT!* EOF! 
      ;
</code></pre>

<p>This maps to a method called program in our parser class.</p>

<p>Does a grammar always create an AST? It depends on the grammar options. For the JavaScript grammar we are using:</p>

<pre><code>options 
{ 
    output=AST; 
    backtrack=true; 
    memoize=true; 
    language=CSharp3; 
}
</code></pre>

<p>The output is defined to be AST so ANTLR generates classes to produce an AST after parsing the source code. There are two <a href="http://www.antlr.org/wiki/display/ANTLR3/Grammar+options">options</a> for output: AST and template. If this option is not specified the default is AST.</p>

<p>Now we still have not done anything useful with the parse results. So let us display the AST.</p>

<pre><code>using System; 
using Antlr.Runtime; 
using Antlr.Runtime.Tree; 
using ICSharpCode.JavaScriptBinding; 

namespace JavaScriptParserConsole 
{ 
    class Program 
    { 
        public static void Main(string[] args) 
        { 
            try { 
                string text = "var a = 1;"; 

                var stream = new ANTLRStringStream(text); 
                var lexer = new JavaScriptLexer(stream); 
                var tokenStream = new CommonTokenStream(lexer); 
                var parser = new JavaScriptParser(tokenStream); 
                JavaScriptParser.program_return programReturn = parser.program(); 

                var tree = programReturn.Tree as CommonTree; 
                WriteTree(tree); 

            } catch (Exception ex) { 
                Console.WriteLine(ex.ToString()); 
            } 

            Console.Write("Press any key to continue..."); 
            Console.ReadKey(true); 
        } 

        static void WriteTree(CommonTree tree) 
        { 
            WriteLine("Tree.Text: " + tree.Text); 
            WriteLine("Tree.Type: " + tree.Type); 
            WriteLine("Tree.Line: " + tree.Line); 
            WriteLine("Tree.CharPositionInLine: " + tree.CharPositionInLine); 
            WriteLine("Tree.ChildCount: " + tree.ChildCount); 
            WriteLine(""); 

            if (tree.Children != null) { 
                IncreaseIndent(); 
                foreach (CommonTree child in tree.Children) { 
                    WriteTree(child); 
                } 
                DecreaseIndent(); 
            } 
        } 

        static int indent = 0; 

        static void WriteLine(string text) 
        { 
            string indentText = String.Empty.PadRight(indent * 2); 
            Console.WriteLine(indentText + text); 
        } 

        static void IncreaseIndent() 
        { 
            indent++; 
        } 

        static void DecreaseIndent() 
        { 
            indent--; 
        } 
    } 
} 
</code></pre>

<p>We have taken the program_return class that is returned from the parser&rsquo;s program method and displayed its tree.</p>

<pre><code>public class program_return 
    : ParserRuleReturnScope&lt;IToken&gt;, IAstRuleReturnScope&lt;object&gt; 
{ 
    private object _tree; 
    public object Tree { 
        get { return _tree; } 
        set { _tree = value; } 
    } 
}
</code></pre>

<p>The Tree property is a CommonTree but by default ANTLR returns this as an object. We then pass this tree to a method that displays a few properties from the tree and then looks at the tree&rsquo;s children and displays them. Each child is also a tree so we call the WriteTree method recursively. With the simple javascript code of &ldquo;var a = 1;&rdquo; we get the following output when running this code:</p>

<pre><code>Tree.Text: 
Tree.Type: 0 
Tree.Line: 1 
Tree.CharPositionInLine: 0 
Tree.ChildCount: 4 

  Tree.Text: var 
  Tree.Type: 37 
  Tree.Line: 1 
  Tree.CharPositionInLine: 0 
  Tree.ChildCount: 0 

  Tree.Text: a 
  Tree.Type: 5 
  Tree.Line: 1 
  Tree.CharPositionInLine: 4 
  Tree.ChildCount: 0 

  Tree.Text: = 
  Tree.Type: 39 
  Tree.Line: 1 
  Tree.CharPositionInLine: 6 
  Tree.ChildCount: 0 

  Tree.Text: 1 
  Tree.Type: 7 
  Tree.Line: 1 
  Tree.CharPositionInLine: 8 
  Tree.ChildCount: 0 
</code></pre>

<p>Can we specify the type of the Tree? The answer is yes. In the  JavaScript grammar we can specify the type to be used for the Tree property by using the ASTLabelType.</p>

<pre><code>options 
{ 
    output=AST; 
    backtrack=true; 
    memoize=true; 
    ASTLabelType=CommonTree; 
    language=CSharp3; 
} 
</code></pre>

<p>So we can set the tree&rsquo;s type to be CommonTree and we would not need to convert the Tree property from an Object to a CommonTree each time. With this change made the lexer and parser class files need to be regenerated with AntlrWorks. We also have to make the fixes described above (HIDDEN and ClsCompliant) to the generated code.</p>

<p>Now the program_return class has been changed:</p>

<pre><code>public class program_return 
    : ParserRuleReturnScope&lt;IToken&gt;, IAstRuleReturnScope&lt;CommonTree&gt; 
{ 
    private CommonTree _tree; 
    public CommonTree Tree {
        get { return _tree; } 
        set { _tree = value; }
    } 
} 
</code></pre>

<p>Unfortunately this code does not compile and we get the error shown below.</p>

<p>Error CS0738:  &lsquo;ICSharpCode.JavaScriptBinding.JavaScriptParser.program_return&rsquo; does not implement interface member &lsquo;Antlr.Runtime.IAstRuleReturnScope.Tree&rsquo;. ICSharpCode.JavaScriptBinding.JavaScriptParser.program_return.Tree&#8217; cannot implement &lsquo;Antlr.Runtime.IAstRuleReturnScope.Tree&rsquo; because it does not have the matching return type of &lsquo;object&rsquo;.</p>

<p>Looking at the interface definitions it looks like there is a problem with the code generation since the new program_return class does not implement the IAstRuleReturnScope interface completely:</p>

<pre><code>public interface IAstRuleReturnScope&lt;TAstLabel&gt; 
    : IAstRuleReturnScope, IRuleReturnScope 
{ 
    TAstLabel Tree 
    { 
        get; 
    } 
} 

public interface IAstRuleReturnScope : IRuleReturnScope 
{ 
    object Tree 
    { 
        get; 
    } 
}
</code></pre>

<p>So we will have to switch back to not defining the tree&rsquo;s type by not using the ASTLabelType option.</p>

<h2>Summary</h2>

<p>In summary we have taken an existing JavaScript grammar, generated a parser using ANTLR and then used this parser to parse some JavaScript code and display the results held in the AST.</p>
]]></content>
  </entry>
  
</feed>
