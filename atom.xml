<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Matt Ward]]></title>
  <link href="http://lastexitcode.com/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2017-11-08T17:23:33+00:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.2]]></title>
    <link href="http://lastexitcode.com/blog/2017/11/08/NetCoreSupportInVisualStudioMac7-2/"/>
    <updated>2017-11-08T15:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2017/11/08/NetCoreSupportInVisualStudioMac7-2</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Support NuGet package fallback folders</li>
<li> Support AssetTargetFallback</li>
<li> Xamarin.Forms 2.4 support (VS for Mac 7.2.2)</li>
<li> Fixed transitive types from references not being available</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.2</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-october-9-2017---visual-studio-2017-for-mac-720636">release notes</a>.</p>

<h2>NuGet package fallback folders support</h2>

<p>The .NET Core SDK 2.0 defines a NuGet package fallback folder <code>/usr/local/share/dotnet/sdk/NuGetFallbackFolder</code> that can be used when looking
for NuGet packages whilst restoring. This fallback folder is now supported by
Visual Studio for Mac 7.2 so that on restoring a .NET Core 2.0 project the NuGet
packages from the fallback folder will be found and do not need to be downloaded from nuget.org into the
local machine NuGet package cache <code>~/.nuget/packages</code>. This should speed up NuGet package restore for .NET Core 2.0 and .NET Standard 2.0 projects the first time it occurs.</p>

<p>As well as the NuGet fallback folders Visual Studio for Mac will now add the following items to the generated project.assets.json
if they are available:</p>

<ul>
<li>configFilePaths</li>
<li>sources</li>
<li>warningProperties</li>
</ul>


<h2>AssetTargetFallback support</h2>

<p>The .NET Core 2.0 SDK uses an AssetTargetFallback MSBuild property
defined in an imported SDK MSBuild files. This is used instead
of the PackageTargetFallback property when determining if a NuGet
package is compatible. Currently the AssetTargetFallback property
is set to net461 by the .NET Core 2.0 SDK which allows .NET Core projects to use NuGet
packages that include assemblies that target the full .NET Framework.
The supported fallback frameworks are now added to the generated
project.assets.json file by Visual Studio for Mac when a .NET Core 2.0 project is restored.</p>

<h2>NuGet package restore now fails if package and asset target fallbacks are defined by a project</h2>

<p>If both AssetTargetFallback and PackageTargetFallback are defined by a project then the
NuGet restore will fail with an error indicating that they cannot
be used together. This mirrors the behaviour of the .NET Core command
line restore.</p>

<h2>Mark implicit PackageReferences as auto referenced</h2>

<p>PackageReference items that have IsImplicitlyDefined set to true
in their metadata now have autoRefererenced set to true in the project.assets.json file.</p>

<h2>Support parsing MSBuild conditions with unquoted properties</h2>

<p>The .NET Core 2.0 SDK uses conditions that pass properties to the
Exists function without using single quotes around the MSBuild property.
This is now supported by Visual Studio for Mac.</p>

<pre><code>&lt;PropertyGroup Condition="Exists($(FileName))"&gt;
</code></pre>

<h2>Xamarin.Forms 2.4 support</h2>

<p>The following sections cover bug fixes made in Visual Studio for Mac 7.2.2
to improve support for <a href="https://developer.xamarin.com/releases/xamarin-forms/xamarin-forms-2.4/2.4.0-stable/">Xamarin.Forms 2.4</a> and later versions. Xamarin.Forms 2.4 includes .NET Standard support as well as defining default MSBuild items for
.NET Core and .NET Standard projects. These default MSBuild items were not
handled by Visual Studio for Mac 7.2.0 and earlier versions. The main symptoms of Visual Studio for Mac not supporting Xamarin.Forms 2.4 were:</p>

<ul>
<li>Duplicate .xaml files in the Solution window.</li>
<li>Nesting of .xaml and .xaml.cs files not working in Solution window.</li>
<li>MSBuild items incorrectly added to SDK style projects.</li>
</ul>


<h3>Generated NuGet files being imported twice</h3>

<p>The generated NuGet files, .nuget.g.targets and .nuget.g.props,
that are created for .NET Core projects were being imported twice.
Once by Microsoft.Common.props, that is provided with Mono, and once
by Visual Studio for Mac.</p>

<p>This double import was causing a duplicate file
to be added to the
project when Xamarin.Forms 2.4
was used in a .NET Standard project and the .NET Core SDK was not
installed. This would result in the .xaml file and associated
.xaml.cs file not being nested in the solution window.</p>

<h3>MSBuild items added when new xaml file added to project</h3>

<p>Adding a new Xamarin.Forms content page with XAML would incorrectly add an
update item to the project for the .xaml.cs file when an SDK style project
was used.</p>

<p>When a new .xaml file was added to an SDK style project a None item as well as an EmbeddedResource item would incorrectly be added to the project file.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;None Remove="MyView.xaml" /&gt;
</span><span class='line'>
</span><span class='line'>&lt;EmbeddedResource Include="MyView.xaml"&gt;
</span><span class='line'>  &lt;Generator&gt;MSBuild:UpdateDesignTimeXaml"&lt;/Generator&gt;
</span><span class='line'>&lt;/EmbeddedResource&gt;</span></code></pre></td></tr></table></div></figure>


<h3>Compile item added with DependentUpon metadata</h3>

<p>Xamarin.Forms 2.4 defines a wildcard update similar to:</p>

<pre><code>&lt;Compile Update="**\*.xaml.cs" DependentUpon="%(Filename)" /&gt;
</code></pre>

<p>When a project was saved in Visual Studio for Mac a Compile item was
incorrectly added to the main project with the evaluated value stored in the
DependentUpon element.</p>

<h3>DependentUpon being evaluated incorrectly</h3>

<p>Metadata defined for wildcard MSBuild items were being evaluated using
the wildcard item instead of the expanded item. This
was causing .xaml.cs files to not be nested in the Solution window
for Xamarin.Forms 2.4.</p>

<p>Xamarin.Forms 2.4 defines an update item similar to:</p>

<pre><code>&lt;Compile Update="**\*.xaml.cs" DependentUpon="%(Filename)" /&gt;
</code></pre>

<p>The DependentUpon property was evaluated using the wildcard item
which resulted in the DependentUpon property being
evaluated as &lsquo;*.xaml.cs&rsquo; instead of the filename of the item that was
updated by the wildcard.</p>

<h3>Define MSBuildSDKsPath for MSBuild engine host</h3>

<p>MSBuild when run on the command line defines the MSBuildSDKsPath in
its MSBuild.dll.config file. The MSBuild engine host that is used
when building with Visual Studio for Mac now also defines the MSBuildSDKsPath property. Previously this was not being defined.</p>

<p>This fixes a build error when using Xamarin.Forms 2.4.0 in an SDK style
project that targets .NET Standard. Xamarin.Forms 2.4.0 uses default
item imports which were not being included since they are conditionally
imported based on the MSBuildSDKsPath property value:</p>

<pre><code>&lt;Import Project="$(MSBuildThisFileDirectory)Xamarin.Forms.DefaultItems.props" 
    Condition="'$(MSBuildSDKsPath)'!=''" /&gt;
</code></pre>

<p>If the SDK style project had a .xaml file and a .xaml.cs file then
the .xaml.g.cs file was not being generated when the project had no files
explicitly defined in the project file. This
then caused a build error about the InitializeComponent method not
being defined.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed transitive assembly references not available until restart</strong></p>

<p>Given a solution that contains three .NET Standard projects: LibC
references LibB which references LibA. If the Newtonsoft.Json NuGet
package was installed into LibA the types from this NuGet package
were not available in LibB or LibC until the solution was closed and
re-opened again. Closing and re-opening the solution refreshes the
reference information used by the type system. Now when a NuGet
package is installed into a .NET Core project the projects that
reference this project have their reference information refreshed. Types from
the installed NuGet packages are then available in projects that
reference this updated project either directly or indirectly.</p>

<p><strong>Fixed transitive project references after editing a project file</strong></p>

<p>Given a solution that contains three .NET Standard projects: LibC references
LibB which references LibA. If a NuGet package is added to LibA by
editing its project file in the text editor the types from this NuGet
package were not available to LibB or LibC without restarting Visual Studio
for Mac or until the packages were restored for the solution. Now when the project file
is saved the projects that directly or indirectly reference the project
will be restored.</p>

<p><strong>Ignore project references with ReferenceOutputAssembly set to false when restoring</strong></p>

<p>Project references that have ReferenceOutputAssembly are now not
added to the project.assets.json file. This was causing
the NuGet package restore to fail in some cases. For example, if a .NET Standard
project has a project reference to a .NET Core App project, but has the
ReferenceOutputAssembly set to false, then running dotnet restore from the
command line would work, but the restore would fail in Visual Studio for Mac.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.2]]></title>
    <link href="http://lastexitcode.com/blog/2017/10/28/NuGetSupportInVisualStudioMac7-2/"/>
    <updated>2017-10-28T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/10/28/NuGetSupportInVisualStudioMac7-2</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 4.3.1 support</li>
<li> NuGet fallback folders support</li>
<li> AssetTargetFallback support</li>
<li> NuGet operations can be cancelled on closing the solution</li>
<li> Fixed transitive types from references not being available</li>
<li> Fixed credential dialog being shown multiple times on opening a solution</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.2</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-october-9-2017---visual-studio-2017-for-mac-720636">release notes</a>.</p>

<h2>NuGet 4.3.1 support</h2>

<p>NuGet 4.3.1.4445 is now included with Visual Studio for Mac 7.2.</p>

<p>NuGet 4.3.1 includes <a href="https://github.com/NuGet/Home/issues/5806">a fix for imports in the project.json file being ignored</a> which could cause a NuGet package
to incorrectly be considered incompatible when restoring NuGet packages.</p>

<h2>NuGet package fallback folders support</h2>

<p>The .NET Core SDK 2.0 defines a NuGet package fallback folder <code>/usr/local/share/dotnet/sdk/NuGetFallbackFolder</code> that can be used when looking
for NuGet packages whilst restoring. This fallback folder is now supported by
Visual Studio for Mac 7.2 so that on restoring a .NET Core 2.0 project the NuGet
packages from the fallback folder will be found and do not need to be downloaded from nuget.org into the
local machine NuGet package cache <code>~/.nuget/packages</code>. This should speed up NuGet package restore for .NET Core 2.0 and .NET Standard 2.0 projects the first time it occurs.</p>

<p>As well as the NuGet fallback folders Visual Studio for Mac will now add the following items to the generated project.assets.json
if they are available:</p>

<ul>
<li>configFilePaths</li>
<li>sources</li>
<li>warningProperties</li>
</ul>


<h2>AssetTargetFallback support</h2>

<p>The .NET Core 2.0 SDK uses an AssetTargetFallback MSBuild property
defined in an imported SDK MSBuild files. This is used instead
of the PackageTargetFallback property when determining if a NuGet
package is compatible. Currently the AssetTargetFallback property
is set to net461 by the .NET Core 2.0 SDK which allows .NET Core projects to use NuGet
packages that include assemblies that target the full .NET Framework.
The supported fallback frameworks are now added to the generated
project.assets.json file by Visual Studio for Mac when a .NET Core 2.0 project is restored.</p>

<h2>NuGet operations can be cancelled on the closing the solution</h2>

<p>Previously when closing the solution, or closing Visual Studio for Mac, when a NuGet package
operation was still running would result in a dialog being displayed saying that the
solution cannot be closed until the NuGet operation was completed.
NuGet v3 and above now allow the NuGet
operations to be cancelled so now the dialog allows the current
operation to be cancelled. If the
operation is taking a while to cancel a busy spinner image will be displayed in
the dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac7-2/CancelNuGetOperationOnClosingSolutionDialog.png" title="Cancel NuGet operation dialog on closing solution" alt="Cancel NuGet operation dialog on closing solution"></p>

<p>If a restore is being run when the solution
will be closed the restore will be cancelled automatically without showing the dialog.</p>

<h2>NuGet package restore now fails if package and asset target fallbacks are defined by a project</h2>

<p>If both AssetTargetFallback and PackageTargetFallback are defined by a project then the
NuGet restore will fail with an error indicating that they cannot
be used together. This mirrors the behaviour of the .NET Core command
line restore.</p>

<h2>Support imported package references in non .NET Core projects</h2>

<p>If a non .NET Core project had no PackageReference items but imported a file that
did have PackageReference items the NuGet packages were not restored
on opening the solution. This was because only the PackageReference
items defined directly in the project were checked to determine if the
project used NuGet packages. Now the evaluated MSBuild items are checked
so any imported PackageReference items are detected and a restore
will be run on opening the solution.</p>

<p>Note that imported PackageReference items are not displayed in the
Packages folder.</p>

<h2>Package Console is no longer opened when a NuGet operation is cancelled</h2>

<p>When a NuGet operation is cancelled from the main status bar the
Package Console is now not opened when the NuGet operation fails due
to the cancellation. If the NuGet operation is not cancelled then the
Package Console window will still be opened as before if the operation fails.
This is also a workaround for Visual Studio for Mac closing the currently displayed
dialog when the Package Console window opens after the NuGet operation
is cancelled when closing the solution.</p>

<h2>Whitespace is now trimmed when creating a new package source</h2>

<p>When creating a new package source copying and pasting NuGet package source url can sometimes copy extra
whitespace which can then result in NuGet package restore errors such as:</p>

<pre><code>Failed to verify the root directory of local source
' https://api.nuget.org/v3/index.json'.
</code></pre>

<p>The package source name and url will now have whitespace trimmed to avoid
this copy and paste problem. This also
matches Visual Studio on Windows behaviour.</p>

<h2>Mark implicit PackageReferences as auto referenced</h2>

<p>PackageReference items that have IsImplicitlyDefined set to true
in their metadata now have autoRefererenced set to true in the project.assets.json file.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed transitive assembly references not available until restart</strong></p>

<p>Given a solution that contains three .NET Standard projects: LibC
references LibB which references LibA. If the Newtonsoft.Json NuGet
package was installed into LibA the types from this NuGet package
were not available in LibB or LibC until the solution was closed and
re-opened again. Closing and re-opening the solution refreshes the
reference information used by the type system. Now when a NuGet
package is installed into a .NET Core project the projects that
reference this project have their reference information refreshed. Types from
the installed NuGet packages are then available in projects that
reference this updated project either directly or indirectly.</p>

<p><strong>Fixed transitive project references after editing a project file</strong></p>

<p>Given a solution that contains three .NET Standard projects: LibC references
LibB which references LibA. If a NuGet package is added to LibA by
editing its project file in the text editor the types from this NuGet
package were not available to LibB or LibC without restarting Visual Studio
for Mac or until the packages were restored for the solution. Now when the project file
is saved the projects that directly or indirectly reference the project
will be restored.</p>

<p><strong>Fixed credential dialog shown multiple times on opening a solution</strong></p>

<p>With check for updates enabled, multiple projects in the solution,
and a package source that was missing or had invalid credentials,
on opening the solution the credential dialog would be displayed multiple
times even if the correct username and password was entered or the
dialog was cancelled. The dialog was being displayed for each
project and the credential information was not being re-used.</p>

<p>Now the NuGet source repositories are re-used when checking
for updates and also when restoring the projects when the solution
is first opened. Any valid credentials entered will be re-used
when checking the remaining projects. If the credential dialog is
cancelled then the dialog is no longer displayed again whilst
checking for updates for the other projects.</p>

<p><strong>Fixed credential dialog displayed when credentials are available</strong></p>

<p>With valid credentials stored in the Mac key chain the credential dialog would
still be displayed when it should not have been. The problem was that the
NuGet credential service puts itself in a retry mode if any of the
credential providers are used when trying to authenticate against a
package source. Once in this retry mode the Visual Studio for Mac credential
provider would always show a dialog asking for the credentials instead
of re-using the existing credentials. To avoid this the credential
service is reset before any user actions, such as opening the Add Packages
dialog, running a restore or an update.</p>

<p><strong>Fixed crash when displaying Chinese characters in the Add Packages dialog</strong></p>

<p>With the NuGet v3 package source <a href="https://api.nuget.org/v3/index.json">https://api.nuget.org/v3/index.json</a>
selected, searching for Microsoft.AspNet.WebApi.Client would result in
the Visual Studio for Mac terminating when an attempt was made to display the results
in the Add Packages dialog.
The crash was in the Pango library when it attempted to determine the size of
the package title displayed in the search results. If the package
title contained Chinese characters then Pango would throw an exception:</p>

<pre><code>Illegal byte sequence encounted in the input.
at (wrapper managed-to-native) Pango.Layout:pango_layout_get_pixel_size (intptr,int&amp;,int&amp;)
</code></pre>

<p>Then when Visual Studio for Mac tried to use Pango again to determine the
size of the text this would result in Visual Studio for Mac terminating.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Pango-WARNING (recursed) **: shaping failure, expect ugly output.
</span><span class='line'>shape-engine='BasicEngineCoreText', font='.SF NS Text',
</span><span class='line'>text='∫ê'Stacktrace:
</span><span class='line'>
</span><span class='line'>  at &lt;unknown&gt; &lt;0xffffffff&gt;
</span><span class='line'>  at (wrapper managed-to-native) Pango.Layout.pango_layout_get_pixel_size (intptr,int&,int&) [0x0000b] in &lt;c7aa2d93df4045df8dc71d5439f99d72&gt;:0</span></code></pre></td></tr></table></div></figure>


<p>If the NuGet v2 package source was used then this crash did not occur
since the package title was not returned in the search results and the package id would be
displayed instead which does not contain Chinese characters.</p>

<p>As a workaround the Add Packages dialog now displays the package id
instead of the package title.</p>

<p><strong>Ignore project references with ReferenceOutputAssembly set to false when restoring</strong></p>

<p>Project references that have ReferenceOutputAssembly are now not
added to the project.assets.json file. This was causing
the NuGet package restore to fail in some cases. For example, if a .NET Standard
project has a project reference to a .NET Core App project, but has the
ReferenceOutputAssembly set to false, then running dotnet restore from the
command line would work, but the restore would fail in Visual Studio for Mac.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.1]]></title>
    <link href="http://lastexitcode.com/blog/2017/08/26/NuGetSupportInVisualStudioMac7-1/"/>
    <updated>2017-08-26T14:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/08/26/NuGetSupportInVisualStudioMac7-1</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> NuGet 4.3 support</li>
<li> Support PackageReference in non .NET Core projects</li>
<li> Enable file template when a NuGet package is installed</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.1</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-august-14-2017---visual-studio-for-mac-7101297">release notes</a>.</p>

<h2>NuGet 4.3 Support</h2>

<p>NuGet 4.3.0.2418 is now included with Visual Studio for Mac 7.1.</p>

<p>This version of NuGet adds support for .NET Core 2.0 and .NET Standard 2.0
target frameworks.</p>

<h2>Support PackageReference in non .NET Core projects</h2>

<p>Non .NET Core Sdk style projects that use a PackageReference MSBuild item are now supported.</p>

<pre><code>&lt;PackageReference Include="Newtonsoft.Json"&gt;
  &lt;Version&gt;10.0.1&lt;/Version&gt;
&lt;/PackageReference&gt;
</code></pre>

<p>In Visual Studio for Mac 7.0 the Solution
window would not show any packages for the project, would not allow
the packages to be restored, and would create a packages.config file when installing
a NuGet package even though the project was using PackageReferences.</p>

<p>Now if the project has a PackageReference the Packages folder
shows the installed packages and can be used to update or install
NuGet packages which will also create PackageReference MSBuild items.</p>

<p>If the project has no PackageReferences then by default a
packages.config file will be created when a NuGet package is installed.</p>

<p>Currently it is not possible to opt-in to using PackageReferences by default.
So the project file will need to be edited in the text editor to include at
least one PackageReference before the default behaviour of using a packages.config
file is overridden.</p>

<h2>Enable file template when a NuGet package is installed</h2>

<p>A file template can now specify that it should be enabled if the project
has a specific reference or has a specific NuGet package installed.
Previously it was only possible to enable a file template based on the
references defined in the project file.</p>

<pre><code>&lt;HasPackageOrReference PackageId="Xamarin.Forms" Assembly="Xamarin.Forms" /&gt;
</code></pre>

<p>Whilst a reference will work for projects that use a packages.config
file, if the project uses a project.json file or PackageReferences
then checking the references defined in the project would not find any matches and
the file template would not be enabled.</p>

<h2>Bug Fixes</h2>

<p><strong>Do not require description when creating a new NuGet package project</strong></p>

<p>When creating a NuGet package project or a multiplatform project the description
needed to be specified in the New Project dialog.</p>

<p>To simplify the project creation
process the package id is used as the description by default. As you type the
package id into the New Project dialog the description text
box will be updated. The description can be changed to be different
to the package id if required.</p>

<p><strong>Fix being unable to load NuGet Package Project created by Visual Studio on Windows</strong></p>

<p>Visual Studio on Windows creates a NuGet package project (.nuproj)
with no target framework version which resulted in 4.0 being used by
default in Visual Studio for Mac. This would cause the project to fail to
load in Visual Studio for Mac since it was checking for 4.5 or later.</p>

<p><strong>Fix no packages shown in Packages folder for NuGet Package Projects</strong></p>

<p>Opening a previously created NuGet package project (.nuproj) would show no
packages in the Packages folder.</p>

<p>The problem was that the PackageReference project item was defined by
both the NuGet addin and the Packaging addin. The NuGet addin&rsquo;s PackageReference
project item was used instead of the one defined by the Packaging addin so no
package references were found for the NuGet package project.</p>

<p><strong>Fix NuGet Package Project&rsquo;s MSBuild targets not being created</strong></p>

<p>If the NuGet package project&rsquo;s generated .nuget.targets or .nuget.props are missing
then these are now created on opening the solution if
automatic restore is enabled.</p>

<p><strong>Fix being unable to package .NET Standard projects</strong></p>

<p>A NuGet package project that referenced an Sdk style .NET Standard project
would fail to build the NuGet package. The build would fail with an error:</p>

<pre><code>Error: Project targets '.NETStandard,Version=v1.4'. It cannot be
referenced by a project that targets 'NuGet,Version=v1.0'
</code></pre>

<p>Updating to a more recent NuGet.Build.Packaging NuGet
package, such as version 0.1.276, fixes this problem.</p>

<p><strong>NuGet Package project treated as .NET Core project</strong></p>

<p>NuGet package projects (.nuproj) that use the NuGet.Build.Packaging
0.1.276 NuGet package define a TargetFramework property in an
imported MSBuild .props file. This was causing the project to
be treated as a .NET Core project by Visual Studio for Mac. This caused
the Dependencies folder to be displayed and the References folder
to be removed. Visual Studio for Mac now checks the project has the
Sdk attribute instead of looking at the MSBuild properties defined
by the project when determining the project type.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.1]]></title>
    <link href="http://lastexitcode.com/blog/2017/08/23/NetCoreSupportInVisualStudioMac7-1/"/>
    <updated>2017-08-23T21:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/08/23/NetCoreSupportInVisualStudioMac7-1</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> .NET Core 2.0 support</li>
<li> Target framework selection for new projects</li>
<li> New project templates</li>
<li> .NET Core Runtimes and SDKs displayed in About Dialog</li>
<li> Improved support for multi target framework projects</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.1</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-august-14-2017---visual-studio-for-mac-7101297">release notes</a>.</p>

<h2>.NET Core 2.0 Support</h2>

<p>Visual Studio for Mac 7.1 adds support for <a href="https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/">.NET Core 2.0</a> and .NET Standard 2.0.</p>

<p>The .NET Core 2.0 SDK needs to be <a href="https://www.microsoft.com/net/download/core">installed</a> separately.</p>

<h2>Target Framework Selection for New Projects</h2>

<p>If a project template supports multiple target frameworks, and the corresponding framework is available, then the New Project dialog will allow the framework to be selected before the project is created.</p>

<p><img src="http://lastexitcode.com/images/blog/DotNetCoreSupportInVisualStudioMac7-1/NewNetCoreProjectTargetFrameworkSelection.png" title="New .NET Core target framework selection" alt="New .NET Core target framework selection"></p>

<p>Visual Studio for Mac includes project templates for .NET Core 1.0, 1.1 and 2.0 as well as for .NET Standard versions 1.0 through to 2.0.</p>

<p>To be able to create projects that target .NET Core 2.0 or .NET Standard 2.0 the .NET Core 2.0 SDK needs to be installed.</p>

<h2>New Project Templates</h2>

<p>The following project templates have been added:</p>

<ul>
<li>ASP.NET Core Web App (Razor Pages)

<ul>
<li>Available if .NET Core 2.0 SDK is installed.</li>
</ul>
</li>
<li>Class Library

<ul>
<li>Targets .NET Core instead of .NET Standard.</li>
</ul>
</li>
<li>MSTest</li>
</ul>


<p>Some project templates do not support all the target framework versions.
For example, the ASP.NET Core Web App (Razor Pages) only supports
.NET Core 2.0, so this template will only be displayed if .NET Core 2.0 SDK
is installed.</p>

<p>The F# project templates have some restrictions on what target frameworks
they support. The F# .NET Standard project templates do not
support selecting .NET Standard versions below 1.6. The F# Class Library project
only supports .NET Core 2.0.</p>

<h2>.NET Core Runtime and SDKs displayed in About Dialog</h2>

<p>The About dialog will now display the .NET Core runtimes and SDKs that are installed on
the local machine.</p>

<p><img src="http://lastexitcode.com/images/blog/DotNetCoreSupportInVisualStudioMac7-1/NetCoreInformationAboutDialog.png" title=".NET Core runtime and SDK information in About dialog" alt=".NET Core runtime and SDK information in About dialog"></p>

<h2>Improved Support for Multi Target Framework Projects</h2>

<p>SDK style projects that target multiple frameworks can now be opened in Visual Studio for
Mac 7.1 and will show source files as well as NuGet package dependencies.</p>

<p>The project will be treated as though it only has
one target framework which is the first one specified in the
TargetFrameworks property in the project file.</p>

<p>Please note that currently the support for multiple target frameworks is limited in
comparison with Visual Studio on Windows.</p>

<h2>Bug Fixes</h2>

<p><strong>ASP.NET Core Web API project does not open API url on launching browser</strong></p>

<p>When an ASP.NET Core Web API project was run it would open a blank web
page in the browser instead of a page that showed the api values. Now when a new ASP.NET
Core Web API project is run the <code>http://localhost:&lt;port&gt;/api/values</code> url is launched in
the browser so the API values will be displayed.</p>

<p><strong>Unable to run or debug ASP.NET Core project with empty SDK directory</strong></p>

<p>If there was an empty directory inside the .NET Core SDK directory <code>/usr/local/share/dotnet/sdk</code> then it was
not possible to run or debug an ASP.NET Core web project</p>

<p>If the .NET Core SDK MSBuild files were not found in the SDK directory then the
project&rsquo;s OutputType was not read and would result in the project being treated
as a library project. This could also occur if only
the .NET Core runtime is installed.</p>

<p><strong>Shared project files shown for .NET Core project in Solution window</strong></p>

<p>When a .NET Core project referenced a shared assets project the files
from the shared project were incorrectly being displayed in the .NET Core project in
the Solution window.</p>

<p><strong>Fix generated code for resource files in .NET Core projects</strong></p>

<p>Adding a resx file to a .NET Core 1.x or .NET Standard 1.x project would result in
code being generated that could not be compiled.</p>

<p>Projects that target .NET Core App 1.0, 1.1, or .NET Standard below version 2.0
cannot compile code that uses <code>typeof(Resources).Assembly</code> which was
being generated by the ResXFileCodeGenerator. If these target frameworks
are used by the project then the code generated by Visual Studio for Mac
will now use <code>typeof(Resources).GetTypeInfo().Assembly</code> which is supported.</p>

<p>.NET Core 2.0 and .NET Standard 2.0 do not need to use GetTypeInfo so the
code generated for these frameworks has not been changed.</p>

<p><strong>Fix new resource file not added as Update item in Sdk projects</strong></p>

<p>Adding a new resource file to a .NET Core project would add the
.resx file and the .Designer.cs file as Include items instead of an
Update items.</p>

<pre><code>&lt;ItemGroup&gt;
  &lt;EmbeddedResource Include="Resources.resx"&gt;
    &lt;Generator&gt;ResXFileCodeGenerator&lt;/Generator&gt;
    &lt;LastGenOutput&gt;Resources.Designer.cs&lt;/LastGenOutput&gt;
  &lt;/EmbeddedResource&gt;
&lt;/ItemGroup&gt;
&lt;ItemGroup&gt;
  &lt;Compile Include="Resources.Designer.cs"&gt;
    &lt;DependentUpon&gt;Resources.resx&lt;/DependentUpon&gt;
  &lt;/Compile&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>This then caused the build to fail since these files are already included by
the .NET Core SDK.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Open With in Visual Studio for Mac 7.0]]></title>
    <link href="http://lastexitcode.com/blog/2017/08/06/ConfiguringOpenWithInVisualStudioMac7-0/"/>
    <updated>2017-08-06T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/08/06/ConfiguringOpenWithInVisualStudioMac7-0</id>
    <content type="html"><![CDATA[<p>Visual Studio on Windows can be <a href="https://msdn.microsoft.com/en-us/library/hy2sthf1.aspx">configured to use a different editor to open a file</a>. With Visual Studio for Mac, whilst you can open a file with a selection of editors and applications, it is not currently possible to change the default editor or add a custom application.</p>

<p>The <a href="https://github.com/mrward/monodevelop-open-with-addin">Open With addin</a> provides an Open With dialog that allows you to change the default editor or application used to open a file in a similar way to how this is done in Visual Studio on Windows.</p>

<h2>Features</h2>

<ul>
<li>Supports changing the default editor used to open a file.</li>
<li>Supports adding a custom application to open a file.</li>
<li>Editor configuration is saved and will be available on restarting Visual Studio for Mac.</li>
</ul>


<h2>Supports</h2>

<ul>
<li>Visual Studio Mac 7.0 or later.</li>
</ul>


<h2>Configuring the Default Editor or Application</h2>

<p>To configure the application or editor used to open file you can right click the file in the Solution window and select Open With &ndash; Preferences&hellip;</p>

<p><img src="http://lastexitcode.com/images/blog/ConfiguringOpenWithInVisualStudioMac7-0/OpenWithPreferencesMenu.png" title="Open With - Preferences context menu" alt="Open With - Preferences context menu"></p>

<p>This will open the Open With dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/ConfiguringOpenWithInVisualStudioMac7-0/OpenWithDialog.png" title="Open With dialog" alt="Open With dialog"></p>

<p>The editors and applications that support opening the file are displayed. The default application is indicated by having (Default) next to its name.</p>

<p>To change the default application or editor used to open the file select it and then click the Set as Default button. Click OK to close the dialog and save the configuration.</p>

<p>If a file is currently open then it will need to be closed before it is opened in the new default editor or application.</p>

<h2>Adding a Custom Application</h2>

<p>A custom application can be added to the list of applications shown in the Open With menu. First open the Open With dialog by selecting Open With &ndash; Preferences. Then click the Add button to open the Add Application dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/ConfiguringOpenWithInVisualStudioMac7-0/AddApplicationDialog.png" title="Add Application dialog" alt="Add Application dialog"></p>

<p>The Browse button can be used to find an application.</p>

<p>The Friendly Name is the name that will be displayed in the Open With menu for the custom application.</p>

<p>Arguments cannot be specified if a Mac application (.app) is used. However if the application is not a Mac application, for example, it is a C# program, then arguments can be passed. To pass the filename to the program you can use {0} in the Arguments text box. This placeholder will be expanded to be the full filename path when the program is run.</p>

<h2>Removing a Custom Application</h2>

<p>To remove a custom application for a file first open the Open With dialog by selecting Open With &ndash; Preferences. Select the application you want to remove. Then click the Remove button.</p>

<p>The Remove button is only enabled for custom applications that you have added. The built-in editors and applications cannot be removed.</p>

<h2>Installation</h2>

<p>The Open With addin is available to download from <a href="https://github.com/mrward/monodevelop-open-with-addin/releases/download/0.1/MonoDevelop.OpenWith_0.1.mpack">GitHub</a>.</p>

<p>To install the addin open the Extensions Manager by selecting Extensions&hellip; from the main menu. Click the Install from file button. Select the .mpack file and then click the Open button.</p>

<p>The addin is also available from a <a href="https://github.com/mrward/monodevelop-addins">custom MonoDevelop 7.0 addin server</a>. It is not currently published to the main MonoDevelop addin server.</p>

<h2>Source Code</h2>

<ul>
<li><a href="https://github.com/mrward/monodevelop-open-with-addin">Open With addin for Visual Studio for Mac</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.0]]></title>
    <link href="http://lastexitcode.com/blog/2017/06/04/NuGetSupportInVisualStudioMac7-0/"/>
    <updated>2017-06-04T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/06/04/NuGetSupportInVisualStudioMac7-0</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> .NET Core support</li>
<li> NuGet 4.0 support</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.0</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes">release notes</a>.</p>

<h2>.NET Core Support</h2>

<p>.NET Core projects do not show a Packages folder in the Solution window. Instead the NuGet packages are displayed in a NuGet folder, which is inside a Dependencies folder.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac7-0/NetCoreProjectJsonNetPackageInSolutionWindow.png" title="Newtonsoft.Json NuGet package in Solution window - .NET Core project" alt="Newtonsoft.Json NuGet package in Solution window - .NET Core project"></p>

<p>The version of the NuGet package is displayed directly in the Solution window. For other project types you need to right click the package to see the version.</p>

<p>If the NuGet package depends on other packages then these can be seen by clicking on the arrow to expand the dependencies.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac7-0/NetCoreProjectJsonNetPackageExpandedInSolutionWindow.png" title="Newtonsoft.Json NuGet package expanded in Solution window - .NET Core project" alt="Newtonsoft.Json NuGet package expanded in Solution window - .NET Core project"></p>

<h3>Restoring Packages</h3>

<p>NuGet packages will be restored automatically on opening a .NET Core project. This can be disabled in preferences by unchecking <strong>Automatically restore packages when opening a solution</strong> in the NuGet &ndash; General section.</p>

<p>You can manually restore NuGet packages for .NET Core projects by:</p>

<ul>
<li>Right clicking the Dependencies folder and selecting Restore.</li>
<li>Right clicking the NuGet folder and selecting Restore.</li>
<li>Selecting Restore NuGet Packages from the Project menu.</li>
</ul>


<p>Selecting Restore NuGet Packages from the Project menu will restore packages for the project or the solution depending on what is currently selected in the Solution window.</p>

<p>Restoring NuGet packages for a .NET Core project works differently compared with a project that uses a packages.config file. The NuGet packages themselves will be downloaded into the NuGet package cache folder ~/.nuget/packages if they do not exist, as before, but the NuGet packages will not be copied into a packages directory inside the solution&rsquo;s directory. The project file will not contain have any Reference items added when a NuGet package is installed.</p>

<p>When a NuGet restore is run for a .NET Core project three files in the obj directory are created.</p>

<ul>
<li>project.assets.json</li>
<li>ProjectName.csproj.nuget.g.props</li>
<li>ProjectName.csproj.nuget.g.targets</li>
</ul>


<p>The project.assets.json file contains the dependencies for your project.</p>

<p>The nuget.g.props and nuget.g.targets files will contain any MSBuild imports that your NuGet package requires and they also define some properties, such as the path to the NuGet package cache on your machine.</p>

<p>These three files are used when building your project to resolve the assemblies to be referenced now that they are no longer explicitly stored in your project file.</p>

<h3>Updating Packages</h3>

<p>NuGet packages can be updated by:</p>

<ul>
<li>Right clicking the package inside the NuGet folder and selecting Update.</li>
<li>Right clicking the NuGet folder and selecting Update.</li>
<li>Right clicking the Dependencies folder and selecting Update.</li>
<li>Selecting Update NuGet Packages from the Project menu.</li>
</ul>


<p>Selecting Update NuGet Packages from the Project menu will update all packages in the project or in the solution depending on what is currently selected in the Solution window.</p>

<h3>Removing Multiple NuGet Packages in One Step</h3>

<p>You can remove multiple NuGet packages in one step from a .NET Core project by selecting the packages in the Solution window, right clicking and selecting Remove.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInVisualStudioMac7-0/NetCoreProjectRemoveMultipleNuGetPackagesInSolutionWindow.png" title="Removing multiple NuGet packages in Solution window - .NET Core project" alt="Removing multiple NuGet packages in Solution window - .NET Core project"></p>

<p>Projects that use a packages.config file do not support removing multiple NuGet packages in one step.</p>

<h3>Installing NuGet Packages</h3>

<p>NuGet packages are installed by using the Add Packages dialog in the same way as with other project types. To open the Add Packages dialog for a .NET Core project:</p>

<ul>
<li>Right click the NuGet folder and select Add Packages&hellip;</li>
<li>Right click the Dependencies folder and select Add Packages&hellip;</li>
<li>Right click the project and select Add &ndash; Add NuGet Packages&hellip;</li>
<li>From the Project menu select Add NuGet Packages&hellip;</li>
</ul>


<p>When the first NuGet package is installed into a .NET Core project a packages.config file will not be created. Instead the NuGet package will be added as a <a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files">PackageReference</a> that is saved in the project file.</p>

<h3>Package Reference</h3>

<p>.NET Core projects do not use a packages.config file to record their NuGet dependencies. Instead the .NET Core project file will contain a <a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files">PackageReference</a> after the NuGet package is installed into the project.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
</span><span class='line'>
</span><span class='line'>  &lt;PropertyGroup&gt;
</span><span class='line'>    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
</span><span class='line'>    &lt;TargetFramework&gt;netcoreapp1.1&lt;/TargetFramework&gt;
</span><span class='line'>  &lt;/PropertyGroup&gt;
</span><span class='line'>
</span><span class='line'>  &lt;ItemGroup&gt;
</span><span class='line'>    &lt;PackageReference Include="Newtonsoft.Json" Version="10.0.2" /&gt;
</span><span class='line'>  &lt;/ItemGroup&gt;
</span><span class='line'>&lt;/Project&gt;</span></code></pre></td></tr></table></div></figure>


<p>Please note that Visual Studio for Mac currently only supports package references with the new SDK style projects which are used by .NET Core. If you use package references in other project types then the Solution window will not show the packages and a packages.config file will be created if you install a NuGet package.</p>

<h3>Updated Packages Available</h3>

<p>For other project types the Solution window will check for updated packages and show this information in the Packages folder. This is not currently supported with .NET Core projects.</p>

<h2>NuGet 4.0 Support</h2>

<p>Visual Studio for Mac now includes <a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.0-rtm">NuGet 4.0</a>.</p>

<p>More information on the new features provided by NuGet 4.&ndash; can be found in the <a href="http://blog.nuget.org/20170308/Announcing-NuGet-4.0-RTM.html">Announcing NuGet 4.0 RTM blog post</a> and the <a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.0-rtm">NuGet 4.0 release notes</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 6.2]]></title>
    <link href="http://lastexitcode.com/blog/2017/03/05/NuGetSupportInXamarinStudio6-2/"/>
    <updated>2017-03-05T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2017/03/05/NuGetSupportInXamarinStudio6-2</id>
    <content type="html"><![CDATA[<ul>
<li> Integrated support for creating NuGet packages with <a href="https://github.com/nuget/nuget.build.packaging">NuGetizer 3000</a></li>
<li> NuGet 3.5 support</li>
<li> Improved project.json support</li>
<li> Native License Acceptance dialog</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 6.2 can be found in the <a href="https://developer.xamarin.com/releases/studio/xamarin.studio_6.2/xamarin.studio_6.2/">release notes</a>.</p>

<h2>NuGetizer 3000</h2>

<p><a href="https://github.com/nuget/nuget.build.packaging">NuGetizer 3000</a> is a set of build tools for creating NuGet packages inspired by <a href="http://nuproj.net/">NuProj</a>. Support for NuGetizer 3000 in Xamarin Studio includes:</p>

<ul>
<li>Project templates for creating NuGet packages</li>
<li>Support for creating a NuGet package from an existing project</li>
<li>Reference assembly generation for Portable Class Library profiles</li>
</ul>


<p>The following sections look at the NuGetizer 3000 features provided by Xamarin Studio. For more detailed information on what is supported by NuGetizer 3000 please read the <a href="https://github.com/NuGet/Home/wiki/NuGetizer-3000">NuGetizer 3000 feature spec</a>.</p>

<h3>Project Templates</h3>

<p>There are two new project templates available.</p>

<ul>
<li>Multiplatform Library</li>
<li>NuGet package</li>
</ul>


<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/MultiplatformLibraryNewProjectDialog.png" title="Mulitplatform Library project template in New Project dialog" alt="Mulitplatform Library project template in New Project dialog"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/NuGetPackageNewProjectDialog.png" title="NuGet Package project template in New Project dialog" alt="NuGet Package project template in New Project dialog"></p>

<h3>Multiplatform Library &ndash; Single for all platforms</h3>

<p>The Mulitplatform Library project template will create a Portable Class Library project with NuGet package metadata when the Single for all platforms option is selected.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/MultiplatformLibraryWizardSingleSelected.png" title="Multiplatform library - single for all platforms selected" alt="Multiplatform library - single for all platforms selected"></p>

<p>To create a NuGet package right click the project and select Create NuGet Package. This will generate a NuGet package (.nupkg) in the output directory with the Portable Class Library assembly in the corresponding portable lib directory inside the NuGet package.</p>

<h3>Multiplatform Library &ndash; Platform specific</h3>

<p>This Multiplatform Library will create a shared project, an iOS project, an Android project and a NuGet packaging project when the iOS and Android options are selected.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/MultiplatformLibraryWizardPlatformsSelected.png" title="Multiplatform library - iOS and Android selected" alt="Multiplatform library - iOS and Android selected"></p>

<p>The iOS and Android project will reference the shared project. The NuGet packaging project will reference the iOS and Android projects. The NuGet packaging project will contain the NuGet package metadata.</p>

<p>When the NuGet packaging project is built it will create the NuGet package in its output folder and inside the NuGet package will be the Android and iOS output assemblies each in their own platform specific lib folders.</p>

<h3>NuGet Packaging Project</h3>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/NuGetPackageWizard.png" title="NuGet package project template configuration" alt="NuGet package project template configuration"></p>

<p>The NuGet packaging project can be used to create a meta NuGet package, which is a NuGet package that has no content itself but references other NuGet packages, or it can reference other projects and it will add their output assemblies to the NuGet package. If the referenced project has NuGet package references then these will be added to the generated NuGet package as dependencies.</p>

<p>NuGet packages can be added to the NuGet packaging project by using the Add Packages dialog.</p>

<p>To include files in the NuGet packaging project the files need to have Include in Package property set to true. This can be done by right clicking the file in the solution window, selecting Properties, then selecting Include in Package from the NuGet section in the Properties window.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/IncludeInPackagePropertiesWindow.png" title="Include in Package in Properties window" alt="Include in Package in Properties window"></p>

<h3>Adding NuGet Package Metadata</h3>

<p>NuGet package metadata can be added to any .NET project by selecting the NuGet Package &ndash; Metadata page available in the project options.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/NuGetPackageMetadataProjectOptions.png" title="NuGet Package metadata in project options" alt="NuGet package metadata in project options"></p>

<p>The General tab shows compulsory metadata that must be specified for a NuGet package. The Details tab shows other optional metadata that can be specified. This NuGet package metadata is saved directly into the project file (.csproj).</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/NuGetPackageMetadataDetailsProjectOptions.png" title="NuGet Package metadata in project options" alt="NuGet package metadata in project options"></p>

<p>Once NuGet package metadata has been added then the NuGet.Build.Packaging NuGet package will be added to the project if it does not already exist. This NuGet package provides MSBuild tasks that are used when creating the NuGet package for the project.</p>

<p>NuGet package metadata should be added to project if you want to be able to create a NuGet package for that project on its own. Without NuGet package metadata the project would need to be referenced by a NuGet packaging project, or another project with NuGet package metadata, for it to be included in a NuGet package.</p>

<p>If a NuGet packaging project references a project that has its own NuGet package metadata then a dependency will be added to the NuGet package created by the NuGet packaging project. The referenced project&rsquo;s output assembly would not be included in the NuGet package created by the packaging project in this case.</p>

<h3>Generating a NuGet Package</h3>

<p>To generate a NuGet package you can right click the project and select Create NuGet Package.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/CreateNuGetPackageMenuItem.png" title="Create NuGet Package menu item" alt="Create NuGet Package menu item"></p>

<p>For NuGet packaging projects you can also build the project and it will create a NuGet package.</p>

<p>For a .NET project that has NuGet package metadata you can generate a NuGet package when building the project by enabling the &ldquo;Create a NuGet Package when building the project&rdquo; option in the Project Options dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/CreateNuGetPackageWhenBuildingOption.png" title="Creating a NuGet Package when building the project option - project options" alt="Creating a NuGet Package when building the project - project options"></p>

<h3>Adding Platform Implementations</h3>

<p>If you have a Portable Class Library with NuGet package metadata you can add platform specific implementations for iOS and Android by right clicking the project and selecting Add &ndash; Add Platform Implementation. This will open a dialog where you can choose iOS and Android, and also whether to create a shared project.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/AddPlatformImplementationDialog.png" title="Add Platform Implementation dialog" alt="Add Platform Implementation dialog"></p>

<p>After clicking OK an Android and iOS project will be created along with a NuGet packaging project that references these projects. The NuGet package metadata will be moved from the Portable Class Library project to the NuGet packaging project. If the shared project option was selected then the code from the Portable Class Library project will be moved to the shared project. The shared project will be referenced by the iOS and Android project.</p>

<h3>Reference Assembly Generation</h3>

<p>In the Project Options for a NuGet Packaging project there is a Reference Assemblies page in the NuGet Package category. This pages shows a list of Portable Class Library profiles that can be selected.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/ReferenceAssembliesProjectOptions.png" title="Reference assemblies in project options" alt="Reference assemblies in project options"></p>

<p>Reference assemblies for the selected profiles will be generated based on the output assemblies from the projects referenced by the NuGet packaging project.</p>

<p>That brings us to the end of the walkthrough of the NuGetizer 3000 features provided by Xamarin Studio.</p>

<h2>NuGet 3.5 Support</h2>

<p>Xamarin Studio now includes <a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-3.5-rtm">NuGet 3.5</a>.</p>

<p>More information on the new features provided by NuGet 3.5 can be found in the <a href="http://blog.nuget.org/20161027/Announcing-NuGet-3.5-RTM.html">Announcing NuGet 3.5 RTM blog post</a> and the <a href="http://docs.nuget.org/ndocs/release-notes/nuget-3.5-RTM">NuGet 3.5 release notes</a>.</p>

<h2>Improved project.json Support</h2>

<p>NuGet packages are now automatically restored when the project.json file is saved in the text editor.</p>

<h2>Native License Acceptance Dialog</h2>

<p>The Licence Acceptance dialog now uses native UI.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-2/LicenseAcceptanceDialog.png" title="License Acceptance dialog" alt="License Acceptance dialog"></p>

<h2>Bug Fixes</h2>

<p><strong>Updating all NuGet packages installs unexpected pre-release NuGet packages</strong></p>

<p>With a pre-release NuGet package installed in a project, updating
all the NuGet packages in the project could cause the stable NuGet
packages to be updated to pre-release versions. On updating all the packages if any were pre-release the include
pre-release flag would be set on updating which would allow any
pre-release NuGet packages to be used on updating. Now the include pre-release flag is not set on updating. NuGet 3
will still update pre-release NuGet packages to the latest pre-release
or latest stable, depending on which is the latest version, without
this include pre-release flag being set. NuGet 2 required the include
pre-release flag set to update a pre-release to the latest pre-release.</p>

<p>An example &ndash; project has the following NuGet packages
installed:</p>

<pre><code>Xamarin.Forms 2.3.3.180
Xamarin.Forms.CarouselView 2.3.0-pre1
</code></pre>

<p>Latest available packages from nuget.org:</p>

<pre><code>Xamarin.Forms 2.3.3.180 (latest stable)
Xamarin.Forms 2.3.4.184-pre1 (latest pre-release)
Xamarin.Forms.CarouselView 2.3.0-pre2
</code></pre>

<p>Expected result on updating all packages in the project:</p>

<pre><code>Xamarin.Forms 2.3.3.180
Xamarin.Forms.CarouselView 2.3.0-pre2
</code></pre>

<p>Actual result:</p>

<pre><code>Xamarin.Forms 2.3.4.184-pre1
Xamarin.Forms.CarouselView 2.3.0-pre2
</code></pre>

<p><strong>Types unavailable when NuGet package added to project.json file</strong></p>

<p>When a NuGet package was added to a project that used a project.json file
the types from the assembly provided by the NuGet package were not
available until the project was reloaded or the references were
modified. This prevented code completion from showing the correct information.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PowerShell Support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2017/02/25/PowerShellSupportInXamarinStudio/"/>
    <updated>2017-02-25T18:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2017/02/25/PowerShellSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio version 6.0 and later now have PowerShell editing and debugging support with a PowerShell addin. The PowerShell addin uses the <a href="https://github.com/PowerShell/PowerShellEditorServices">PowerShell Editor Services</a> which is also used by the <a href="https://github.com/PowerShell/vscode-powershell">PowerShell extension</a> for Visual Studio Code.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/DebuggingPowerShellScriptInXamarinStudio.png" title="Debugging a PowerShell script in Xamarin Studio" alt="Debugging a PowerShell script in Xamarin Studio"></p>

<h2>Features</h2>

<ul>
<li>Code completion</li>
<li>Debugging support

<ul>
<li>Immediate window</li>
<li>Locals window</li>
<li>Watch window</li>
</ul>
</li>
<li>Find references</li>
<li>PowerShell file template</li>
<li>Rename variable or method</li>
<li>Show API documentation</li>
<li>Syntax highlighting</li>
</ul>


<h2>Requirements</h2>

<p>Xamarin Studio 6.x or MonoDevelop 6.x.</p>

<p><a href="https://github.com/PowerShell/PowerShell">PowerShell 6</a> needs to be installed on Mac and on Linux.</p>

<p>PowerShell 3 and higher are supported on Windows.</p>

<h2>Code Completion</h2>

<p>As you type in the text editor you will see code completion for PowerShell variables.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellVariableCodeCompletion.png" title="PowerShell variable code completion" alt="PowerShell variable code completion"></p>

<p>Code completion for PowerShell commands.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellCommandCodeCompletion.png" title="PowerShell command code completion" alt="PowerShell command code completion"></p>

<p>An overview of PowerShell command parameters when you press the space key after entering a PowerShell command.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellCommandTooltipCodeCompletion.png" title="PowerShell command parameters overview code completion" alt="PowerShell command parameters overview code completion"></p>

<p>Code completion for PowerShell command parameters.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellCommandParameterCodeCompletion.png" title="PowerShell command parameter code completion" alt="PowerShell command parameter code completion"></p>

<p>Hovering the mouse over a PowerShell command will show a tooltip with information about that command.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellCommandTooltip.png" title="PowerShell command tooltip on hover" alt="PowerShell command tooltip on hover"></p>

<h2>Syntax Errors</h2>

<p>Syntax errors are highlighted in the text editor. Hovering the mouse over the highlighted error will show information about the error.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellSyntaxError.png" title="PowerShell syntax error highlighting" alt="PowerShell syntax error highlighting"></p>

<h2>Find references</h2>

<p>To find references of a variable or a method you can right click in the text editor and select Find References.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellFindReferencesContextMenu.png" title="PowerShell find references text editor context menu" alt="PowerShell find references text editor context menu"></p>

<p>The references found are then displayed in the Search Results window.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellFindReferencesSearchResults.png" title="PowerShell find references text editor context menu" alt="PowerShell find references text editor context menu"></p>

<h2>Rename</h2>

<p>A variable or method can be renamed in the text editor by right clicking and selecting Rename.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellRenameContextMenu.png" title="PowerShell rename text editor context menu" alt="PowerShell rename text editor context menu"></p>

<p>On typing the new name and the text will be replaced.</p>

<h2>Show API Documentation</h2>

<p>Right clicking on a PowerShell command and selecting Show API Documentation will open the online help for that PowerShell command, if it is available, in the web browser.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellAPIDocumentationContextMenu.png" title="API Documentation text editor context menu" alt="API Documentation text editor context menu"></p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellAPIOnlineDocumentation.png" title="PowerShell API documentation web page" alt="PowerShell API documentation web page"></p>

<h2>Creating a new PowerShell Script</h2>

<p>To create a new PowerShell script there is an empty PowerShell file template available from the New File dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellFileTemplateInNewFileDialog.png" title="PowerShell script file template in New File dialog" alt="PowerShell script file template in New File dialog"></p>

<p>After creating a new PowerShell file it must be saved before it can be run or debugged.</p>

<h2>Debugging</h2>

<p>To debug the currently active PowerShell file open in the text editor,
set a breakpoint on a line by clicking in the left hand margin, then select Start Debugging from the Run menu.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/RunStartDebuggingMenu.png" title="Run - Start Debugging menu" alt="Run - Start Debugging menu"></p>

<p>Alternatively you can click the Run button in the main toolbar.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/DebugRunMainToolbarButton.png" title="Run button in the main toolbar" alt="Run button in the main toolbar"></p>

<p>A solution does not need to be open in order for a PowerShell script to be run with the debugger. You can open just a PowerShell script into Xamarin Studio and then run the debugger.</p>

<p>Once the debugger has started you can select Step Over, Step In, Step Out or Continue Debugging from the Run menu by clicking one of the main toolbar buttons.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/RunStepMenuItems.png" title="Run menu with Step menu items" alt="Run menu with Step menu items"></p>

<p>Hovering the mouse over a variable will open a tooltip showing the variable value.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/DebugTooltipOnHover.png" title="Debug tooltip on hover" alt="Debug tooltip on hover"></p>

<h2>Breakpoints</h2>

<p>Breakpoint conditions should use PowerShell syntax and not C# syntax. The Edit Breakpoint dialog says to use a C# boolean expression which is incorrect.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/EditBreakpointDialog.png" title="PowerShell breakpoint condition in Edit Breakpoint dialog" alt="PowerShell breakpoint condition in Edit Breakpoint dialog"></p>

<p>Hit conditions are only partially supported. The PowerShell Editor Services debugger supports the &lsquo;When hit count is equal to&rsquo;. Due to this restriction the other hit count options may not work as expected.</p>

<p>Printing a message and continuing is not currently supported.</p>

<p>Breaking when the value of an expression changes is not currently supported.</p>

<p>Function and exception breakpoints are not currently supported.</p>

<h2>Locals Window</h2>

<p>When debugging the Locals window will show the values of variables grouped by each PowerShell scope &ndash; Auto, Local, Script and Global.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/LocalsWindow.png" title="Locals Window" alt="Locals Window"></p>

<h2>Watch Window</h2>

<p>Variables and expressions can be entered in the Watch Window.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/WatchWindow.png" title="Watch window" alt="Watch window"></p>

<p>Please note that entering a PowerShell command with missing parameters will cause the debugger to stop working. The PowerShell file will need to be closed and re-opened before the debugger will work again.</p>

<h2>Immediate Window</h2>

<p>Expressions and variables can be entered in the immediate window to get or set values.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/ImmediateWindow.png" title="Immediate window" alt="Immediate window"></p>

<p>As with the Watch Window, entering a PowerShell command with missing parameters will cause the debugger to stop working.</p>

<h1>Passing Arguments when Debugging</h1>

<p>To pass arguments when debugging a PowerShell script you can select Debug PowerShell Script&hellip; from the Run menu.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/DebugPowerShellScriptMenu.png" title="Run - Debug PowerShell Script menu" alt="Run - Debug PowerShell Script menu"></p>

<p>This will open a Debug PowerShell Script dialog where arguments can be specified. These arguments will be passed to the PowerShell script being run with the debugger. The settings used in this dialog will be remembered for the active text editor whilst it is open in Xamarin Studio.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/DebugPowerShellScriptDialog.png" title="Debug PowerShell Script dialog" alt="Debug PowerShell Script dialog"></p>

<h2>Launch Configuration Support</h2>

<p>In Visual Studio Code a launch.json file can be used to store launch configurations. These are supported in by the PowerShell addin in Xamarin Studio. The PowerShell addin will look for a launch.json file in the directory where the PowerShell file exists or in a .vscode subdirectory.</p>

<p>The launch configurations are shown under Active Configurations in the Run menu. Only PowerShell launch configurations which have a request type of &ldquo;launch&rdquo; are supported.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellLaunchConfigurations.png" title="PowerShell launch configurations in Run menu" alt="PowerShell launch configurations in Run menu"></p>

<p>The currently selected launch configuration will be used when debugging or running the PowerShell script. By default no launch configuration will be selected.</p>

<h2>Running without the Debugger</h2>

<p>To run the PowerShell file with PowerShell directly, instead of using the debugger, select Start without Debugging from the Run menu.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/RunStartWithoutDebuggingMenu.png" title="Run - Start without Debugging menu" alt="Run - Start without Debugging menu"></p>

<p>Output from the PowerShell script will be displayed in the Application Output window.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/PowerShellScriptApplicationOutput.png" title="PowerShell script Application Output window" alt="PowerShell script Application Output window"></p>

<h2>Installation</h2>

<p>The PowerShell addin is available from the <a href="http://addins.monodevelop.com/">MonoDevelop addin repository</a> on the beta channel. To install the addin open the Add-in Manager, search for the PowerShell addin, then click the Install button.</p>

<p><img src="http://lastexitcode.com/images/blog/PowerShellSupportInXamarinStudio/AddinManagerDialogWithPowerShellAddin.png" title="PowerShell addin in Addin manager dialog" alt="PowerShell addin in Addin manager dialog"></p>

<h2>Source Code</h2>

<ul>
<li><a href="https://github.com/mrward/monodevelop-powershell-addin">PowerShell addin for Xamarin Studio and MonoDevelop</a></li>
<li><a href="https://github.com/PowerShell/PowerShellEditorServices">PowerShell Editor Services</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 6.1]]></title>
    <link href="http://lastexitcode.com/blog/2016/09/17/NuGetSupportInXamarinStudio6-1/"/>
    <updated>2016-09-17T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/09/17/NuGetSupportInXamarinStudio6-1</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 6.1 was released last week as part of the latest stable <a href="https://blog.xamarin.com/major-updates-ios-10-android-nougat-and-other-tasty-bits/">Xamarin Platform release</a> and it includes changes made to the NuGet support.</p>

<h2>Changes</h2>

<ul>
<li> NuGet 3.4.3 support</li>
<li> Support for project.json files</li>
<li> A specific NuGet package version can now be installed from a list shown in the Add Packages dialog</li>
<li> NuGet operations can now be cancelled from the status bar or Package Console</li>
<li> Support browsing for a local directory when creating a package source</li>
<li> Support forcefully removing a NuGet package when it is missing from all package sources</li>
<li> Packages installed in the solution are no longer shown in the Add Packages dialog</li>
<li> Only global package sources are now shown in Preferences</li>
<li> NuGet version supported is now displayed in the About dialog</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 6.1 can be found in the <a href="https://developer.xamarin.com/releases/studio/xamarin.studio_6.1/xamarin.studio_6.1/">release notes</a>.</p>

<h2>NuGet 3.4.3 support</h2>

<p>Xamarin Studio now includes <a href="https://docs.nuget.org/release-notes/nuget-3.4.3">NuGet 3.4.3</a> which means project.json files are now supported and NuGet packages that only support NuGet 3 or above can now be installed.</p>

<h2>Support for project.json files</h2>

<p>The project.json file is a new package file format introduced with NuGet 3 which supports transitive restore. More detailed information on project.json can be found in the <a href="https://docs.nuget.org/consume/projectjson-intro">NuGet documentation</a>.</p>

<p>A project.json file replaces the packages.config file and holds the NuGet packages
being used by the project. One difference you will notice is that the project.json file may not show the same list of NuGet packages that a packages.config file would show. This is because the project.json file only shows the NuGet packages you explicitly install into your project. So if you install say bootstrap you will only see bootstrap in the project.json file even though it depends on jQuery. If you do the same for a packages.config file you would see both bootstrap and jQuery saved in the file. Another difference is that references are not added to your project file (.csproj) when using a
project.json file.</p>

<p>In order to use a project.json file with Xamarin Studio you will need to create the file yourself in the project directory and close and re-open the solution. The project.json file needs to be
available when you open the project otherwise Xamarin Studio will default to using a packages.config file.</p>

<p>An example project.json file for a .NET 4.5 library project is shown below:</p>

<pre><code>{
  "frameworks": {
    "net45": {}
  }
}
</code></pre>

<p>When you add a NuGet package to a project that uses a project.json file the NuGet package
information will be added into a dependencies section:</p>

<pre><code> "dependencies": {
   "NUnit": "3.2.1"
 }
</code></pre>

<p>Please note that when using a project.json file the project will not display a From Packages directory
inside the References folder. This is because the project file does not have any
references added to it when using a project.json and the reference information is currently not available from the project system.</p>

<p>Please note that there are <a href="https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/">future plans</a> to move the information stored in a project.json file into the project file.</p>

<h1>NuGet 3 package source</h1>

<p>Xamarin Studio now supports using the NuGet 3 package source:</p>

<p><a href="https://api.nuget.org/v3/index.json">https://api.nuget.org/v3/index.json</a></p>

<p>This can be added into your package sources in Preferences. It is also the package
source that will be created by default if your global <a href="http://lastexitcode.com/projects/NuGet/FileLocations/">NuGet.Config file</a> is missing.</p>

<h2>Installing a specific NuGet package version from the Add Packages dialog</h2>

<p>Older versions of Xamarin Studio supported being able to install specific package versions by using a package version search in the Add Packages dialog as shown below:</p>

<pre><code>NUnit version:*
</code></pre>

<p>This package version search was not easy to discover and so it has been removed and replaced in Xamarin Studio 6.1 with a combo box that allows a particular version to be selected. The Version combo box is in the bottom right hand corner of the Add Packages dialog as shown in the screenshots below.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-1/AddPackagesDialog.png" title="Add Packages dialog" alt="Add Packages dialog"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-1/AddPackagesDialogWithVersionComboBoxSelected.png" title="Add Packages dialog with version combo box selected" alt="Add Packages dialog with version combo box selected"></p>

<p>Note that in order to populate the version combo box a second request is sent to the
package source so it may not show all the versions immediately.</p>

<p>Also note that for package sources which are local directories only the latest version will be displayed in the version combo box.</p>

<h2>Cancelling a NuGet operation</h2>

<p>With Xamarin Studio you can now cancel the currently running NuGet package operation. This can be done
by clicking the red Stop button in the Status Bar or in the Package Console.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-1/StatusBarStopButton.png" title="Status bar stop button" alt="Status bar stop button"></p>

<h2>Adding local package sources</h2>

<p>When adding a package source in Preferences it is now easier to create a package source for
a directory on your local machine. There is now a browse button which will allow you to browse to a directory and add it rather than having to type the full path into the text box.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-1/AddPackageSourceDialog.png" title="Add Package Source dialog" alt="Add Package Source dialog"></p>

<p>The Add Package Source dialog has also been changed to make it more obvious that either a URL or a folder can be used as a package source. The URL label has been changed to Location and the placeholder text now specifies that a URL or a folder can be used.</p>

<h2>Forced NuGet package removal</h2>

<p>A NuGet package can now be removed when it not restored and is unavailable from all package sources.</p>

<p>With older versions of Xamarin Studio a NuGet package must be restored before it can be
removed. This is a requirement of NuGet since it requires the original NuGet package to work out what has been installed so it can determine what needs to be uninstalled. NuGet can do more than just update the project file with references and MSBuild .targets files, it may add new files to the project or it may run app.config or web.config transforms.</p>

<p>When the NuGet package removal fails because the NuGet package cannot be restored a dialog will be
displayed asking whether you want to try to remove the NuGet package anyway. If the OK button is selected
then Xamarin Studio will:</p>

<ol>
<li>Remove the NuGet package from the packages.config file.</li>
<li>Remove any assembly references for the NuGet package from the project file (.csproj).</li>
<li>Remove any Imports that refer to .targets or .props files that were included with that NuGet package.</li>
</ol>


<p>This process may miss files that were added to the project by NuGet but in the majority of cases it should remove the NuGet package successfully without having to manually remove the NuGet package information from the project file.</p>

<h2>Packages installed in solution are no longer shown in Add Packages dialog</h2>

<p>With previous versions of Xamarin Studio all packages installed in the solution were shown first in the list of packages in the Add Packages dialog. Packages installed in the solution are now no longer shown in the Add Packages dialog.</p>

<h2>Only global package sources shown in Preferences</h2>

<p>The package sources shown in the Preferences dialog are now only read from the global NuGet config file. Per-solution NuGet.Config files located in individual solution directories are no longer read when showing the package sources in Preferences. This is because changes made in Preferences only modifies the global NuGet.Config file.</p>

<p>The package sources shown in the Add packages dialog will still include package sources defined in a solution&rsquo;s NuGet.Config file and is unaffected by this change.</p>

<h2>NuGet version displayed in About dialog</h2>

<p>The version of NuGet supported by Xamarin Studio is now displayed in the About dialog when the Show Details button is selected.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-1/AboutDialog.png" title="About dialog" alt="About dialog"></p>

<h2>Bug Fixes</h2>

<p><strong>Custom MSBuild  .targets files were not always added to the end of the project</strong></p>

<p>When installing a NuGet package that has a .targets file the Import element created was grouped with the existing Import elements. This is OK most of the time however if there are other items in the project added after the import then any build targets may fail since these items are included after the import. One example is the netfx-System.StringResources NuGet package which may not find any resource files that occur in the project after its Import element.</p>

<p>Now .targets files are added as the last element in the project file. This also makes the behaviour consistent with how NuGet works in Visual Studio.</p>

<p><strong>Custom MSBuild .props files were not added to the start of the project</strong></p>

<p>Installing a NuGet package that included an MSBuild .props file would add an Import element for the .props file at the end of the project file which is incorrect. Now .props files are added to the project file as the first child element inside the Project&rsquo;s root element.</p>

<h2>Known Issues</h2>

<p><strong>Offline package restore</strong></p>

<p>Package restore may not work when you are offline
even though the NuGet packages may be available in the local NuGet cache on your machine.</p>

<p>The current workaround is to create a package source that
points to a local directory containing all the required NuGet packages and disable all online
NuGet package sources. With just the local package source enabled you can then restore the NuGet packages when you are
offline. Note that this problem also affects Visual Studio 2015.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Package Explorer for Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/08/20/NuGetExplorerForXamarinStudio/"/>
    <updated>2016-08-20T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/08/20/NuGetExplorerForXamarinStudio</id>
    <content type="html"><![CDATA[<p>When diagnosing why a NuGet package cannot be installed into a project the application I use is the excellent <a href="https://github.com/NuGetPackageExplorer/NuGetPackageExplorer">NuGet Package Explorer</a>. Whenever there is an error trying to install a NuGet package, similar to the one shown below, you can open the NuGet package with NuGet Package Explorer and take a look at the target frameworks it supports.</p>

<pre><code>You are trying to install this package into a project that targets 'MonoAndroid,Version=v6.0',
but the package does not contain any assembly references or content files that are compatible with that framework.
</code></pre>

<p>Currently <a href="https://github.com/NuGetPackageExplorer/NuGetPackageExplorer">NuGet Package Explorer</a> is only available on Windows. On other operating systems you can change the file extension to .zip, extract the contents of the NuGet package, or open it into a zip application, and take a look at the files.</p>

<p>To make exploring NuGet packages easier on operating systems where the NuGet Package Explorer application is not available there is a now <a href="https://github.com/mrward/monodevelop-nuget-package-explorer">NuGet Explorer addin</a> that you can install into Xamarin Studio or MonoDevelop. With this addin you can open and explore NuGet packages from online package sources or from the local file system.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPackageExplorerForXamarinStudio/ViewingAndroidSupportNuGetPackageContents.png" title="Exploring the Xamarin.Android.Support NuGet package in Xamarin Studio" alt="Exploring the Xamarin.Android.Support NuGet package in Xamarin Studio"></p>

<p>Now let us take a look in more detail of the features provided by the NuGet Package Explorer addin.</p>

<h2>Features</h2>

<ul>
<li>Open and view NuGet packages from online package sources or from the local file system.</li>
<li>View the NuGet package metadata.</li>
<li>View the NuGet package files.</li>
<li>View the NuGet package .nuspec file.</li>
<li>Open any file stored inside the NuGet package.</li>
<li>Open other NuGet packages that are listed as dependencies.</li>
</ul>


<p>Supports Xamarin Studio 6.0 and MonoDevelop 6.0.</p>

<h2>Opening a NuGet Package from a Package Source</h2>

<p>To open a NuGet package from a package source you can select Open NuGet Package from the File menu.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPackageExplorerForXamarinStudio/FileOpenNuGetPackageMenu.png" title="File Open NuGet Package menu" alt="File Open NuGet Package menu"></p>

<p>Alternatively if you have a project open you can right click the Packages folder in the Solution window and select Open NuGet Package.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPackageExplorerForXamarinStudio/OpenNuGetPackagePackagesFolderMenu.png" title="Open Package menu on Packages folder" alt="Open Package menu on Packages folder"></p>

<p>This will open the Open Package dialog. This dialog is the same as the Add Packages dialog used when installing a NuGet package and allows you to search for NuGet packages. The dialog is based on the version available with Xamarin Studio 6.1 so it has a version combo box where you can select a specific package version instead of having to remember the syntax for the package version search.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPackageExplorerForXamarinStudio/OpenPackageDialog.png" title="Open NuGet Package dialog" alt="Open Package dialog"></p>

<p>Select one or more NuGet packages and click the Open Package button to download and display them in Xamarin Studio.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPackageExplorerForXamarinStudio/ViewingJsonNetPackageContents.png" title="Exploring the JSON.NET NuGet package in Xamarin Studio" alt="Exploring the JSON.NET NuGet package in Xamarin Studio"></p>

<p>The NuGet package metadata is shown on the left. On the right are the files that the NuGet package contains. You can also view the .nuspec file stored in the NuGet package by selecting the NuSpec tab at the bottom of the window.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPackageExplorerForXamarinStudio/ViewingJsonNetNuSpec.png" title="Viewing JSON.NET .nuspec file" alt="Viewing JSON.NET .nuspec file"></p>

<h2>Exploring Dependencies</h2>

<p>NuGet package dependencies are displayed with hyperlinks.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPackageExplorerForXamarinStudio/ViewingJsonNetPackageDependencies.png" title="'Viewing JSON.NET dependencies' 'Viewing JSON.NET dependencies" ></p>

<p>If you click one these hyperlinks the Open Package dialog will be opened and the package will be searched for. You can then choose a package version and open the NuGet package.</p>

<h2>Opening Files Contained Inside the NuGet Package</h2>

<p>To open a file contained inside a NuGet package you can double click the file, or right click the file and select Open.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPackageExplorerForXamarinStudio/OpenFileInsideNuGetPackageMenu.png" title="Open menu to open file inside NuGet package into Xamarin Studio" alt="Open menu to open file inside NuGet package into Xamarin Studio"></p>

<p>The file will then be opened inside Xamarin Studio.</p>

<h2>Opening a NuGet Package File</h2>

<p>If you have a NuGet Package (.nupkg) stored on the local machine that is not available from any package source you can open the file directly in Xamarin Studio by selecting Open from the File menu.</p>

<p>You can also associate .nupkg files directly with Xamarin Studio and have them automatically open inside the IDE.</p>

<h2>Opening a NuGet Package Installed in a Project</h2>

<p>You can explore NuGet packages that are installed in your project by right clicking the package in the Solution window and selecting Open Package.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPackageExplorerForXamarinStudio/OpenInstalledPackageMenu.png" title="Open installed package context menu" alt="Open installed package context menu"></p>

<h2>Installing the NuGet Package Explorer addin</h2>

<p>The NuGet Package Explorer addin is available from the MonoDevelop addin repository on the beta channel. It can be installed by from the Add-in Manager by searching the gallery and then clicking the Install button.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetPackageExplorerForXamarinStudio/AddinManagerDialog.png" title="Addin Manager dialog" alt="Addin Manager dialog"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File Nesting in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/07/24/FileNestingInXamarinStudio/"/>
    <updated>2016-07-24T21:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/07/24/FileNestingInXamarinStudio</id>
    <content type="html"><![CDATA[<p>With recent versions of Xamarin Studio it is not currently possible to nest files without directly editing the project file. In the past it was possible to drag and drop a file so it was then nested inside another file.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/SolutionWindowWithNestedFiles.png" title="Solution window with nested files in Xamarin Studio" alt="Solution window with nested files in Xamarin Studio"></p>

<p>Visual Studio also does not support nesting files by using drag and drop however
<a href="http://madskristensen.net/">Mads Kristensen</a> created a <a href="https://visualstudiogallery.msdn.microsoft.com/3ebde8fb-26d8-4374-a0eb-1e4e2665070c">File Nesting extension</a> that adds support for manual and automatic nesting of files within Visual Studio. There is a <a href="https://channel9.msdn.com/Blogs/MadsKristensen/Introducing-File-Nestor-for-Visual-Studio">demo video of the File Nesting extension</a> that shows the extension being used with Visual Studio.
 This extension has now been ported to Xamarin Studio and is available from the <a href="http://addins.monodevelop.com/">MonoDevelop Add-in Repository</a>.</p>

<p>Let us take a walkthrough of the features of the File Nesting addin for Xamarin Studio.</p>

<h2>Features</h2>

<ul>
<li>Manual file nesting</li>
<li>Manual file un-nesting</li>
<li>Automatic file nesting of selected files based on rules</li>
<li>Automatic file nesting when files are added to a project</li>
<li>Options to specify which file nesting rules are applied</li>
</ul>


<h2>Supports</h2>

<ul>
<li>Xamarin Studio 6.0 or MonoDevelop 6.0.</li>
</ul>


<h2>Manual File Nesting</h2>

<p>To manually nest a file select it in the Solution window then right click and select File Nesting &ndash; Nest Item&hellip;</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/NestItemContextMenu.png" title="Manual file nesting - nest item context menu" alt="Manual file nesting - nest item context menu"></p>

<p>This will open a file nesting dialog where the parent file can be selected.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/FileNestingDialog.png" title="File nesting dialog" alt="File nesting dialog"></p>

<p>Select the parent file and click OK to nest the file under that parent file.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/ManualFileNestingResultInSolutionWindow.png" title="Manual file nesting result in solution window" alt="Manual file nesting result in solution window"></p>

<p>You can also nest multiple files under a parent by selecting multiple files in the Solution window and selecting the Nest Item menu.</p>

<h2>Manual File Un-nesting</h2>

<p>To un-nest a file select it in the Solution window then right click and select File Nesting &ndash; Un-nest Item.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/UnNestItemContextMenu.png" title="Manual file nesting - un-nest item context menu" alt="Manual file nesting - un-nest item context menu"></p>

<p>The file will then be un-nested from its parent.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/ManualFileUnNestingResultInSolutionWindow.png" title="Manual file un-nesting result in solution window" alt="Manual file un-nesting result in solution window"></p>

<h2>Automatic Nesting Rules</h2>

<p>The file nesting rules are available from the Preferences dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/FileNestingRulesInPreferencesDialog.png" title="File nesting rules in preferences" alt="File nesting rules in preferences"></p>

<p>Each rule has a tooltip which will show more detailed information about what the rule does.</p>

<h3>Enable auto-nesting</h3>

<p>The Enable auto-nesting option will enable or disable automatic file nesting when a file is added to a project.</p>

<h3>Enable extension rule</h3>

<p>This rule will nest files added with an extra extension under their corresponding parent file. For example MyView.xaml.cs nests under MyView.xaml.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/NestedFileUsingExtensionRule.png" title="Nested file using extension rule" alt="Nested file using extension rule"></p>

<h3>Enable interface implementation rule</h3>

<p>This nests C# interface implementations under the corresponding interface based on the filename. For example, if there is an interface file IMyInterface.cs then a new file called CustomMyInterface.cs will be nested under the IMyInterface file.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/NestedCSharpInterfaceFilesInSolutionWindow.png" title="Nested file using interface implementation rule" alt="Nested file using interface implementation rule"></p>

<h3>Enable known file type rule</h3>

<p>This nests certain known files types. For example, MyPage.ts will be nested under MyPage.html.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/NestedFileUsingKnownFileTypeRule.png" title="Nested file using known file type rule" alt="Nested file using known file type rule"></p>

<h3>Enable path segment rule</h3>

<p>This nests files with an added path segment under its parent. For example, MyFile.Designer.cs nests under MyFile.cs.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/NestedFileUsingPathSegmentRule.png" title="Nested file using path segment rule" alt="Nested file using path segment rule"></p>

<h2>Automatic Nesting of Selected Files</h2>

<p>To automatically nest files, based on the enabled file nesting rules, select the files, or folder, or project, then right click and select File Nesting &ndash; Auto-nest selected items.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/AutoNestSelectedItemsContextMenu.png" title="Auto-nest selected items context menu" alt="Auto-nest selected items context menu"></p>

<p>This will then apply the enabled file nesting rules to the selected files.</p>

<h2>Automatic File Nesting on Adding Files</h2>

<p>To enable automatic file nesting when files are added right click the project and select File Nesting &ndash; Enable automatic nesting.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/EnableAutomaticNestingContextMenu.png" title="Enable automatic nesting context menu" alt="Enable automatic nesting context menu"></p>

<p>A check box will be displayed next to this menu item if this feature is enabled. Now when a file is added the enabled nesting rules will be applied and the file will be automatically nested.</p>

<h2>Installation</h2>

<p>The File Nesting addin is available from the <a href="http://addins.monodevelop.com/">MonoDevelop Add-in Repository</a> on the beta channel. To install the addin open the Add-in Manager, search for the File Nesting addin, then click the Install button.</p>

<p><img src="http://lastexitcode.com/images/blog/FileNestingInXamarinStudio/FileNestingAddinSelectedInAddinManagerWindow.png" title="File Nesting addin in addin manager window" alt="File Nesting addin in addin manager window"></p>

<p>After installing the addin Xamarin Studio will need to be restarted for the addin to work correctly.</p>

<h2>Source Code</h2>

<ul>
<li><a href="https://github.com/mrward/FileNesting">File Nesting addin for Xamarin Studio and MonoDevelop</a></li>
<li><a href="https://github.com/madskristensen/FileNesting">File Nesting extension for Visual Studio</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Test Runner Support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/07/09/NetCoreTestRunnerSupportInXamarinStudio/"/>
    <updated>2016-07-09T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/07/09/NetCoreTestRunnerSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>The latest version of the .NET Core addin for Xamarin Studio and MonoDevelop now supports <a href="https://docs.microsoft.com/en-us/dotnet/articles/core/testing/unit-testing-with-dotnet-test">.NET Core Test Runners</a>.</p>

<p><img src="http://lastexitcode.com/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreTestRunnerSupportInXamarinStudio.png" title=".NET Core Test Runner in Xamarin Studio" alt=".NET Core Test Runner in Xamarin Studio"></p>

<p>Xamarin Studio uses the <a href="https://docs.microsoft.com/en-us/dotnet/articles/core/tools/test-protocol">.NET Core test communication protocol</a> to support .NET Core test runners. This protocol provides a way to discover and run the unit tests provided by a .NET Core test runner.</p>

<p>When Xamarin Studio finds a testRunner in the project.json file it will attempt to discover the unit tests for that project.</p>

<pre><code>{
    "version": "1.1.0-*",

    "testRunner": "nunit",

    "dependencies": {,
        "NUnit": "3.4.0",
        "dotnet-test-nunit": "3.4.0-beta-1"
    },

    "frameworks": {
        "netcoreapp1.0": {
            "imports": [
                "netcoreapp1.0",
                "portable-net45+win8"
            ],
            "dependencies": {
                "Microsoft.NETCore.App": {
                    "version": "1.0.0-*",
                    "type": "platform"
                }
            }
        }
    }
}
</code></pre>

<p>The discovered tests are then shown in the Unit Tests window.</p>

<p><img src="http://lastexitcode.com/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreDiscoveredUnitTestsInUnitTestsWindow.png" title="Discovered NET Core unit tests in Unit Tests window" alt="Discovered NET Core unit tests in Unit Tests window"></p>

<p>After building the project the Unit Tests window will discover any new tests that have been added.</p>

<p>Tests can be run by clicking Run All or by right clicking a test in the Unit Tests window and selecting Run Test.</p>

<p><img src="http://lastexitcode.com/images/blog/NetCoreTestRunnerSupportInXamarinStudio/RunDotNetCoreTestsContextMenu.png" title="Run NET Core unit tests in Unit Tests window" alt="Run NET Core unit tests in Unit Tests window"></p>

<p>The test results are shown in the Test Results window.</p>

<p><img src="http://lastexitcode.com/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreTestResultsWindow.png" title=".NET Core test results  in Test Results window" alt=".NET Core test results  in Test Results window"></p>

<p>Console output from the test runner is shown in the Application Output window.</p>

<p><img src="http://lastexitcode.com/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreTestRunnerApplicationOutput.png" title=".NET Core Test Runner in Xamarin Studio" alt=".NET Core Test Runner in Xamarin Studio"></p>

<p>Debugging the unit tests is not yet supported.</p>

<p><a href="https://xunit.github.io/">xUnit</a> and <a href="http://nunit.org/">NUnit</a> provide .NET Core test runners and both of these are supported in Xamarin Studio. More information can be found in existing tutorials on how to use these test runners:</p>

<ul>
<li> <a href="http://www.alteridem.net/2016/06/18/nunit-3-testing-net-core-rc2/">NUnit 3 Tests for .NET Core RC2 and ASP.NET Core RC2</a></li>
<li> <a href="http://xunit.github.io/docs/getting-started-dotnet-core.html">Getting started with xUnit.net (.NET Core / ASP.NET Core)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 6.0]]></title>
    <link href="http://lastexitcode.com/blog/2016/06/12/NuGetSupportInXamarinStudio6-0/"/>
    <updated>2016-06-12T14:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/06/12/NuGetSupportInXamarinStudio6-0</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 6.0 was released last week and it includes a lot of <a href="https://blog.xamarin.com/live-from-dotnetconf-cycle-7-xamarin-studio-6-and-more/">new features</a>, such as a new dark theme and <a href="https://github.com/dotnet/roslyn">Roslyn integration</a>. This release also includes some improvements made to the NuGet support.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-0/AddPackagesDialogDarkTheme.png" title="Add Packages Dialog - Dark Theme" alt="Add Packages Dialog - Dark Theme"></p>

<h2>New Features</h2>

<ul>
<li> Support NuGet packages targeting tvOS.</li>
<li> Support updating pre-release NuGet packages.</li>
<li> Show updates available for pre-release NuGet packages.</li>
<li> Remember Show pre-release Packages setting in Add Packages dialog.</li>
<li> Error dialog displayed if NuGet.Config file cannot be read.</li>
</ul>


<p>More information on all the changes in Xamarin Studio 6.0 can be found in the <a href="https://developer.xamarin.com/releases/studio/xamarin.studio_6.0/xamarin.studio_6.0/">release notes</a>.</p>

<h2>Support NuGet packages targeting watchOS</h2>

<p>A new Xamarin.WatchOS target framework is now supported which allows NuGet packages to contain assemblies for watchOS.</p>

<h2>Support updating pre-release NuGet packages</h2>

<p>Previously it was not possible to update a pre-release NuGet package to a later pre-release  from the Solution window, only updates to stable NuGet packages were supported. The only way to update to a later pre-release NuGet package was to use the Add Packages dialog.</p>

<p>Now an individual pre-release NuGet package can be updated by right clicking and selecting Update. When all packages in a project or solution are updated then pre-release NuGet packages will be updated to a later pre-release version if they are available.</p>

<h2>Show updates available for pre-release NuGet packages</h2>

<p>Previously Xamarin Studio would only show stable NuGet package updates as being available if a pre-release NuGet package was installed. Now Xamarin Studio will check for updates for pre-release NuGet packages as well as stable packages and display this information in the Solution window.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio6-0/PreReleaseNuGetPackageUpdatesInSolutionWindow.png" title="Pre-release NuGet package updates in Solution window" alt="Pre-release NuGet package updates in Solution window"></p>

<p>Only if an installed NuGet package is a pre-release version will pre-release updates be shown as available in the Solution window. Xamarin Studio will not check for pre-release updates for stable NuGet package versions that are installed.</p>

<h2>Remember Show pre-release Packages setting in Add Packages dialog</h2>

<p>The Show pre-release Packages check box setting will now be remembered in the Add Packages dialog on a per solution basis.</p>

<h2>Error dialog displayed if the NuGet.Config file cannot be read</h2>

<p>Previously if the NuGet.Config file could not be read the error would
be silently logged, but not reported, and Xamarin Studio would
then switch to using the default official NuGet package source. Now an error
dialog is shown indicating that there was a problem reading the
NuGet.Config file.</p>

<h2>Bug Fixes</h2>

<p><strong>Support NuGet packages that use icons from local files</strong></p>

<p>A NuGet package can now use an icon, which will be shown in the Add Packages
dialog, taken from the local file system using a file url. Previously this would fail with an invalid cast exception.</p>

<p><strong>Incorrect update count displayed after updating NuGet packages.</strong></p>

<p>When an update caused a NuGet package to be uninstalled the Packages
folder in the Solution window would show an incorrect count for the available updates.</p>

<p><strong>NuGet restore and update not working for workspaces</strong></p>

<p>With a workspace opened, or multiple solutions opened in Xamarin Studio, then restoring and updating NuGet packages would only work for one of the solutions.</p>

<p><strong>Unable to add Google Play Services packages</strong></p>

<p>The Xamarin.Android.Support.v7.AppCompat NuGet package depends on
a single version of the Xamarin.Android.Support.v4 NuGet package.
When a Xamarin Google Play Services NuGet package is installed
that depends on a higher version of the Xamarin.Android.Support.v4
NuGet package the install would fail to find a version of the
AppCompat NuGet package that is compatible. An error similar to the
following would be displayed in the Package Console window:</p>

<pre><code>Could not add Xamarin.GooglePlayServices.Ads.
Updating 'Xamarin.Android.Support.v4 23.1.1.0' to
'Xamarin.Android.Support.v4 23.1.1.1' failed. Unable to find a version
of 'Xamarin.Android.Support.v7.AppCompat' that is compatible with
'Xamarin.Android.Support.v4 23.1.1.1'.
</code></pre>

<p>The problem was that the AppCompat NuGet package is not involved
in the initial NuGet package resolution using the remote package
source so it is initially not considered for installation into the
packages directory. When a package reference is then added to the
packages.config file a search for a compatible AppCompat package was
only using the local solution&rsquo;s packages directory which fails causing
the install to fail.</p>

<p>To fix this the local solution packages directory is used first
when looking for a compatible AppCompat NuGet package and will
fallback to using the configured remote package sources if no suitable package
is found in this directory. To handle a package being added to the
packages.config at this point, after the original NuGet packages have
already been downloaded to the solution&rsquo;s packages directory, Xamarin Studio will detect a package is added to the packages.config file and install the NuGet package if it is not
already in the local solution packages directory.</p>

<p><strong>Incorrect package version being installed</strong></p>

<p>When installing a NuGet package using the Google Play Services dialog a package version is not specified by the dialog. If the NuGet package being installed was found in the local machine&rsquo;s NuGet cache it would be used instead of the latest version from the official NuGet gallery at nuget.org. This could result in a lower version being installed than expected.</p>

<p><strong>MSBuild property files (.props) not being added at correct project location</strong></p>

<p>Installing a NuGet package that included an MSBuild .props file would
add an Import element for the .props at the end of the project file
(.csproj) instead of at the start. The .props files are now added to the project
file as the first child element inside the project&rsquo;s root element.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Core 1.0 RC2 support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/06/05/AspNetCoreRC2SupportInXamarinStudio/"/>
    <updated>2016-06-05T19:02:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/06/05/AspNetCoreRC2SupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio and MonoDevelop now have support for <a href="https://blogs.msdn.microsoft.com/webdev/2016/05/16/announcing-asp-net-core-rc2/">ASP.NET Core 1.0 RC2</a> with an alpha release of the <a href="https://github.com/mrward/monodevelop-dnx-addin">.NET Core addin</a>.</p>

<p><img src="http://lastexitcode.com/images/blog/AspNetCoreRC2SupportInXamarinStudio/WebProjectInSolutionWindow.png" title="ASP.NET Core web project in Solution window" alt="ASP.NET Core web project in Solution window"></p>

<p>This is an update of the original <a href="http://lastexitcode.com/blog/2016/01/01/DNXSupportInXamarinStudio/">DNX addin</a> which adds support for .NET Core RC2 and also, thanks to <a href="https://twitter.com/davidkarlas">David Karlaš</a>, adds support for debugging .NET Core applications on the Mac.</p>

<h2>Features</h2>

<ul>
<li> Debugging .NET Core applications with the .NET Core CLR on Mac.</li>
<li> Project templates for console, library and web applications</li>
<li> Code completion</li>
<li> NuGet integration</li>
<li> Solution window integration</li>
</ul>


<h2>Supports</h2>

<ul>
<li> MonoDevelop and Xamarin Studio 6.0 (build 5166). (Note that 6.1 is not yet supported)</li>
<li> <a href="https://www.microsoft.com/net/core">.NET Core 1.0 RC2</a>.</li>
</ul>


<h2>Installing .NET Core SDK</h2>

<p>The <a href="https://www.microsoft.com/net/core">.NET Core SDK</a> needs to be installed separately before using the .NET Core addin. Detailed installation instructions can be found on <a href="https://www.microsoft.com/net/core">Microsoft&rsquo;s .NET Core web site</a>.</p>

<h2>Installing the addin</h2>

<p>The addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> in the alpha channel. In Xamarin Studio open the Add-in Manager and select the Gallery tab. Click the repository drop down and if <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> is not displayed then click Manage Repositories. In the window that opens tick the check box next to Xamarin Studio Add-in Repository (Alpha Channel) and then click the Close button.</p>

<p><img src="http://lastexitcode.com/images/blog/AspNetCoreRC2SupportInXamarinStudio/AddinManagerNetCoreAddin.png" title=".NET Core addin selected in Addin Manager dialog" alt=".NET Core addin selected in Addin Manager dialog"></p>

<p>Select the .NET Core addin and then click the Install button.</p>

<p>After installing the .NET Core addin you will need to restart Xamarin Studio before the project templates are available in the New Project dialog.</p>

<h2>Creating a .NET Core project</h2>

<p>There are three project templates available for .NET Core in the New Project dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/AspNetCoreRC2SupportInXamarinStudio/NewProjectDialogNetCoreProjectTemplates.png" title="New ASP.NET 5 project templates" alt="New ASP.NET 5 project templates"></p>

<h2>Debugging</h2>

<p>Thanks to <a href="https://twitter.com/davidkarlas">David Karlaš</a> there is a support for debugging .NET Core applications when running on the .NET Core CLR if you have the <a href="http://addins.monodevelop.com/Project/Index/228">VSCode Debugger addin</a> installed.</p>

<p><img src="http://lastexitcode.com/images/blog/AspNetCoreRC2SupportInXamarinStudio/DebuggingNetCoreApplication.png" title="Debugging a .NET Core application" alt="Debugging a .NET Core application"></p>

<p>The VSCode Debugger addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> on the alpha channel.</p>

<p>Debugging .NET Core console and web projects that target the full .NET framework is supported on all platforms. The .NET Core command line tool (dotnet.exe) will create an executable when targeting the full .NET Framework which can be debugged in Xamarin Studio. On Windows the x86 version of the .NET Core SDK needs be installed since Xamarin Studio currently cannot debug x64 applications on Windows.</p>

<h2>Source Code</h2>

<p>The source code for the addin is available on GitHub.</p>

<ul>
<li><a href="https://github.com/mrward/monodevelop-dnx-addin">.NET Core addin source code</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET 5 and DNX support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/01/01/DNXSupportInXamarinStudio/"/>
    <updated>2016-01-01T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2016/01/01/DNXSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio and MonoDevelop now have support for <a href="http://docs.asp.net/en/latest/dnx/overview.html">ASP.NET 5 and DNX</a> with an alpha release of the <a href="https://github.com/mrward/monodevelop-dnx-addin">DNX addin</a>.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/DnxWebProjectInSolutionWindow.png" title="DNX web project in Solution window" alt="DNX web project in Solution window"></p>

<p>The core part of the addin that communicates with the DNX host is taken directly from <a href="https://github.com/OmniSharp/omnisharp-roslyn">OmniSharp</a> and is used mostly unchanged.</p>

<h2>Features</h2>

<ul>
<li> Project templates for console, library and web applications</li>
<li> Code completion</li>
<li> Debugger support with Mono 4.3</li>
<li> NuGet integration</li>
<li> Solution window integration</li>
</ul>


<h2>Supports</h2>

<ul>
<li> MonoDevelop and Xamarin Studio 5.9 and later versions.</li>
<li> ASP.NET 5 RC 1 Update 1 and earlier versions.</li>
</ul>


<h2>Installing ASP.NET 5</h2>

<p><a href="https://get.asp.net/">ASP.NET 5</a> needs to be installed separately before using the DNX addin. There are instructions on <a href="https://get.asp.net/">get.asp.net</a> on how to do this for Mac, Linux and Windows.</p>

<h2>Installing the addin</h2>

<p>The addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> in the alpha channel. In Xamarin Studio open the Add-in Manager and select the Gallery tab. Click the repository drop down and if <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> is not displayed then click Manage Repositories. In the window that opens tick the check box next to Xamarin Studio Add-in Repository (Alpha Channel) and then click the Close button.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/AddingAlphaChannelAddins.png" title="Enabling alpha channel addins" alt="Enabling alpha channel addins"></p>

<p>Back in the Add-in Manager dialog click the Refresh button to update the list of addins. Use the search text box in the top right hand corner of the dialog to search for the addin by typing in <strong>DNX</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/AddinManagerDnxAddin.png" title="DNX addin selected in Addin Manager dialog" alt="DNX addin selected in Addin Manager dialog"></p>

<p>Select the DNX addin and then click the Install button.</p>

<p>After installing the DNX addin you will need to restart Xamarin Studio before the project templates will be available in the New Project dialog.</p>

<h2>Creating an ASP.NET 5 project</h2>

<p>There are three project templates available for ASP.NET 5 in the New Project dialog.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/NewProjectDialogDnxProjectTemplates.png" title="New ASP.NET 5 project templates" alt="New ASP.NET 5 project templates"></p>

<p>Each of the project templates will create a solution and an .xproj file in the same way as Visual Studio 2015 does. The projects created should be compatible with Visual Studio 2015.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/DnxConsoleProjectInSolutionWindow.png" title="DNX console project in Solution window" alt="DNX console project in Solution window"></p>

<h2>Dependencies</h2>

<p>When you create or open an ASP.NET 5 project the NuGet packages it uses will automatically be restored.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/SolutionWindowRestoringNuGetPackages.png" title="Restoring NuGet packages in Solution window" alt="Restoring NuGet packages in Solution window"></p>

<p>In the Solution window the dependencies show a warning icon if they are not resolved and the Dependencies folder shows a message that it is restoring the NuGet packages. Once restored you can expand the Dependencies folder and see the dependency hierarchy.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/DnxConsoleProjectDependenciesExpanded.png" title="Dependency hierarchy in Solution window" alt="Dependency hierarchy in Solution window"></p>

<p>If the DNX runtime being used by the solution is not installed then an error icon will be displayed next to the Dependencies folder.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/SolutionWindowDependenciesError.png" title="Dependencies error icon in Solution window" alt="Dependencies error icon in Solution window"></p>

<p>Hovering the mouse over the error icon will show more information about the error.</p>

<h2>Building</h2>

<p>When you build the solution or project any errors and warnings are displayed in the Errors window and in the text editor. No assemblies are generated when you build.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/TextEditorDnxBuildError.png" title="DNX build error in text editor" alt="DNX build error in text editor"></p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/DnxBuildErrorsInErrorsWindow.png" title="DNX build errors in Errors window" alt="DNX build errors in Errors window"></p>

<h2>Running</h2>

<p>The main toolbar shows the currently selected command and the framework that will be used when the application is run. These are taken from the project.json file.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/DnxCommandsInMainToolbar.png" title="DNX commands in main toolbar" alt="DNX commands in main toolbar"></p>

<p>The screenshot above shows the main toolbar for a web project. There are three entries:</p>

<ul>
<li> web</li>
<li> web DNX 4.5.1</li>
<li> web DNX Core 5.0</li>
</ul>


<p>The first entry will run the web command and use the default runtime which will currently be DNX 4.5.1. The last two entries will run the web command but will explicitly run the application with the specified runtime.</p>

<h2>Debugging</h2>

<p>Thanks to <a href="https://twitter.com/davidkarlas">David Karlaš</a> and <a href="https://github.com/vargaz">Zoltan Varga</a> there is support for debugging DNX applications with DNX 4.5.1 if you have <a href="http://download.mono-project.com/archive/nightly/macos-10-universal/">Mono 4.3</a> installed.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/DebuggingDnxApplication.png" title="Debugging a DNX application" alt="Debugging a DNX application"></p>

<p>Debugging ASP.NET 5 projects with the CoreCLR is not supported on Mac nor on Linux. Debugging ASP.NET 5 projects is not supported at all on Windows.</p>

<h2>Adding NuGet Packages</h2>

<p>To add a NuGet package to a project you can right click the Dependencies folder in the Solution window and select Add NuGet Packages, or alternatively you can double click the Dependencies folder.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/AddNuGetPackagesMenuItem.png" title="Add NuGet Packages menu in Solution window" alt="Add NuGet Packages menu in Solution window"></p>

<p>This will open up the Add NuGet Packages dialog. Installing a NuGet package using this dialog will add the NuGet package into the project.json file.</p>

<p>Note that using the Add Packages dialog from the Packages folder will not add the NuGet package into the project.json file and will instead download the package to the packages directory and update the packages.config file.</p>

<h2>Adding Dependencies</h2>

<p>Dependencies can also be added directly into the project.json file. Currently there is no code completion available in the project.json file but changes to the file are monitored and the Dependencies folder will be updated when items are added or removed. New NuGet package dependencies that are added will automatically be restored if they are missing.</p>

<h2>Removing Dependencies</h2>

<p>A dependency can be removed by selecting it in the Solution window, right clicking and selecting Remove, or by pressing the delete key.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/RemoveDependencyMenuItem.png" title="Remove dependency menu in Solution window" alt="Remove dependency menu in Solution window"></p>

<h2>Changing the active framework</h2>

<p>In Visual Studio the active framework can be changed by selecting it from the drop down list at the top of the text editor. Currently using the drop down list at the top of the text editor to change the active framework is not supported in Xamarin Studio. Instead you can right click in the text editor, select Active Framework and then select the framework.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/TextEditorSelectActiveDnxFramework.png" title="Active DNX framework context menu in text editor" alt="Active DNX framework context menu in text editor"></p>

<p>The active framework affects the code completion provided in the text editor. In the screenshot below the active framework has been set to DNX Core and you can see that the DateTime type does not show ToShortDateString in its completion list.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/DnxCodeCompletionForActiveFramework.png" title="Code completion for active DNX framework" alt="Code completion for active DNX framework"></p>

<p>You can also see that the code in the #if DNX451 block is grayed out since it is not used with the currently active framework.</p>

<h2>DNX Output</h2>

<p>Output from the DNX host and from OmniSharp can be seen in the DNX Output window. This window can be opened by selecting <strong>DNX Output</strong> from the <strong>View</strong> menu.</p>

<p><img src="http://lastexitcode.com/images/blog/DNXSupportInXamarinStudio/DnxOutputWindow.png" title="DNX Output window" alt="DNX Output window"></p>

<p>By default only warnings and errors will be displayed in the DNX Output window. To see more or less information you can change the DNX output verbosity in preferences in the DNX &ndash; General section.</p>

<h2>Known Issues</h2>

<p><strong>kqueue() FileSystemWatcher has reached the maximum number of files to watch</strong></p>

<p> When opening a project with many source files, such as AutoFac, you may see the above FileSystemWatcher error message. To resolve this problem you can set the MONO_MANAGED_WATCHER to false:</p>

<pre><code>export MONO_MANAGED_WATCHER=false
</code></pre>

<p>Xamarin Studio will need to be run from the command line for this environment variable to be used.</p>

<p><strong>project.json file formatting</strong></p>

<p>When adding or removing dependencies from the Solution window will cause the project.json file to be reformatted differently compared to how Visual Studio 2015 formats the file.</p>

<h2>Source Code</h2>

<p>The source code for the addin is available on GitHub.</p>

<ul>
<li><a href="https://github.com/mrward/monodevelop-dnx-addin">DNX addin source code</a>.</li>
</ul>


<p> There is also a <a href="https://github.com/mrward/monodevelop-dnx-addin/tree/roslyn">separate branch</a> that supports MonoDevelop and Xamarin Studio 6.0.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.10]]></title>
    <link href="http://lastexitcode.com/blog/2015/11/22/NuGetSupportInXamarinStudio5-10/"/>
    <updated>2015-11-22T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2015/11/22/NuGetSupportInXamarinStudio5-10</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 5.10 was released last week as part of the <a href="https://blog.xamarin.com/introducing-xamarin-4/">Xamarin 4 release</a> and it includes changes to the NuGet support.</p>

<h2>Changes</h2>

<ul>
<li> Support NuGet 2.8.7.</li>
<li> Open readme.txt when a NuGet package is installed.</li>
<li> Support packages.config file named after the project.</li>
<li> Local Copy settings are preserved for references when updating packages.</li>
<li> Do not show Checking for package updates message in status bar.</li>
<li> Do not show warning in the status bar if a NuGet package has PowerShell scripts.</li>
<li> Prevent the solution being closed when NuGet packages are being added.</li>
<li> Removing a NuGet package does not update the Solution window when multiple solutions are open.</li>
<li> Prevent packages.config file being marked as deleted by Git after updating a pre-release NuGet package.</li>
<li> Prevent retargeting a NuGet package marking packages.config as deleted by Git.</li>
<li> Allow Microsoft.ApplicationInsights NuGet package to be installed.</li>
<li> Support NuGet packages targeting watchOS.</li>
<li> Package license acceptance (Xamarin Studio 5.10.3)</li>
</ul>


<p>More information on all the changes in Xamarin Studio 5.10 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.10/xamarin.studio_5.10/">release notes</a>.</p>

<h2>NuGet 2.8.7 support</h2>

<p>Xamarin Studio now supports NuGet 2.8.7. NuGet 2.8.7 adds support for the Universal App Platform (UAP) target framework to support Windows 10 Application Development.</p>

<h2>Open readme.txt when a NuGet package is installed</h2>

<p>A NuGet package can contain a <a href="https://docs.nuget.org/create/creating-and-publishing-a-package#user-content-automatically-displaying-a-readmetxt-file-during-package-installation">readme.txt file</a> which Xamarin Studio will now open and display in the text editor when the NuGet package is installed or updated.</p>

<h2>Preserve Local Copy on Updating Packages</h2>

<p>The Local Copy setting on an assembly reference will now be preserved when updating a NuGet package or retargeting a NuGet package.</p>

<p>By default Local Copy is set to true for assembly references when installing a NuGet package. If you set Local Copy to false for one or more of these references then this setting will now be preserved when updating or retargeting the NuGet package.</p>

<h2>Packages.config file named after project</h2>

<p>NuGet supports multiple projects in the same directory each using their own packages.config file. To allow multiple projects in the same directory to each use their own NuGet packages you can name the packages.config file after each project. In the examples below the project filename is on the left and the corresponding packages.config filename is on the right.</p>

<ul>
<li>Foo.csproj => packages.Foo.config</li>
<li>Bar.csproj => packages.Bar.config</li>
<li>Foo Bar.csproj => packages.Foo_Bar.config</li>
</ul>


<p>Xamarin Studio now checks for the packages.ProjectName.config file first and will use it if it exists, otherwise it will fall back to the default behaviour and use the packages.config file.</p>

<p>Note that a new project without any NuGet packages will use a packages.config file by default. The basic procedure to enable a project specific packages.config file when creating a new project is:</p>

<ol>
<li>Create new project called Foo.</li>
<li>Add a NuGet package to the Foo project.</li>
<li>Rename the packages.config file to packages.Foo.config</li>
<li>Reload the solution in Xamarin Studio.</li>
</ol>


<p>Also note that if you remove all the NuGet packages from a project the packages.ProjectName.config file will be deleted and on adding a new NuGet package the default packages.config file will be used.</p>

<h2>Do not show Checking for package updates message in status bar</h2>

<p>Previously when Xamarin Studio was checking for NuGet package updates a message would appear in the status bar. This status bar message has now been removed since checking for NuGet package updates is a background task and does not prevent Xamarin Studio from being used.</p>

<h2>Do not show warning in the status bar if a NuGet package has PowerShell scripts</h2>

<p>Previously if a NuGet package was installed and it contained PowerShell scripts then a warning was shown in the status bar. Now this message is only shown in the Package Console window.</p>

<h2>Prevent the solution being closed when NuGet packages are being added</h2>

<p>A check is now made when Xamarin Studio is closed to see if NuGet packages are still being installed. If this is the case then a dialog will be displayed indicating that it is not currently possible to close Xamarin Studio allowing the NuGet package to finish installing.</p>

<h2>Support NuGet packages targeting watchOS</h2>

<p>A new Xamarin.WatchOS target framework is now supported which allows NuGet packages to contain assemblies for watchOS.</p>

<h2>Package license acceptance</h2>

<p>Xamarin Studio 5.10.3 now includes a license acceptance dialog that will be displayed if a NuGet package requires a license to be accepted before it is installed. If the license is declined then the NuGet package will not be installed.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-10/PackageLicenseAcceptanceDialog.png" title="Package license acceptance dialog" alt="Package license acceptance dialog"></p>

<h2>Bug Fixes</h2>

<p><strong>Removing a NuGet package does not update the Solution window when multiple solutions are open</strong></p>

<p>With two or more solutions opened at the same time the Packages folder would not be updated for all solutions when a NuGet package was removed. This was because Xamarin Studio was not refreshing the Packages folder for all solutions currently open.</p>

<p><strong>Prevent packages.config file being marked as deleted by Git after updating pre-release NuGet package.</strong></p>

<p>If there was only one pre-release NuGet package installed into a project and then a later version of the NuGet package was installed from the Add Packages dialog then the packages.config file was then being shown as deleted by Git instead of modified.</p>

<p>The packages.config file is deleted by NuGet after the old NuGet package is uninstalled if there are no NuGet packages referenced. A special case to handle this was added in Xamarin Studio 5.3 but that only handled updating a NuGet package from the Solution window. Now updating a pre-release from the Add Packages dialog is also handled.</p>

<p><strong>Retargeting a NuGet package marks packages.config as deleted by Git</strong></p>

<p>This is similar to the previous bug. Retargeting a NuGet package will uninstall and then install the NuGet package. If there is only one NuGet package in the project then the packages.config file is deleted and was causing Git to mark the file as deleted instead of updated.</p>

<p><strong>Unable to install Microsoft.ApplicationInsights NuGet package</strong></p>

<p>Xamarin Studio 5.9.2 added support for NuGet 2.8.5 but it was not possible to install the <a href="https://www.nuget.org/packages/Microsoft.ApplicationInsights/">Microsoft.ApplicationInsights NuGet package</a> into a project. It was possible to install it using Visual Studio with NuGet 2.8.3 or higher installed. The error reported by Xamarin Studio was:</p>

<pre><code>Adding Microsoft.ApplicationInsights...
The 'Microsoft.ApplicationInsights' package requires NuGet client version '2.8.50313' or above, but the current NuGet version is '2.8.5.0'.
</code></pre>

<p>Xamarin Studio 5.10 now allows the Microsoft.ApplicationInsights NuGet package to be installed into a project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScript Addin 0.6 Released]]></title>
    <link href="http://lastexitcode.com/blog/2015/08/09/TypeScriptAddin0-6Released/"/>
    <updated>2015-08-09T15:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/08/09/TypeScriptAddin0-6Released</id>
    <content type="html"><![CDATA[<p>A new version of the TypeScript addin for Xamarin Studio and MonoDevelop has been released. The addin is available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> in the alpha channel. More details on how to install the addin can be found in the <a href="http://lastexitcode.com/blog/2015/04/01/TypeScriptSupportInXamarinStudio/">TypeScript support in Xamarin Studio post</a>.</p>

<h2>Changes</h2>

<ul>
<li>Updated to support <a href="http://blogs.msdn.com/b/typescript/archive/2015/07/20/announcing-typescript-1-5.aspx">TypeScript 1.5</a>.</li>
<li>Linux 32 bit and 64 bit are now supported with a single addin. Thanks to <a href="https://github.com/chrisber">Christian Bernasko</a>.</li>
<li>Allow UMD and System modules to be selected in project options.</li>
</ul>


<p>The separate TypeScript Linux 32 bit addin is now deprecated since the TypeScript addin can now be used on 32 bit and 64 bit versions of Linux.</p>

<h2>Bug Fixes</h2>

<ul>
<li>TypeScript language service host not updated when the project options are changed</li>
</ul>


<p>For example, switching from ES3 to ES6 in the project options could cause the code completion to be incorrect since the language service host compiler settings were not being updated.</p>

<ul>
<li>TypeScript options shown when viewing solution options</li>
</ul>


<p>The TypeScript options are now only available when the project options are selected.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paket Support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2015/06/09/PaketSupportInXamarinStudio/"/>
    <updated>2015-06-09T19:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/06/09/PaketSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio and MonoDevelop now have support for <a href="http://fsprojects.github.io/Paket/">Paket</a> with an alpha release of the <a href="https://github.com/mrward/monodevelop-paket-addin">Paket Addin</a>.</p>

<p>Paket is a dependency manager for .NET. The dependencies it supports are <a href="http://fsprojects.github.io/Paket/nuget-dependencies.html">NuGet packages</a>, files from <a href="http://fsprojects.github.io/Paket/github-dependencies.html">GitHub, Gists</a> or files from any <a href="http://fsprojects.github.io/Paket/http-dependencies.html">HTTP source</a>. Paket can be used to maintain project dependencies completely from the command line.</p>

<p>So let us take a look at the support for Paket in Xamarin Studio and MonoDevelop.</p>

<h2>Features</h2>

<ul>
<li> View dependencies and referenced NuGet packages in the Solution window.</li>
<li> Add, remove, update NuGet packages from the Solution window.</li>
<li> Install, restore, simplify NuGet packages from the Solution window.</li>
<li> Check for updated NuGet packages from the Solution window.</li>
<li> Syntax highlighting for all paket files.</li>
<li> Code completion whilst editing the paket.dependencies file.</li>
<li> Integrates with Xamarin Studio&rsquo;s unified search.</li>
<li> paket.dependencies and paket.template file templates.</li>
</ul>


<h2>Installing the addin</h2>

<p>The addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> in the alpha channel. In Xamarin Studio open the Add-in Manager and select the Gallery tab. Click the repository drop down and if <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> is not displayed then click <strong>Manage Repositories&hellip;</strong>. In the window that opens tick the check box next to <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> and then click the Close button.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/AddingAlphaChannelAddins.png" title="Enabling alpha channel addins" alt="Enabling alpha channel addins"></p>

<p>Back in the Add-in Manager dialog click the Refresh button to update the list of addins. Use the search text box in the top right hand corner of the dialog to search for the addin by typing in <strong>Paket</strong>.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/AddinManagerPaketAddin.png" title="Paket addin selected in Addin Manager dialog" alt="Paket addin selected in Addin Manager dialog"></p>

<p>Select the Paket addin and then click the <strong>Install&hellip;</strong> button.</p>

<p>Now let us take a look at adding a NuGet package to your project with Paket. This is a simple way to get started with Paket in Xamarin Studio without having to manually create any paket files.</p>

<h2>Adding a NuGet Package</h2>

<p>To add a NuGet package using Paket, right click the project in the Solution window, and select Add &ndash; Add NuGet Packages using Paket.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/AddNuGetPackagesUsingPaketSolutionWindowMenu.png" title="Add NuGet Package using Paket Solution window context menu" alt="Add NuGet Package using Paket Solution window context menu"></p>

<p>The Add NuGet Packages using Paket menu is also available from the main Project menu.</p>

<p>This opens the Add NuGet Packages dialog. Search for the NuGet package you want to use and click the Add Package button.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/AddNuGetPackagesDialog.png" title="Add NuGet Packages dialog" alt="Add NuGet Packages dialog"></p>

<p>The Status Bar will update as the NuGet package is installed.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/JsonNetPackageAddedStatusBarMessage.png" title="Json.NET added status bar message" alt="Json.NET added status bar message"></p>

<p>More detailed information about the installation can be found in the Paket Console window. This can be opened by clicking the Status Bar or from the View &ndash; Pads menu.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/JsonNetPackageAddedPaketConsole.png" title="Json.NET added Paket Console messages" alt="Json.NET added Paket Console messages"></p>

<p>After the NuGet package has been installed successfully you will see two new items in the Solution window. A Paket Dependencies folder and a Paket References folder.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketFoldersInSolutionWindow.png" title="Paket folders in Solution window" alt="Paket folders in Solution window"></p>

<p>These folders show the NuGet packages that are in the paket.dependencies and paket.references files.</p>

<h2>Paket Dependencies Folder</h2>

<p>The Paket Dependencies folder is shown in the Solution window if Xamarin Studio finds a paket.dependencies file in the same directory as the solution. The NuGet packages that are in the paket.dependencies file are shown under this folder.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFolderInSolutionWindow.png" title="Paket Dependencies folder in Solution window" alt="Paket Dependencies folder in Solution window"></p>

<p>Double clicking the folder will open the paket.dependencies file into the text editor. The Paket Dependencies folder also has a context menu where you can run Paket commands.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFolderContextMenu.png" title="Paket Dependencies folder context menu" alt="Paket Dependencies folder context menu"></p>

<p>From the context menu you can Add a NuGet Package as a dependency, install, restore, update, and simplify your dependencies, or check for updates. When you select Check for Updates the updated NuGet package information will be shown in the Paket Console and in the Solution window.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFolderNuGetPackageUpdateInformation.png" title="Paket Dependencies folder NuGet package update information" alt="Paket Dependencies folder NuGet package update information"></p>

<p>To update a single NuGet package you can right click it and select Update. To remove the NuGet package as a dependency you can right click it and select Remove or press delete.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketDependencyNuGetPackageContextMenu.png" title="Paket Dependencies folder NuGet package context menu" alt="Paket Dependencies folder NuGet package context menu"></p>

<h2>Paket References Folder</h2>

<p>The Paket References folder is shown in the Solution window if Xamarin Studio finds a paket.references file in the same directory as the project. The NuGet packages that are in the paket.references file are shown under this folder. Double clicking the folder will open the paket.references file into the text editor.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketReferencesFolderInSolutionWindow.png" title="Paket References folder in Solution window" alt="Paket References folder in Solution window"></p>

<p>Right clicking the Paket References folder allows you to add a NuGet package to the project.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketReferencesFolderAddPackagesMenu.png" title="Paket References folder context menu" alt="Paket References folder context menu"></p>

<p>A NuGet package can be removed by right clicking it and selecting Remove or by pressing Delete.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketReferencesFolderNuGetPackageContextMenu.png" title="Paket References folder NuGet package context menu" alt="Paket References folder NuGet package context menu"></p>

<h2>Code Completion</h2>

<p>When editing the paket.dependencies file you will get code completion as you type. You can also bring up the code completion list by pressing Ctrl+Space.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFileKeywordCompletion.png" title="paket.dependencies file keyword completion" alt="paket.dependencies file keyword completion"></p>

<p>Keywords that have an associated value will also show code completion after a space is pressed or the first character is typed in.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFileKeywordValueCompletion.png" title="paket.dependencies file keyword value completion" alt="paket.dependencies file keyword value completion"></p>

<p>After the source keyword you will see a list of NuGet package sources that are defined in your NuGet.Config file.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFileNuGetSourceCompletion.png" title="paket.dependencies file NuGet source completion" alt="paket.dependencies file NuGet source completion"></p>

<p>After the nuget keyword you will see a list of NuGet packages.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFileNuGetPackageCompletion.png" title="paket.dependencies file NuGet package completion" alt="paket.dependencies file NuGet package completion"></p>

<p>This list of NuGet packages is currently taken from your local machine&rsquo;s NuGet cache. Currently there is no support for asynchronously searching an online NuGet package source to get the list of NuGet packages.</p>

<h2>Running Paket commands</h2>

<p>Paket commands can be run from the Unified search. If you type in paket you will see some of the Paket commands.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketCommandsInUnifiedSearch.png" title="Paket commands in unified search" alt="Paket commands in unified search"></p>

<p>The syntax for each command is the similar to what the paket.exe console application supports but the commands do not support all the parameters.</p>

<p>As you type more of the command the list of commands will be filtered. To run a command select it and then press the enter key. These commands directly run paket.exe and update the paket files and project files. The status of the current command is shown in the Status Bar and the output from paket.exe is shown in the Paket Console window.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketDependenciesInstalledStatusBarMessage.png" title="Paket dependencies installed status bar message" alt="Paket dependencies installed status bar message"></p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketDependenciesInstalledPaketConsoleOutput.png" title="Paket dependencies installed console message" alt="Paket dependencies installed console message"></p>

<p>The Paket Console window will automatically be displayed if there was an error running a command and an error message will be displayed in the Status Bar.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/StatusBarAddNuGetPackagedErrorMessage.png" title="Paket error message in Status Bar" alt="Paket error message in Status Bar"></p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketConsoleAddNuGetPackagedErrorMessage.png" title="Paket console error message" alt="Paket console error message"></p>

<p>Otherwise you can open the Paket Console by clicking the Status Bar.</p>

<h2>Syntax highlighting</h2>

<p>Syntax highlighting is available for all paket files &ndash; paket.dependencies, paket.references, paket.lock and paket.template.</p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFileSyntaxHighlighting.png" title="paket.dependencies file syntax highlighting" alt="paket.dependencies file syntax highlighting"></p>

<p><img src="http://lastexitcode.com/images/blog/PaketSupportInXamarinStudio/PaketLockFileSyntaxHighlighting.png" title="paket.lock file syntax highlighting" alt="paket.lock file syntax highlighting"></p>

<p>This brings us to the end of the introduction to Paket support in Xamarin Studio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.9.2]]></title>
    <link href="http://lastexitcode.com/blog/2015/06/07/NuGetSupportInXamarinStudio5-9-2/"/>
    <updated>2015-06-07T10:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/06/07/NuGetSupportInXamarinStudio5-9-2</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 2.8.5 support</li>
<li> NuGet warning and error messages in Status Bar</li>
</ul>


<p>More information on all the changes in Xamarin Studio 5.9.2 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.9/xamarin.studio_5.9/">release notes</a>.</p>

<h2>NuGet 2.8.5 support</h2>

<p>Xamarin Studio now supports NuGet 2.8.5.</p>

<p>NuGet 2.8.5 adds support for three new .NET target frameworks: DNX, DNXCore and Core.</p>

<p>With NuGet 2.8.5 supported you can now install the <a href="https://www.nuget.org/packages/xunit/2.1.0-beta2-build2981">latest pre-release version of xUnit</a>.</p>

<h2>NuGet warning and error messages in Status Bar.</h2>

<p>Xamarin Studio 5.9 has a new native Status Bar on the Mac. This new Status Bar has a smaller width so the NuGet warning and error messages could be too long to be displayed. The screenshots below show a NuGet warning and error message in Xamarin Studio 5.9 that do not fit in the Status Bar.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-9-2/NuGetWarningMessageTruncatedInStatusBar.png" title="NuGet warning message truncated in status bar" alt="NuGet warning message truncated in status bar"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-9-2/NuGetErrorMessageTruncatedInStatusBar.png" title="NuGet error message truncated in status bar" alt="NuGet error message truncated in status bar"></p>

<p>In Xamarin Studio 5.9.2 the NuGet Status Bar messages have been shortened so they can be displayed in the new Status Bar without being truncated. The screenshots below show the new format of the NuGet warning and error messages shown in the Status Bar.</p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-9-2/NuGetShortenedWarningMessageInStatusBar.png" title="Shortened NuGet warning message in status bar" alt="Shortened NuGet warning message in status bar"></p>

<p><img src="http://lastexitcode.com/images/blog/NuGetSupportInXamarinStudio5-9-2/NuGetShortenedErrorMessageInStatusBar.png" title="Shortened NuGet error message in status bar" alt="Shortened NuGet error message in status bar"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Components Directory Configuration]]></title>
    <link href="http://lastexitcode.com/blog/2015/05/10/XamarinComponentsDirectoryConfiguration/"/>
    <updated>2015-05-10T11:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/05/10/XamarinComponentsDirectoryConfiguration</id>
    <content type="html"><![CDATA[<p>One of the new features introduced in <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.9/xamarin.studio_5.9/">Xamarin Studio 5.9</a> is the ability to configure the directory where Xamarin Components are installed to when they are added to a project.</p>

<p>By default, when a Component from the <a href="https://components.xamarin.com/">Xamarin Component store</a> is added to a project, the Component is installed to a Components directory inside the solution&rsquo;s directory.</p>

<p><img src="http://lastexitcode.com/images/blog/XamarinComponentsDirectoryConfiguration/DefaultXamarinComponentsDirectoryForSolution.png" title="Default Components directory for a solution" alt="Default Components directory for a solution"></p>

<p>The project will have references added that refer to assemblies inside this Components directory.</p>

<pre><code>&lt;Reference Include="Microsoft.WindowsAzure.Mobile.Ext"&gt;
  &lt;HintPath&gt;..\Components\azure-mobile-services-1.3.1\lib\android\Microsoft.WindowsAzure.Mobile.Ext.dll&lt;/HintPath&gt;
&lt;/Reference&gt;
&lt;Reference Include="Microsoft.WindowsAzure.Mobile"&gt;
  &lt;HintPath&gt;..\Components\azure-mobile-services-1.3.1\lib\android\Microsoft.WindowsAzure.Mobile.dll&lt;/HintPath&gt;
&lt;/Reference&gt;
&lt;Reference Include="Newtonsoft.Json"&gt;
  &lt;HintPath&gt;..\Components\azure-mobile-services-1.3.1\lib\android\Newtonsoft.Json.dll&lt;/HintPath&gt;
&lt;/Reference&gt;
&lt;Reference Include="System.Net.Http.Extensions"&gt;
  &lt;HintPath&gt;..\Components\azure-mobile-services-1.3.1\lib\android\System.Net.Http.Extensions.dll&lt;/HintPath&gt;
&lt;/Reference&gt;
&lt;Reference Include="System.Net.Http.Primitives"&gt;
  &lt;HintPath&gt;..\Components\azure-mobile-services-1.3.1\lib\android\System.Net.Http.Primitives.dll&lt;/HintPath&gt;
&lt;/Reference&gt;
</code></pre>

<p>If a project is shared between multiple solutions then Xamarin Studio can have multiple different Components directories, one for each solution. This can cause Xamarin Studio to modify the hint paths in the project file to use a different Components directory depending on which solution was opened.</p>

<p>A simple way to reproduce this problem is to create one solution with a project that has a Component, then create another solution in a different directory, and add the same project to this new solution. The Component will be downloaded again into the Components directory relative to the new solution and the assembly references in the project file will be modified to use this new Components location.</p>

<p>Now let us take a look at how to solve this problem by configuring the Components directory.</p>

<h2>Configuring the Components Directory</h2>

<p>To configure the Components directory used by a project you can use a components.config file, as shown below.</p>

<pre><code>&lt;components&gt;
  &lt;config&gt;
    &lt;add key="cachePath" value="..\Components" /&gt;
  &lt;/config&gt;
&lt;/components&gt;
</code></pre>

<p>The path specified in the components.config file can be a full path or a relative path. If it is a relative path then it is relative to the directory containing the components.config file.</p>

<p>The path in the components.config file will be normalized so it contains the correct directory separators on non-Windows operating systems, so you can use either a forward slash or a backslash in the path.</p>

<p>Now let us take a look at how Xamarin Studio finds this components.config file.</p>

<p>Xamarin Studio, when a solution is opened, will check for a components.config file in several locations based on the solution&rsquo;s directory. If we have a solution in the directory /Users/matt/Projects/MyAndroidApp/ then the full set of locations checked is as follows:</p>

<ol>
<li> /Users/matt/Projects/MyAndroidApp/.components/components.config</li>
<li> /Users/matt/Projects/MyAndroidApp/components.config</li>
<li> /Users/matt/Projects/components.config</li>
<li> /Users/matt/components.config</li>
<li> /Users/components.config</li>
<li> /components.config</li>
<li> ~/Library/Preferences/Xamarin/Components/components.config</li>
</ol>


<p>Note that on Windows the last location checked is:</p>

<p>  %AppData%\Xamarin\Components\components.config</p>

<p>If you put the components.config file in a directory that is a parent of multiple solutions then all the solutions can use this common components.config file.</p>

<p>If the components.config file is missing or cannot be read then the default Components directory is used, which is inside the solution&rsquo;s directory.</p>

<p>If there is an error whilst reading the components.config file then the error will be logged by Xamarin Studio and the default Components directory will be used.</p>

<p>The Components directory to be used is cached when the solution is loaded so changes made to the components.config file require the solution to be closed and re-opened before Xamarin Studio will use the new settings.</p>

<p>To help diagnose problems when configuring the Components directory Xamarin Studio will log information in the Components.log file. The Components.log file can be found by selecting Open Log Directory from Xamarin Studio&rsquo;s Help menu. Two examples taken from the Components.log file are shown below. The first example shows the message logged when a components.config file cannot be found.</p>

<pre><code>[2015-05-10 11:00:29.0] DEBUG: No components.config file found. Using default path. Files checked: /Users/matt/Projects/MyAndroidApp/.components/components.config
/Users/matt/Projects/MyAndroidApp/components.config
/Users/matt/Projects/components.config
/Users/matt/components.config
/Users/components.config
/components.config
/Users/matt/Library/Preferences/Xamarin/Components/components.config
</code></pre>

<p>The next example shows the message logged when a components.config file is found.</p>

<pre><code>[2015-05-10 11:10:24.1] DEBUG: Using custom components cache path '/Users/matt/Projects/MyAndroidApp/Components'. components.config file found at '/Users/matt/Projects/MyAndroidApp/components.config'.
</code></pre>

<h2>Component Restore</h2>

<p>The latest version of <a href="https://components.xamarin.com/submit/xpkg">xamarin-component.exe</a> also supports using the configured Components directory. Its restore command will restore the Components to the directory as specified in the components.config file.</p>

<pre><code>mono xamarin-component.exe restore path/to/solution.sln
</code></pre>

<p>xamarin-component.exe will look for the components.config file in the same directories as Xamarin Studio.</p>

<h2>Comparison with NuGet</h2>

<p>NuGet has similar behaviour to Components in Xamarin Studio. All NuGet packages are downloaded to a packages directory inside the solution directory by default. To override this behaviour you can create a <a href="https://docs.nuget.org/consume/nuget-config-file">NuGet.Config file</a>. The NuGet.Config file allows the packages directory to be configured through a repositoryPath setting.</p>

<pre><code>&lt;configuration&gt;
  &lt;config&gt;
    &lt;add key="repositoryPath" value="../../packages" /&gt;
  &lt;/config&gt;
&lt;/configuration&gt;
</code></pre>

<p>NuGet will look for this NuGet.Config file in several places. Assuming the solution directory is /Users/matt/Projects/MyAndroidApp/ the NuGet.Config file will be looked for in the locations as shown below:</p>

<ol>
<li> /Users/matt/Projects/MyAndroidApp/.nuget/NuGet.Config</li>
<li> /Users/matt/Projects/MyAndroidApp/NuGet.Config</li>
<li> /Users/matt/Projects/NuGet.Config</li>
<li> /Users/matt/NuGet.Config</li>
<li> /Users/NuGet.Config</li>
<li> /NuGet.config</li>
<li> ~/.config/NuGet/NuGet.Config (Windows: %AppData%\NuGet\NuGet.Config)</li>
</ol>

]]></content>
  </entry>
  
</feed>
