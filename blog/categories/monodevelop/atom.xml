<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: monodevelop | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/monodevelop/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2017-02-25T18:54:14+00:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[PowerShell Support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2017/02/25/PowerShellSupportInXamarinStudio/"/>
    <updated>2017-02-25T18:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2017/02/25/PowerShellSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio version 6.0 and later now have PowerShell editing and debugging support with a PowerShell addin. The PowerShell addin uses the <a href="https://github.com/PowerShell/PowerShellEditorServices">PowerShell Editor Services</a> which is also used by the <a href="https://github.com/PowerShell/vscode-powershell">PowerShell extension</a> for Visual Studio Code.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/DebuggingPowerShellScriptInXamarinStudio.png" title="&lsquo;Debugging a PowerShell script in Xamarin Studio&rsquo; &lsquo;Debugging a PowerShell script in Xamarin Studio&rsquo;" ></p>

<h2>Features</h2>

<ul>
<li>Code completion</li>
<li>Debugging support

<ul>
<li>Immediate window</li>
<li>Locals window</li>
<li>Watch window</li>
</ul>
</li>
<li>Find references</li>
<li>PowerShell file template</li>
<li>Rename variable or method</li>
<li>Show API documentation</li>
<li>Syntax highlighting</li>
</ul>


<h2>Requirements</h2>

<p>Xamarin Studio 6.x or MonoDevelop 6.x.</p>

<p><a href="https://github.com/PowerShell/PowerShell">PowerShell 6</a> needs to be installed on Mac and on Linux.</p>

<p>PowerShell 3 and higher are supported on Windows.</p>

<h2>Code Completion</h2>

<p>As you type in the text editor you will see code completion for PowerShell variables.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellVariableCodeCompletion.png" title="&lsquo;PowerShell variable code completion&rsquo; &lsquo;PowerShell variable code completion&rsquo;" ></p>

<p>Code completion for PowerShell commands.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellCommandCodeCompletion.png" title="&lsquo;PowerShell command code completion&rsquo; &lsquo;PowerShell command code completion&rsquo;" ></p>

<p>An overview of PowerShell command parameters when you press the space key after entering a PowerShell command.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellCommandTooltipCodeCompletion.png" title="&lsquo;PowerShell command parameters overview code completion&rsquo; &lsquo;PowerShell command parameters overview code completion&rsquo;" ></p>

<p>Code completion for PowerShell command parameters.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellCommandParameterCodeCompletion.png" title="&lsquo;PowerShell command parameter code completion&rsquo; &lsquo;PowerShell command parameter code completion&rsquo;" ></p>

<p>Hovering the mouse over a PowerShell command will show a tooltip with information about that command.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellCommandTooltip.png" title="&lsquo;PowerShell command tooltip on hover&rsquo; &lsquo;PowerShell command tooltip on hover&rsquo;" ></p>

<h2>Syntax Errors</h2>

<p>Syntax errors are highlighted in the text editor. Hovering the mouse over the highlighted error will show information about the error.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellSyntaxError.png" title="&lsquo;PowerShell syntax error highlighting&rsquo; &lsquo;PowerShell syntax error highlighting&rsquo;" ></p>

<h2>Find references</h2>

<p>To find references of a variable or a method you can right click in the text editor and select Find References.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellFindReferencesContextMenu.png" title="&lsquo;PowerShell find references text editor context menu&rsquo; &lsquo;PowerShell find references text editor context menu&rsquo;" ></p>

<p>The references found are then displayed in the Search Results window.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellFindReferencesSearchResults.png" title="&lsquo;PowerShell find references text editor context menu&rsquo; &lsquo;PowerShell find references text editor context menu&rsquo;" ></p>

<h2>Rename</h2>

<p>A variable or method can be renamed in the text editor by right clicking and selecting Rename.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellRenameContextMenu.png" title="&lsquo;PowerShell rename text editor context menu&rsquo; &lsquo;PowerShell rename text editor context menu&rsquo;" ></p>

<p>On typing the new name and the text will be replaced.</p>

<h2>Show API Documentation</h2>

<p>Right clicking on a PowerShell command and selecting Show API Documentation will open the online help for that PowerShell command, if it is available, in the web browser.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellAPIDocumentationContextMenu.png" title="&lsquo;API Documentation text editor context menu&rsquo; &lsquo;API Documentation text editor context menu&rsquo;" ></p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellAPIOnlineDocumentation.png" title="&lsquo;PowerShell API documentation web page&rsquo; &lsquo;PowerShell API documentation web page&rsquo;" ></p>

<h2>Creating a new PowerShell Script</h2>

<p>To create a new PowerShell script there is an empty PowerShell file template available from the New File dialog.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellFileTemplateInNewFileDialog.png" title="&lsquo;PowerShell script file template in New File dialog&rsquo; &lsquo;PowerShell script file template in New File dialog&rsquo;" ></p>

<p>After creating a new PowerShell file it must be saved before it can be run or debugged.</p>

<h2>Debugging</h2>

<p>To debug the currently active PowerShell file open in the text editor,
set a breakpoint on a line by clicking in the left hand margin, then select Start Debugging from the Run menu.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/RunStartDebuggingMenu.png" title="&lsquo;Run &ndash; Start Debugging menu&rsquo; &lsquo;Run &ndash; Start Debugging menu&rsquo;" ></p>

<p>Alternatively you can click the Run button in the main toolbar.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/DebugRunMainToolbarButton.png" title="&lsquo;Run button in the main toolbar&rsquo; &lsquo;Run button in the main toolbar&rsquo;" ></p>

<p>A solution does not need to be open in order for a PowerShell script to be run with the debugger. You can open just a PowerShell script into Xamarin Studio and then run the debugger.</p>

<p>Once the debugger has started you can select Step Over, Step In, Step Out or Continue Debugging from the Run menu by clicking one of the main toolbar buttons.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/RunStepMenuItems.png" title="&lsquo;Run menu with Step menu items&rsquo; &lsquo;Run menu with Step menu items&rsquo;" ></p>

<p>Hovering the mouse over a variable will open a tooltip showing the variable value.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/DebugTooltipOnHover.png" title="&lsquo;Debug tooltip on hover&rsquo; &lsquo;Debug tooltip on hover&rsquo;" ></p>

<h2>Breakpoints</h2>

<p>Breakpoint conditions should use PowerShell syntax and not C# syntax. The Edit Breakpoint dialog says to use a C# boolean expression which is incorrect.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/EditBreakpointDialog.png" title="&lsquo;PowerShell breakpoint condition in Edit Breakpoint dialog&rsquo; &lsquo;PowerShell breakpoint condition in Edit Breakpoint dialog&rsquo;" ></p>

<p>Hit conditions are only partially supported. The PowerShell Editor Services debugger supports the &lsquo;When hit count is equal to&rsquo;. Due to this restriction the other hit count options may not work as expected.</p>

<p>Printing a message and continuing is not currently supported.</p>

<p>Breaking when the value of an expression changes is not currently supported.</p>

<p>Function and exception breakpoints are not currently supported.</p>

<h2>Locals Window</h2>

<p>When debugging the Locals window will show the values of variables grouped by each PowerShell scope &ndash; Auto, Local, Script and Global.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/LocalsWindow.png" title="&lsquo;Locals Window&rsquo; &lsquo;Locals Window&rsquo;" ></p>

<h2>Watch Window</h2>

<p>Variables and expressions can be entered in the Watch Window.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/WatchWindow.png" title="&lsquo;Watch window&rsquo; &lsquo;Watch window&rsquo;" ></p>

<p>Please note that entering a PowerShell command with missing parameters will cause the debugger to stop working. The PowerShell file will need to be closed and re-opened before the debugger will work again.</p>

<h2>Immediate Window</h2>

<p>Expressions and variables can be entered in the immediate window to get or set values.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/ImmediateWindow.png" title="&lsquo;Immediate window&rsquo; &lsquo;Immediate window&rsquo;" ></p>

<p>As with the Watch Window, entering a PowerShell command with missing parameters will cause the debugger to stop working.</p>

<h1>Passing Arguments when Debugging</h1>

<p>To pass arguments when debugging a PowerShell script you can select Debug PowerShell Script&hellip; from the Run menu.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/DebugPowerShellScriptMenu.png" title="&lsquo;Run &ndash; Debug PowerShell Script menu&rsquo; &lsquo;Run &ndash; Debug PowerShell Script menu&rsquo;" ></p>

<p>This will open a Debug PowerShell Script dialog where arguments can be specified. These arguments will be passed to the PowerShell script being run with the debugger. The settings used in this dialog will be remembered for the active text editor whilst it is open in Xamarin Studio.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/DebugPowerShellScriptDialog.png" title="&lsquo;Debug PowerShell Script dialog&rsquo; &lsquo;Debug PowerShell Script dialog&rsquo;" ></p>

<h2>Launch Configuration Support</h2>

<p>In Visual Studio Code a launch.json file can be used to store launch configurations. These are supported in by the PowerShell addin in Xamarin Studio. The PowerShell addin will look for a launch.json file in the directory where the PowerShell file exists or in a .vscode subdirectory.</p>

<p>The launch configurations are shown under Active Configurations in the Run menu. Only PowerShell launch configurations which have a request type of &ldquo;launch&rdquo; are supported.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellLaunchConfigurations.png" title="&lsquo;PowerShell launch configurations in Run menu&rsquo; &lsquo;PowerShell launch configurations in Run menu&rsquo;" ></p>

<p>The currently selected launch configuration will be used when debugging or running the PowerShell script. By default no launch configuration will be selected.</p>

<h2>Running without the Debugger</h2>

<p>To run the PowerShell file with PowerShell directly, instead of using the debugger, select Start without Debugging from the Run menu.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/RunStartWithoutDebuggingMenu.png" title="&lsquo;Run &ndash; Start without Debugging menu&rsquo; &lsquo;Run &ndash; Start without Debugging menu&rsquo;" ></p>

<p>Output from the PowerShell script will be displayed in the Application Output window.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/PowerShellScriptApplicationOutput.png" title="&lsquo;PowerShell script Application Output window&rsquo; &lsquo;PowerShell script Application Output window&rsquo;" ></p>

<h2>Installation</h2>

<p>The PowerShell addin is available from the <a href="http://addins.monodevelop.com/">MonoDevelop addin repository</a> on the beta channel. To install the addin open the Add-in Manager, search for the PowerShell addin, then click the Install button.</p>

<p><img src="/images/blog/PowerShellSupportInXamarinStudio/AddinManagerDialogWithPowerShellAddin.png" title="&lsquo;PowerShell addin in Addin manager dialog&rsquo; &lsquo;PowerShell addin in Addin manager dialog&rsquo;" ></p>

<h2>Source Code</h2>

<ul>
<li><a href="https://github.com/mrward/monodevelop-powershell-addin">PowerShell addin for Xamarin Studio and MonoDevelop</a></li>
<li><a href="https://github.com/PowerShell/PowerShellEditorServices">PowerShell Editor Services</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 6.1]]></title>
    <link href="http://lastexitcode.com/blog/2016/09/17/NuGetSupportInXamarinStudio6-1/"/>
    <updated>2016-09-17T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/09/17/NuGetSupportInXamarinStudio6-1</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 6.1 was released last week as part of the latest stable <a href="https://blog.xamarin.com/major-updates-ios-10-android-nougat-and-other-tasty-bits/">Xamarin Platform release</a> and it includes changes made to the NuGet support.</p>

<h2>Changes</h2>

<ul>
<li> NuGet 3.4.3 support</li>
<li> Support for project.json files</li>
<li> A specific NuGet package version can now be installed from a list shown in the Add Packages dialog</li>
<li> NuGet operations can now be cancelled from the status bar or Package Console</li>
<li> Support browsing for a local directory when creating a package source</li>
<li> Support forcefully removing a NuGet package when it is missing from all package sources</li>
<li> Packages installed in the solution are no longer shown in the Add Packages dialog</li>
<li> Only global package sources are now shown in Preferences</li>
<li> NuGet version supported is now displayed in the About dialog</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 6.1 can be found in the <a href="https://developer.xamarin.com/releases/studio/xamarin.studio_6.1/xamarin.studio_6.1/">release notes</a>.</p>

<h2>NuGet 3.4.3 support</h2>

<p>Xamarin Studio now includes <a href="https://docs.nuget.org/release-notes/nuget-3.4.3">NuGet 3.4.3</a> which means project.json files are now supported and NuGet packages that only support NuGet 3 or above can now be installed.</p>

<h2>Support for project.json files</h2>

<p>The project.json file is a new package file format introduced with NuGet 3 which supports transitive restore. More detailed information on project.json can be found in the <a href="https://docs.nuget.org/consume/projectjson-intro">NuGet documentation</a>.</p>

<p>A project.json file replaces the packages.config file and holds the NuGet packages
being used by the project. One difference you will notice is that the project.json file may not show the same list of NuGet packages that a packages.config file would show. This is because the project.json file only shows the NuGet packages you explicitly install into your project. So if you install say bootstrap you will only see bootstrap in the project.json file even though it depends on jQuery. If you do the same for a packages.config file you would see both bootstrap and jQuery saved in the file. Another difference is that references are not added to your project file (.csproj) when using a
project.json file.</p>

<p>In order to use a project.json file with Xamarin Studio you will need to create the file yourself in the project directory and close and re-open the solution. The project.json file needs to be
available when you open the project otherwise Xamarin Studio will default to using a packages.config file.</p>

<p>An example project.json file for a .NET 4.5 library project is shown below:</p>

<pre><code>{
  "frameworks": {
    "net45": {}
  }
}
</code></pre>

<p>When you add a NuGet package to a project that uses a project.json file the NuGet package
information will be added into a dependencies section:</p>

<pre><code> "dependencies": {
   "NUnit": "3.2.1"
 }
</code></pre>

<p>Please note that when using a project.json file the project will not display a From Packages directory
inside the References folder. This is because the project file does not have any
references added to it when using a project.json and the reference information is currently not available from the project system.</p>

<p>Please note that there are <a href="https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/">future plans</a> to move the information stored in a project.json file into the project file.</p>

<h1>NuGet 3 package source</h1>

<p>Xamarin Studio now supports using the NuGet 3 package source:</p>

<p><a href="https://api.nuget.org/v3/index.json">https://api.nuget.org/v3/index.json</a></p>

<p>This can be added into your package sources in Preferences. It is also the package
source that will be created by default if your global <a href="http://lastexitcode.com/projects/NuGet/FileLocations/">NuGet.Config file</a> is missing.</p>

<h2>Installing a specific NuGet package version from the Add Packages dialog</h2>

<p>Older versions of Xamarin Studio supported being able to install specific package versions by using a package version search in the Add Packages dialog as shown below:</p>

<pre><code>NUnit version:*
</code></pre>

<p>This package version search was not easy to discover and so it has been removed and replaced in Xamarin Studio 6.1 with a combo box that allows a particular version to be selected. The Version combo box is in the bottom right hand corner of the Add Packages dialog as shown in the screenshots below.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-1/AddPackagesDialog.png" title="&lsquo;Add Packages dialog&rsquo; &lsquo;Add Packages dialog&rsquo;" ></p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-1/AddPackagesDialogWithVersionComboBoxSelected.png" title="&lsquo;Add Packages dialog with version combo box selected&rsquo; &lsquo;Add Packages dialog with version combo box selected&rsquo;" ></p>

<p>Note that in order to populate the version combo box a second request is sent to the
package source so it may not show all the versions immediately.</p>

<p>Also note that for package sources which are local directories only the latest version will be displayed in the version combo box.</p>

<h2>Cancelling a NuGet operation</h2>

<p>With Xamarin Studio you can now cancel the currently running NuGet package operation. This can be done
by clicking the red Stop button in the Status Bar or in the Package Console.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-1/StatusBarStopButton.png" title="&lsquo;Status bar stop button&rsquo; &lsquo;Status bar stop button&rsquo;" ></p>

<h2>Adding local package sources</h2>

<p>When adding a package source in Preferences it is now easier to create a package source for
a directory on your local machine. There is now a browse button which will allow you to browse to a directory and add it rather than having to type the full path into the text box.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-1/AddPackageSourceDialog.png" title="&lsquo;Add Package Source dialog&rsquo; &lsquo;Add Package Source dialog&rsquo;" ></p>

<p>The Add Package Source dialog has also been changed to make it more obvious that either a URL or a folder can be used as a package source. The URL label has been changed to Location and the placeholder text now specifies that a URL or a folder can be used.</p>

<h2>Forced NuGet package removal</h2>

<p>A NuGet package can now be removed when it not restored and is unavailable from all package sources.</p>

<p>With older versions of Xamarin Studio a NuGet package must be restored before it can be
removed. This is a requirement of NuGet since it requires the original NuGet package to work out what has been installed so it can determine what needs to be uninstalled. NuGet can do more than just update the project file with references and MSBuild .targets files, it may add new files to the project or it may run app.config or web.config transforms.</p>

<p>When the NuGet package removal fails because the NuGet package cannot be restored a dialog will be
displayed asking whether you want to try to remove the NuGet package anyway. If the OK button is selected
then Xamarin Studio will:</p>

<ol>
<li>Remove the NuGet package from the packages.config file.</li>
<li>Remove any assembly references for the NuGet package from the project file (.csproj).</li>
<li>Remove any Imports that refer to .targets or .props files that were included with that NuGet package.</li>
</ol>


<p>This process may miss files that were added to the project by NuGet but in the majority of cases it should remove the NuGet package successfully without having to manually remove the NuGet package information from the project file.</p>

<h2>Packages installed in solution are no longer shown in Add Packages dialog</h2>

<p>With previous versions of Xamarin Studio all packages installed in the solution were shown first in the list of packages in the Add Packages dialog. Packages installed in the solution are now no longer shown in the Add Packages dialog.</p>

<h2>Only global package sources shown in Preferences</h2>

<p>The package sources shown in the Preferences dialog are now only read from the global NuGet config file. Per-solution NuGet.Config files located in individual solution directories are no longer read when showing the package sources in Preferences. This is because changes made in Preferences only modifies the global NuGet.Config file.</p>

<p>The package sources shown in the Add packages dialog will still include package sources defined in a solution&rsquo;s NuGet.Config file and is unaffected by this change.</p>

<h2>NuGet version displayed in About dialog</h2>

<p>The version of NuGet supported by Xamarin Studio is now displayed in the About dialog when the Show Details button is selected.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-1/AboutDialog.png" title="&lsquo;About dialog&rsquo; &lsquo;About dialog&rsquo;" ></p>

<h2>Bug Fixes</h2>

<p><strong>Custom MSBuild  .targets files were not always added to the end of the project</strong></p>

<p>When installing a NuGet package that has a .targets file the Import element created was grouped with the existing Import elements. This is OK most of the time however if there are other items in the project added after the import then any build targets may fail since these items are included after the import. One example is the netfx-System.StringResources NuGet package which may not find any resource files that occur in the project after its Import element.</p>

<p>Now .targets files are added as the last element in the project file. This also makes the behaviour consistent with how NuGet works in Visual Studio.</p>

<p><strong>Custom MSBuild .props files were not added to the start of the project</strong></p>

<p>Installing a NuGet package that included an MSBuild .props file would add an Import element for the .props file at the end of the project file which is incorrect. Now .props files are added to the project file as the first child element inside the Project&rsquo;s root element.</p>

<h2>Known Issues</h2>

<p><strong>Offline package restore</strong></p>

<p>Package restore may not work when you are offline
even though the NuGet packages may be available in the local NuGet cache on your machine.</p>

<p>The current workaround is to create a package source that
points to a local directory containing all the required NuGet packages and disable all online
NuGet package sources. With just the local package source enabled you can then restore the NuGet packages when you are
offline. Note that this problem also affects Visual Studio 2015.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Package Explorer for Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/08/20/NuGetExplorerForXamarinStudio/"/>
    <updated>2016-08-20T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/08/20/NuGetExplorerForXamarinStudio</id>
    <content type="html"><![CDATA[<p>When diagnosing why a NuGet package cannot be installed into a project the application I use is the excellent <a href="https://github.com/NuGetPackageExplorer/NuGetPackageExplorer">NuGet Package Explorer</a>. Whenever there is an error trying to install a NuGet package, similar to the one shown below, you can open the NuGet package with NuGet Package Explorer and take a look at the target frameworks it supports.</p>

<pre><code>You are trying to install this package into a project that targets 'MonoAndroid,Version=v6.0',
but the package does not contain any assembly references or content files that are compatible with that framework.
</code></pre>

<p>Currently <a href="https://github.com/NuGetPackageExplorer/NuGetPackageExplorer">NuGet Package Explorer</a> is only available on Windows. On other operating systems you can change the file extension to .zip, extract the contents of the NuGet package, or open it into a zip application, and take a look at the files.</p>

<p>To make exploring NuGet packages easier on operating systems where the NuGet Package Explorer application is not available there is a now <a href="https://github.com/mrward/monodevelop-nuget-package-explorer">NuGet Explorer addin</a> that you can install into Xamarin Studio or MonoDevelop. With this addin you can open and explore NuGet packages from online package sources or from the local file system.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/ViewingAndroidSupportNuGetPackageContents.png" title="&lsquo;Exploring the Xamarin.Android.Support NuGet package in Xamarin Studio&rsquo; &lsquo;Exploring the Xamarin.Android.Support NuGet package in Xamarin Studio&rsquo;" ></p>

<p>Now let us take a look in more detail of the features provided by the NuGet Package Explorer addin.</p>

<h2>Features</h2>

<ul>
<li>Open and view NuGet packages from online package sources or from the local file system.</li>
<li>View the NuGet package metadata.</li>
<li>View the NuGet package files.</li>
<li>View the NuGet package .nuspec file.</li>
<li>Open any file stored inside the NuGet package.</li>
<li>Open other NuGet packages that are listed as dependencies.</li>
</ul>


<p>Supports Xamarin Studio 6.0 and MonoDevelop 6.0.</p>

<h2>Opening a NuGet Package from a Package Source</h2>

<p>To open a NuGet package from a package source you can select Open NuGet Package from the File menu.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/FileOpenNuGetPackageMenu.png" title="&lsquo;File Open NuGet Package menu&rsquo; &lsquo;File Open NuGet Package menu&rsquo;" ></p>

<p>Alternatively if you have a project open you can right click the Packages folder in the Solution window and select Open NuGet Package.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/OpenNuGetPackagePackagesFolderMenu.png" title="&lsquo;Open Package menu on Packages folder&rsquo; &lsquo;Open Package menu on Packages folder&rsquo;" ></p>

<p>This will open the Open Package dialog. This dialog is the same as the Add Packages dialog used when installing a NuGet package and allows you to search for NuGet packages. The dialog is based on the version available with Xamarin Studio 6.1 so it has a version combo box where you can select a specific package version instead of having to remember the syntax for the package version search.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/OpenPackageDialog.png" title="&lsquo;Open NuGet Package dialog&rsquo; &lsquo;Open Package dialog&rsquo;" ></p>

<p>Select one or more NuGet packages and click the Open Package button to download and display them in Xamarin Studio.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/ViewingJsonNetPackageContents.png" title="&lsquo;Exploring the JSON.NET NuGet package in Xamarin Studio&rsquo; &lsquo;Exploring the JSON.NET NuGet package in Xamarin Studio&rsquo;" ></p>

<p>The NuGet package metadata is shown on the left. On the right are the files that the NuGet package contains. You can also view the .nuspec file stored in the NuGet package by selecting the NuSpec tab at the bottom of the window.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/ViewingJsonNetNuSpec.png" title="&lsquo;Viewing JSON.NET .nuspec file&rsquo; &lsquo;Viewing JSON.NET .nuspec file&rsquo;" ></p>

<h2>Exploring Dependencies</h2>

<p>NuGet package dependencies are displayed with hyperlinks.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/ViewingJsonNetPackageDependencies.png" title="&lsquo;Viewing JSON.NET dependencies&rsquo; &lsquo;Viewing JSON.NET dependencies" ></p>

<p>If you click one these hyperlinks the Open Package dialog will be opened and the package will be searched for. You can then choose a package version and open the NuGet package.</p>

<h2>Opening Files Contained Inside the NuGet Package</h2>

<p>To open a file contained inside a NuGet package you can double click the file, or right click the file and select Open.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/OpenFileInsideNuGetPackageMenu.png" title="&lsquo;Open menu to open file inside NuGet package into Xamarin Studio&rsquo; &lsquo;Open menu to open file inside NuGet package into Xamarin Studio&rsquo;" ></p>

<p>The file will then be opened inside Xamarin Studio.</p>

<h2>Opening a NuGet Package File</h2>

<p>If you have a NuGet Package (.nupkg) stored on the local machine that is not available from any package source you can open the file directly in Xamarin Studio by selecting Open from the File menu.</p>

<p>You can also associate .nupkg files directly with Xamarin Studio and have them automatically open inside the IDE.</p>

<h2>Opening a NuGet Package Installed in a Project</h2>

<p>You can explore NuGet packages that are installed in your project by right clicking the package in the Solution window and selecting Open Package.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/OpenInstalledPackageMenu.png" title="&lsquo;Open installed package context menu&rsquo; &lsquo;Open installed package context menu&rsquo;" ></p>

<h2>Installing the NuGet Package Explorer addin</h2>

<p>The NuGet Package Explorer addin is available from the MonoDevelop addin repository on the beta channel. It can be installed by from the Add-in Manager by searching the gallery and then clicking the Install button.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/AddinManagerDialog.png" title="&lsquo;Addin Manager dialog&rsquo; &lsquo;Addin Manager dialog&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[File Nesting in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/07/24/FileNestingInXamarinStudio/"/>
    <updated>2016-07-24T21:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/07/24/FileNestingInXamarinStudio</id>
    <content type="html"><![CDATA[<p>With recent versions of Xamarin Studio it is not currently possible to nest files without directly editing the project file. In the past it was possible to drag and drop a file so it was then nested inside another file.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/SolutionWindowWithNestedFiles.png" title="&lsquo;Solution window with nested files in Xamarin Studio&rsquo; &lsquo;Solution window with nested files in Xamarin Studio&rsquo;" ></p>

<p>Visual Studio also does not support nesting files by using drag and drop however
<a href="http://madskristensen.net/">Mads Kristensen</a> created a <a href="https://visualstudiogallery.msdn.microsoft.com/3ebde8fb-26d8-4374-a0eb-1e4e2665070c">File Nesting extension</a> that adds support for manual and automatic nesting of files within Visual Studio. There is a <a href="https://channel9.msdn.com/Blogs/MadsKristensen/Introducing-File-Nestor-for-Visual-Studio">demo video of the File Nesting extension</a> that shows the extension being used with Visual Studio.
 This extension has now been ported to Xamarin Studio and is available from the <a href="http://addins.monodevelop.com/">MonoDevelop Add-in Repository</a>.</p>

<p>Let us take a walkthrough of the features of the File Nesting addin for Xamarin Studio.</p>

<h2>Features</h2>

<ul>
<li>Manual file nesting</li>
<li>Manual file un-nesting</li>
<li>Automatic file nesting of selected files based on rules</li>
<li>Automatic file nesting when files are added to a project</li>
<li>Options to specify which file nesting rules are applied</li>
</ul>


<h2>Supports</h2>

<ul>
<li>Xamarin Studio 6.0 or MonoDevelop 6.0.</li>
</ul>


<h2>Manual File Nesting</h2>

<p>To manually nest a file select it in the Solution window then right click and select File Nesting &ndash; Nest Item&hellip;</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/NestItemContextMenu.png" title="&lsquo;Manual file nesting &ndash; nest item context menu&rsquo; &lsquo;Manual file nesting &ndash; nest item context menu&rsquo;" ></p>

<p>This will open a file nesting dialog where the parent file can be selected.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/FileNestingDialog.png" title="&lsquo;File nesting dialog&rsquo; &lsquo;File nesting dialog&rsquo;" ></p>

<p>Select the parent file and click OK to nest the file under that parent file.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/ManualFileNestingResultInSolutionWindow.png" title="&lsquo;Manual file nesting result in solution window&rsquo; &lsquo;Manual file nesting result in solution window&rsquo;" ></p>

<p>You can also nest multiple files under a parent by selecting multiple files in the Solution window and selecting the Nest Item menu.</p>

<h2>Manual File Un-nesting</h2>

<p>To un-nest a file select it in the Solution window then right click and select File Nesting &ndash; Un-nest Item.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/UnNestItemContextMenu.png" title="&lsquo;Manual file nesting &ndash; un-nest item context menu&rsquo; &lsquo;Manual file nesting &ndash; un-nest item context menu&rsquo;" ></p>

<p>The file will then be un-nested from its parent.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/ManualFileUnNestingResultInSolutionWindow.png" title="&lsquo;Manual file un-nesting result in solution window&rsquo; &lsquo;Manual file un-nesting result in solution window&rsquo;" ></p>

<h2>Automatic Nesting Rules</h2>

<p>The file nesting rules are available from the Preferences dialog.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/FileNestingRulesInPreferencesDialog.png" title="&lsquo;File nesting rules in preferences&rsquo; &lsquo;File nesting rules in preferences&rsquo;" ></p>

<p>Each rule has a tooltip which will show more detailed information about what the rule does.</p>

<h3>Enable auto-nesting</h3>

<p>The Enable auto-nesting option will enable or disable automatic file nesting when a file is added to a project.</p>

<h3>Enable extension rule</h3>

<p>This rule will nest files added with an extra extension under their corresponding parent file. For example MyView.xaml.cs nests under MyView.xaml.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/NestedFileUsingExtensionRule.png" title="&lsquo;Nested file using extension rule&rsquo; &lsquo;Nested file using extension rule&rsquo;" ></p>

<h3>Enable interface implementation rule</h3>

<p>This nests C# interface implementations under the corresponding interface based on the filename. For example, if there is an interface file IMyInterface.cs then a new file called CustomMyInterface.cs will be nested under the IMyInterface file.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/NestedCSharpInterfaceFilesInSolutionWindow.png" title="&lsquo;Nested file using interface implementation rule&rsquo; &lsquo;Nested file using interface implementation rule&rsquo;" ></p>

<h3>Enable known file type rule</h3>

<p>This nests certain known files types. For example, MyPage.ts will be nested under MyPage.html.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/NestedFileUsingKnownFileTypeRule.png" title="&lsquo;Nested file using known file type rule&rsquo; &lsquo;Nested file using known file type rule&rsquo;" ></p>

<h3>Enable path segment rule</h3>

<p>This nests files with an added path segment under its parent. For example, MyFile.Designer.cs nests under MyFile.cs.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/NestedFileUsingPathSegmentRule.png" title="&lsquo;Nested file using path segment rule&rsquo; &lsquo;Nested file using path segment rule&rsquo;" ></p>

<h2>Automatic Nesting of Selected Files</h2>

<p>To automatically nest files, based on the enabled file nesting rules, select the files, or folder, or project, then right click and select File Nesting &ndash; Auto-nest selected items.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/AutoNestSelectedItemsContextMenu.png" title="&lsquo;Auto-nest selected items context menu&rsquo; &lsquo;Auto-nest selected items context menu&rsquo;" ></p>

<p>This will then apply the enabled file nesting rules to the selected files.</p>

<h2>Automatic File Nesting on Adding Files</h2>

<p>To enable automatic file nesting when files are added right click the project and select File Nesting &ndash; Enable automatic nesting.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/EnableAutomaticNestingContextMenu.png" title="&lsquo;Enable automatic nesting context menu&rsquo; &lsquo;Enable automatic nesting context menu&rsquo;" ></p>

<p>A check box will be displayed next to this menu item if this feature is enabled. Now when a file is added the enabled nesting rules will be applied and the file will be automatically nested.</p>

<h2>Installation</h2>

<p>The File Nesting addin is available from the <a href="http://addins.monodevelop.com/">MonoDevelop Add-in Repository</a> on the beta channel. To install the addin open the Add-in Manager, search for the File Nesting addin, then click the Install button.</p>

<p><img src="/images/blog/FileNestingInXamarinStudio/FileNestingAddinSelectedInAddinManagerWindow.png" title="&lsquo;File Nesting addin in addin manager window&rsquo; &lsquo;File Nesting addin in addin manager window&rsquo;" ></p>

<p>After installing the addin Xamarin Studio will need to be restarted for the addin to work correctly.</p>

<h2>Source Code</h2>

<ul>
<li><a href="https://github.com/mrward/FileNesting">File Nesting addin for Xamarin Studio and MonoDevelop</a></li>
<li><a href="https://github.com/madskristensen/FileNesting">File Nesting extension for Visual Studio</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Test Runner Support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/07/09/NetCoreTestRunnerSupportInXamarinStudio/"/>
    <updated>2016-07-09T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/07/09/NetCoreTestRunnerSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>The latest version of the .NET Core addin for Xamarin Studio and MonoDevelop now supports <a href="https://docs.microsoft.com/en-us/dotnet/articles/core/testing/unit-testing-with-dotnet-test">.NET Core Test Runners</a>.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreTestRunnerSupportInXamarinStudio.png" title="&lsquo;.NET Core Test Runner in Xamarin Studio&rsquo; &lsquo;.NET Core Test Runner in Xamarin Studio&rsquo;" ></p>

<p>Xamarin Studio uses the <a href="https://docs.microsoft.com/en-us/dotnet/articles/core/tools/test-protocol">.NET Core test communication protocol</a> to support .NET Core test runners. This protocol provides a way to discover and run the unit tests provided by a .NET Core test runner.</p>

<p>When Xamarin Studio finds a testRunner in the project.json file it will attempt to discover the unit tests for that project.</p>

<pre><code>{
    "version": "1.1.0-*",

    "testRunner": "nunit",

    "dependencies": {,
        "NUnit": "3.4.0",
        "dotnet-test-nunit": "3.4.0-beta-1"
    },

    "frameworks": {
        "netcoreapp1.0": {
            "imports": [
                "netcoreapp1.0",
                "portable-net45+win8"
            ],
            "dependencies": {
                "Microsoft.NETCore.App": {
                    "version": "1.0.0-*",
                    "type": "platform"
                }
            }
        }
    }
}
</code></pre>

<p>The discovered tests are then shown in the Unit Tests window.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreDiscoveredUnitTestsInUnitTestsWindow.png" title="&lsquo;Discovered NET Core unit tests in Unit Tests window&rsquo; &lsquo;Discovered NET Core unit tests in Unit Tests window&rsquo;" ></p>

<p>After building the project the Unit Tests window will discover any new tests that have been added.</p>

<p>Tests can be run by clicking Run All or by right clicking a test in the Unit Tests window and selecting Run Test.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/RunDotNetCoreTestsContextMenu.png" title="&lsquo;Run NET Core unit tests in Unit Tests window&rsquo; &lsquo;Run NET Core unit tests in Unit Tests window&rsquo;" ></p>

<p>The test results are shown in the Test Results window.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreTestResultsWindow.png" title="&lsquo;.NET Core test results  in Test Results window&rsquo; &lsquo;.NET Core test results  in Test Results window&rsquo;" ></p>

<p>Console output from the test runner is shown in the Application Output window.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreTestRunnerApplicationOutput.png" title="&lsquo;.NET Core Test Runner in Xamarin Studio&rsquo; &lsquo;.NET Core Test Runner in Xamarin Studio&rsquo;" ></p>

<p>Debugging the unit tests is not yet supported.</p>

<p><a href="https://xunit.github.io/">xUnit</a> and <a href="http://nunit.org/">NUnit</a> provide .NET Core test runners and both of these are supported in Xamarin Studio. More information can be found in existing tutorials on how to use these test runners:</p>

<ul>
<li> <a href="http://www.alteridem.net/2016/06/18/nunit-3-testing-net-core-rc2/">NUnit 3 Tests for .NET Core RC2 and ASP.NET Core RC2</a></li>
<li> <a href="http://xunit.github.io/docs/getting-started-dotnet-core.html">Getting started with xUnit.net (.NET Core / ASP.NET Core)</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
