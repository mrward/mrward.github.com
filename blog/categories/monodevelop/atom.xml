<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: monodevelop | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/monodevelop/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2015-09-16T16:53:40+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TypeScript Addin 0.6 Released]]></title>
    <link href="http://lastexitcode.com/blog/2015/08/09/TypeScriptAddin0-6Released/"/>
    <updated>2015-08-09T15:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/08/09/TypeScriptAddin0-6Released</id>
    <content type="html"><![CDATA[<p>A new version of the TypeScript addin for Xamarin Studio and MonoDevelop has been released. The addin is available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> in the alpha channel. More details on how to install the addin can be found in the <a href="/blog/2015/04/01/TypeScriptSupportInXamarinStudio/">TypeScript support in Xamarin Studio post</a>.</p>

<h2>Changes</h2>

<ul>
<li>Updated to support <a href="http://blogs.msdn.com/b/typescript/archive/2015/07/20/announcing-typescript-1-5.aspx">TypeScript 1.5</a>.</li>
<li>Linux 32 bit and 64 bit are now supported with a single addin. Thanks to <a href="https://github.com/chrisber">Christian Bernasko</a>.</li>
<li>Allow UMD and System modules to be selected in project options.</li>
</ul>


<p>The separate TypeScript Linux 32 bit addin is now deprecated since the TypeScript addin can now be used on 32 bit and 64 bit versions of Linux.</p>

<h2>Bug Fixes</h2>

<ul>
<li>TypeScript language service host not updated when the project options are changed</li>
</ul>


<p>For example, switching from ES3 to ES6 in the project options could cause the code completion to be incorrect since the language service host compiler settings were not being updated.</p>

<ul>
<li>TypeScript options shown when viewing solution options</li>
</ul>


<p>The TypeScript options are now only available when the project options are selected.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paket Support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2015/06/09/PaketSupportInXamarinStudio/"/>
    <updated>2015-06-09T19:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/06/09/PaketSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio and MonoDevelop now have support for <a href="http://fsprojects.github.io/Paket/">Paket</a> with an alpha release of the <a href="https://github.com/mrward/monodevelop-paket-addin">Paket Addin</a>.</p>

<p>Paket is a dependency manager for .NET. The dependencies it supports are <a href="http://fsprojects.github.io/Paket/nuget-dependencies.html">NuGet packages</a>, files from <a href="http://fsprojects.github.io/Paket/github-dependencies.html">GitHub, Gists</a> or files from any <a href="http://fsprojects.github.io/Paket/http-dependencies.html">HTTP source</a>. Paket can be used to maintain project dependencies completely from the command line.</p>

<p>So let us take a look at the support for Paket in Xamarin Studio and MonoDevelop.</p>

<h2>Features</h2>

<ul>
<li> View dependencies and referenced NuGet packages in the Solution window.</li>
<li> Add, remove, update NuGet packages from the Solution window.</li>
<li> Install, restore, simplify NuGet packages from the Solution window.</li>
<li> Check for updated NuGet packages from the Solution window.</li>
<li> Syntax highlighting for all paket files.</li>
<li> Code completion whilst editing the paket.dependencies file.</li>
<li> Integrates with Xamarin Studio&rsquo;s unified search.</li>
<li> paket.dependencies and paket.template file templates.</li>
</ul>


<h2>Installing the addin</h2>

<p>The addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> in the alpha channel. In Xamarin Studio open the Add-in Manager and select the Gallery tab. Click the repository drop down and if <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> is not displayed then click <strong>Manage Repositories&hellip;</strong>. In the window that opens tick the check box next to <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> and then click the Close button.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/AddingAlphaChannelAddins.png" title="&lsquo;Enabling alpha channel addins&rsquo; &lsquo;Enabling alpha channel addins&rsquo;" ></p>

<p>Back in the Add-in Manager dialog click the Refresh button to update the list of addins. Use the search text box in the top right hand corner of the dialog to search for the addin by typing in <strong>Paket</strong>.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/AddinManagerPaketAddin.png" title="&lsquo;Paket addin selected in Addin Manager dialog&rsquo; &lsquo;Paket addin selected in Addin Manager dialog&rsquo;" ></p>

<p>Select the Paket addin and then click the <strong>Install&hellip;</strong> button.</p>

<p>Now let us take a look at adding a NuGet package to your project with Paket. This is a simple way to get started with Paket in Xamarin Studio without having to manually create any paket files.</p>

<h2>Adding a NuGet Package</h2>

<p>To add a NuGet package using Paket, right click the project in the Solution window, and select Add &ndash; Add NuGet Packages using Paket.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/AddNuGetPackagesUsingPaketSolutionWindowMenu.png" title="&lsquo;Add NuGet Package using Paket Solution window context menu&rsquo; &lsquo;Add NuGet Package using Paket Solution window context menu&rsquo;" ></p>

<p>The Add NuGet Packages using Paket menu is also available from the main Project menu.</p>

<p>This opens the Add NuGet Packages dialog. Search for the NuGet package you want to use and click the Add Package button.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/AddNuGetPackagesDialog.png" title="&lsquo;Add NuGet Packages dialog&rsquo; &lsquo;Add NuGet Packages dialog&rsquo;" ></p>

<p>The Status Bar will update as the NuGet package is installed.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/JsonNetPackageAddedStatusBarMessage.png" title="&lsquo;Json.NET added status bar message&rsquo; &lsquo;Json.NET added status bar message&rsquo;" ></p>

<p>More detailed information about the installation can be found in the Paket Console window. This can be opened by clicking the Status Bar or from the View &ndash; Pads menu.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/JsonNetPackageAddedPaketConsole.png" title="&lsquo;Json.NET added Paket Console messages&rsquo; &lsquo;Json.NET added Paket Console messages&rsquo;" ></p>

<p>After the NuGet package has been installed successfully you will see two new items in the Solution window. A Paket Dependencies folder and a Paket References folder.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketFoldersInSolutionWindow.png" title="&lsquo;Paket folders in Solution window&rsquo; &lsquo;Paket folders in Solution window&rsquo;" ></p>

<p>These folders show the NuGet packages that are in the paket.dependencies and paket.references files.</p>

<h2>Paket Dependencies Folder</h2>

<p>The Paket Dependencies folder is shown in the Solution window if Xamarin Studio finds a paket.dependencies file in the same directory as the solution. The NuGet packages that are in the paket.dependencies file are shown under this folder.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFolderInSolutionWindow.png" title="&lsquo;Paket Dependencies folder in Solution window&rsquo; &lsquo;Paket Dependencies folder in Solution window&rsquo;" ></p>

<p>Double clicking the folder will open the paket.dependencies file into the text editor. The Paket Dependencies folder also has a context menu where you can run Paket commands.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFolderContextMenu.png" title="&lsquo;Paket Dependencies folder context menu&rsquo; &lsquo;Paket Dependencies folder context menu&rsquo;" ></p>

<p>From the context menu you can Add a NuGet Package as a dependency, install, restore, update, and simplify your dependencies, or check for updates. When you select Check for Updates the updated NuGet package information will be shown in the Paket Console and in the Solution window.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFolderNuGetPackageUpdateInformation.png" title="&lsquo;Paket Dependencies folder NuGet package update information&rsquo; &lsquo;Paket Dependencies folder NuGet package update information&rsquo;" ></p>

<p>To update a single NuGet package you can right click it and select Update. To remove the NuGet package as a dependency you can right click it and select Remove or press delete.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketDependencyNuGetPackageContextMenu.png" title="&lsquo;Paket Dependencies folder NuGet package context menu&rsquo; &lsquo;Paket Dependencies folder NuGet package context menu&rsquo;" ></p>

<h2>Paket References Folder</h2>

<p>The Paket References folder is shown in the Solution window if Xamarin Studio finds a paket.references file in the same directory as the project. The NuGet packages that are in the paket.references file are shown under this folder. Double clicking the folder will open the paket.references file into the text editor.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketReferencesFolderInSolutionWindow.png" title="&lsquo;Paket References folder in Solution window&rsquo; &lsquo;Paket References folder in Solution window&rsquo;" ></p>

<p>Right clicking the Paket References folder allows you to add a NuGet package to the project.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketReferencesFolderAddPackagesMenu.png" title="&lsquo;Paket References folder context menu&rsquo; &lsquo;Paket References folder context menu&rsquo;" ></p>

<p>A NuGet package can be removed by right clicking it and selecting Remove or by pressing Delete.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketReferencesFolderNuGetPackageContextMenu.png" title="&lsquo;Paket References folder NuGet package context menu&rsquo; &lsquo;Paket References folder NuGet package context menu&rsquo;" ></p>

<h2>Code Completion</h2>

<p>When editing the paket.dependencies file you will get code completion as you type. You can also bring up the code completion list by pressing Ctrl+Enter.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFileKeywordCompletion.png" title="&lsquo;paket.dependencies file keyword completion&rsquo; &lsquo;paket.dependencies file keyword completion&rsquo;" ></p>

<p>Keywords that have an associated value will also show code completion after a space is pressed or the first character is typed in.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFileKeywordValueCompletion.png" title="&lsquo;paket.dependencies file keyword value completion&rsquo; &lsquo;paket.dependencies file keyword value completion&rsquo;" ></p>

<p>After the source keyword you will see a list of NuGet package sources that are defined in your NuGet.Config file.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFileNuGetSourceCompletion.png" title="&lsquo;paket.dependencies file NuGet source completion&rsquo; &lsquo;paket.dependencies file NuGet source completion&rsquo;" ></p>

<p>After the nuget keyword you will see a list of NuGet packages.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFileNuGetPackageCompletion.png" title="&lsquo;paket.dependencies file NuGet package completion&rsquo; &lsquo;paket.dependencies file NuGet package completion&rsquo;" ></p>

<p>This list of NuGet packages is currently taken from your local machine&rsquo;s NuGet cache. Currently there is no support for asynchronously searching an online NuGet package source to get the list of NuGet packages.</p>

<h2>Running Paket commands</h2>

<p>Paket commands can be run from the Unified search. If you type in paket you will see some of the Paket commands.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketCommandsInUnifiedSearch.png" title="&lsquo;Paket commands in unified search&rsquo; &lsquo;Paket commands in unified search&rsquo;" ></p>

<p>The syntax for each command is the similar to what the paket.exe console application supports but the commands do not support all the parameters.</p>

<p>As you type more of the command the list of commands will be filtered. To run a command select it and then press the enter key. These commands directly run paket.exe and update the paket files and project files. The status of the current command is shown in the Status Bar and the output from paket.exe is shown in the Paket Console window.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketDependenciesInstalledStatusBarMessage.png" title="&lsquo;Paket dependencies installed status bar message&rsquo; &lsquo;Paket dependencies installed status bar message&rsquo;" ></p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketDependenciesInstalledPaketConsoleOutput.png" title="&lsquo;Paket dependencies installed console message&rsquo; &lsquo;Paket dependencies installed console message&rsquo;" ></p>

<p>The Paket Console window will automatically be displayed if there was an error running a command and an error message will be displayed in the Status Bar.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/StatusBarAddNuGetPackagedErrorMessage.png" title="&lsquo;Paket error message in Status Bar&rsquo; &lsquo;Paket error message in Status Bar&rsquo;" ></p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketConsoleAddNuGetPackagedErrorMessage.png" title="&lsquo;Paket console error message&rsquo; &lsquo;Paket console error message&rsquo;" ></p>

<p>Otherwise you can open the Paket Console by clicking the Status Bar.</p>

<h2>Syntax highlighting</h2>

<p>Syntax highlighting is available for all paket files &ndash; paket.dependencies, paket.references, paket.lock and paket.template.</p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketDependenciesFileSyntaxHighlighting.png" title="&lsquo;paket.dependencies file syntax highlighting&rsquo; &lsquo;paket.dependencies file syntax highlighting&rsquo;" ></p>

<p><img src="/images/blog/PaketSupportInXamarinStudio/PaketLockFileSyntaxHighlighting.png" title="&lsquo;paket.lock file syntax highlighting&rsquo; &lsquo;paket.lock file syntax highlighting&rsquo;" ></p>

<p>This brings us to the end of the introduction to Paket support in Xamarin Studio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.9.2]]></title>
    <link href="http://lastexitcode.com/blog/2015/06/07/NuGetSupportInXamarinStudio5-9-2/"/>
    <updated>2015-06-07T10:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/06/07/NuGetSupportInXamarinStudio5-9-2</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 2.8.5 support</li>
<li> NuGet warning and error messages in Status Bar</li>
</ul>


<p>More information on all the changes in Xamarin Studio 5.9.2 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.9/xamarin.studio_5.9/">release notes</a>.</p>

<h2>NuGet 2.8.5 support</h2>

<p>Xamarin Studio now supports NuGet 2.8.5.</p>

<p>NuGet 2.8.5 adds support for three new .NET target frameworks: DNX, DNXCore and Core.</p>

<p>With NuGet 2.8.5 supported you can now install the <a href="https://www.nuget.org/packages/xunit/2.1.0-beta2-build2981">latest pre-release version of xUnit</a>.</p>

<h2>NuGet warning and error messages in Status Bar.</h2>

<p>Xamarin Studio 5.9 has a new native Status Bar on the Mac. This new Status Bar has a smaller width so the NuGet warning and error messages could be too long to be displayed. The screenshots below show a NuGet warning and error message in Xamarin Studio 5.9 that do not fit in the Status Bar.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-9-2/NuGetWarningMessageTruncatedInStatusBar.png" title="&lsquo;NuGet warning message truncated in status bar&rsquo; &lsquo;NuGet warning message truncated in status bar&rsquo;" ></p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-9-2/NuGetErrorMessageTruncatedInStatusBar.png" title="&lsquo;NuGet error message truncated in status bar&rsquo; &lsquo;NuGet error message truncated in status bar&rsquo;" ></p>

<p>In Xamarin Studio 5.9.2 the NuGet Status Bar messages have been shortened so they can be displayed in the new Status Bar without being truncated. The screenshots below show the new format of the NuGet warning and error messages shown in the Status Bar.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-9-2/NuGetShortenedWarningMessageInStatusBar.png" title="&lsquo;Shortened NuGet warning message in status bar&rsquo; &lsquo;Shortened NuGet warning message in status bar&rsquo;" ></p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-9-2/NuGetShortenedErrorMessageInStatusBar.png" title="&lsquo;Shortened NuGet error message in status bar&rsquo; &lsquo;Shortened NuGet error message in status bar&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.9]]></title>
    <link href="http://lastexitcode.com/blog/2015/05/03/NuGetSupportInXamarinStudio5-9/"/>
    <updated>2015-05-03T14:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/05/03/NuGetSupportInXamarinStudio5-9</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 2.8.3 support</li>
<li> Always show Packages folder in Solution window</li>
<li> Target framework change detected on project reload</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.9 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.9/xamarin.studio_5.9/">release notes</a>.</p>

<h2>NuGet 2.8.3 support</h2>

<p>Xamarin Studio now supports NuGet 2.8.3. This allows a NuGet package to target NuGet 2.8.3 explicitly. For example the PCLStorage 1.0.1 NuGet package will not install into Xamarin Studio 5.8, since it requires NuGet 2.8.3, but will install into Xamarin Studio 5.9.</p>

<p>NuGet packages, such as xunit, that target the new ASP.NET target frameworks, ASP.NetCore 5.0 and ASP.Net 5.0, can now be installed into Xamarin Studio now that it supports NuGet 2.8.3. Previously you would see an error message in the Package Console window:</p>

<pre><code>'xunit.core' already has a dependency defined for 'xunit.extensibility.core'.
</code></pre>

<p>Support for NuGet 2.8.5 is planned for Xamarin Studio 5.9.1.</p>

<h2>Always Show Packages Folder in Solution window</h2>

<p>The Packages folder is now always shown in the Solution window even if the project has no NuGet packages. Previously the Packages folder would only be shown if one or more NuGet packages were installed in a project.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-9/PackagesFolderInSolutionWindow.png" title="&lsquo;Packages folder in Solution window&rsquo; &lsquo;Packages folder in Solution window&rsquo; &lsquo;&rsquo;" ></p>

<h2>Target Framework Change Detected on Project Reload</h2>

<p>Xamarin Studio will detect a project file has been changed outside of Xamarin Studio and will reload the project. Now Xamarin Studio on reloading will detect the project&rsquo;s target framework has been changed and will  check the NuGet packages are compatible with the new target framework. Previously Xamarin Studio would only check the compatibility of NuGet packages if the target framework was changed from within Xamarin Studio via the project options.</p>

<p>This allows Xamarin Studio to check the NuGet packages are compatible when an iOS Classic project is converted to an iOS Unified project using Xamarin Studio&rsquo;s migration tool. The NuGet packages, such as Xamarin.Forms, can then be retargeted by Xamarin Studio using the <a href="blog/2014/08/10/NuGetSupportInXamarinStudio5-2/">Retarget menu</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TypeScript Support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2015/04/01/TypeScriptSupportInXamarinStudio/"/>
    <updated>2015-04-01T21:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/04/01/TypeScriptSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio and MonoDevelop now have support for <a href="http://www.typescriptlang.org/">TypeScript</a> on Linux, Mac and Windows with an alpha release of the <a href="https://github.com/mrward/typescript-addin">TypeScript Addin</a>.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/EditingTypeScriptInTextEditor.png" title="&lsquo;Editing TypeScript in Xamarin Studio on the Mac&rsquo; &lsquo;Editing TypeScript in Xamarin Studio on the Mac&rsquo;" ></p>

<p>The TypeScript addin uses <a href="http://v8dotnet.codeplex.com">V8.NET</a> which is a library that allows a .NET application to host <a href="https://code.google.com/p/v8/">Google&rsquo;s V8 JavaScript engine</a> and have JavaScript interact with .NET objects in the host application.</p>

<p>The ability to support Windows, Mac and Linux would not have been possible without the work done by <a href="http://jameswilkins.net">James Wilkins</a> and <a href="https://github.com/chrisber">Christian Bernasko</a>. <a href="http://jameswilkins.net">James Wilkins</a> created the <a href="http://v8dotnet.codeplex.com">V8.NET</a> library and when it was first released it supported only Windows. <a href="https://github.com/chrisber">Christian Bernasko</a> then took V8.NET and modified it to make it work with Mono on Linux and the Mac. The TypeScript addin is using V8.NET binaries built by Christian from his port of <a href="https://github.com/chrisber/v8dotnet/tree/development-mono">V8.NET</a>.</p>

<p>Please note that this is an alpha release and because V8.NET uses a native library it can cause Xamarin Studio or MonoDevelop to terminate if a bug is encountered.</p>

<h2>Features</h2>

<ul>
<li>TypeScript compilation on save or build.</li>
<li>Code completion.</li>
<li>Find references.</li>
<li>Rename refactoring.</li>
<li>Go to declaration.</li>
<li>Errors highlighted as you type.</li>
<li>Code folding.</li>
</ul>


<p>The addin supports:</p>

<ul>
<li>Xamarin Studio MonoDevelop 5 and above.</li>
<li>TypeScript 1.4</li>
<li>Linux, Mac and Windows.</li>
</ul>


<h2>Installing the addin</h2>

<p>The addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> in the alpha channel. By default the alpha repository is not enabled so you will have to enable it before you can find and install the addin.</p>

<p>In Xamarin Studio open the Add-in Manager and select the Gallery tab. Click the repository drop down and if <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> is not displayed then click <strong>Manage Repositories&hellip;</strong>. In the window that opens tick the check box next to <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> and then click the Close button.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/AddingAlphaChannelAddins.png" title="&lsquo;Enabling alpha channel addins&rsquo; &lsquo;Enabling alpha channel addins&rsquo;" ></p>

<p>Back in the Add-in Manager dialog click the Refresh button to update the list of addins. Use the search text box in the top right hand corner of the dialog to search for the addin by typing in <strong>TypeScript</strong>.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/AddinManagerTypeScriptAddin.png" title="&lsquo;TypeScript addin selected in Addin Manager dialog&rsquo; &lsquo;TypeScript addin selected in Addin Manager dialog&rsquo;" ></p>

<p>Select the TypeScript addin and then click the <strong>Install&hellip;</strong> button.</p>

<p>Note that if you are using Linux 32 bit then you should install the <strong>TypeScript Linux 32 bit</strong> addin. The other <strong>TypeScript</strong> addin listed supports Linux 64 bit. Hopefully in the future it will be possible to support both Linux 32 bit and 64 bit using the same addin.</p>

<h2>Getting Started</h2>

<p>Now that the TypeScript addin is installed let us create a TypeScript file.</p>

<p>To add a TypeScript file open the New File dialog, select the <strong>Web</strong> category and select <strong>Empty TypeScript</strong> file.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/NewFileDialogNewTypeScriptFile.png" title="&lsquo;New File Dialog &ndash; New TypeScript File&rsquo; &lsquo;New File Dialog &ndash; New TypeScript File&rsquo;" ></p>

<p>Give the file a name and click the New button.</p>

<p>Note that currently the TypeScript file needs to be included in a project. Standalone TypeScript project files are not supported. TypeScript files can be added to any .NET project.</p>

<h2>Code Completion</h2>

<p>When editing the TypeScript code you will have code completion when you press the dot character.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptCodeCompletion.png" title="&lsquo;TypeScript dot code completion&rsquo; &lsquo;TypeScript dot code completion&rsquo;" ></p>

<p>Code completion also works when you type the opening bracket of a function.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptMethodCompletion.png" title="&lsquo;TypeScript method completion&rsquo; &lsquo;TypeScript method completion&rsquo;" ></p>

<h2>Go to Declaration</h2>

<p>The text editor&rsquo;s right click menu has three TypeScript menus: Go to Declaration, Find References and Rename.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptTextEditorContextMenu.png" title="&lsquo;Text editor context menu with TypeScript menu options&rsquo; &lsquo;Text editor context menu with TypeScript menu options&rsquo;" ></p>

<p>The Go To Declaration menu option will open the corresponding definition in the text editor.</p>

<h2>Find References</h2>

<p>Find References will show the references in the Search Results window.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptReferencesInSearchResults.png" title="&lsquo;TypeScript references shown in Search Results window&rsquo; &lsquo;TypeScript references shown in Search Results window&rsquo;" ></p>

<h2>Rename</h2>

<p>Selecting the Rename menu option in the text editor will open the Rename dialog where you can type in a new name and click OK to have it updated.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptRenameDialog.png" title="&lsquo;TypeScript rename dialog&rsquo; &lsquo;TypeScript rename dialog&rsquo;" ></p>

<p>Note that currently on Linux the Rename dialog will only be displayed if the keyboard shortcut F2 is used. Selecting the context menu will not show the Rename dialog on Linux but will work on Windows and on the Mac.</p>

<h2>Error Highlighting</h2>

<p>Errors in your TypeScript code will be highlighted as you are typing in the text editor.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptErrorsHighlightedInTextEditor.png" title="&lsquo;TypeScript errors highlighted in text editor&rsquo; &lsquo;TypeScript errors highlighted in text editor&rsquo;" ></p>

<h2>Code Folding</h2>

<p>Code folding is supported for TypeScript classes, modules and interfaces.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptCodeFolding.png" title="&lsquo;TypeScript code folding&rsquo; &lsquo;TypeScript code folding&rsquo;" ></p>

<p>Code folding by default is disabled. To enable code folding open the Preferences dialog and in the Text Editor section select the General category, then tick the <strong>Enable code folding</strong> check box.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/PreferencesEnableCodeFolding.png" title="&lsquo;Preferences &ndash; Enabling code folding&rsquo; &lsquo;Preferences &ndash; Enabling code folding&rsquo;" ></p>

<h2>Compiling to JavaScript</h2>

<p>By default the TypeScript files will be compiled to JavaScript when the project is compiled.</p>

<p>There are more compiler options available in the project options in the Build &ndash; TypeScript category.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptCompilerOptions.png" title="&lsquo;TypeScript compiler options for the project&rsquo; &lsquo;TypeScript compiler options for the project&rsquo;" ></p>

<p>On this page you can change when the compiler is run and what options are passed to the compiler when generating JavaScript code.</p>

<p>If an <strong>Output file</strong> is specified then all the TypeScript files will be compiled into a single JavaScript file. If an <strong>Output directory</strong> is specified then the JavaScript files will be generated in that directory instead of next to the TypeScript files.</p>

<p>That is the end of our quick look at TypeScript support in Xamarin Studio and MonoDevelop.</p>

<h2>Source Code</h2>

<p>The source code for the addin and for the V8.NET engine that works on Mono are available on GitHub.</p>

<ul>
<li><p><a href="ttps://github.com/mrward/typescript-addin/tree/monodevelop-v8-dotnet">TypeScript addin source code</a>.</p></li>
<li><p><a href="https://github.com/chrisber/v8dotnet/tree/development-mono">V8.NET source code</a>.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
