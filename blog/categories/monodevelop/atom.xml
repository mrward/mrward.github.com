<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: monodevelop | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/monodevelop/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2016-07-09T16:45:50+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.NET Core Test Runner Support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/07/09/NetCoreTestRunnerSupportInXamarinStudio/"/>
    <updated>2016-07-09T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/07/09/NetCoreTestRunnerSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>The latest version of the .NET Core addin for Xamarin Studio and MonoDevelop now supports <a href="https://docs.microsoft.com/en-us/dotnet/articles/core/testing/unit-testing-with-dotnet-test">.NET Core Test Runners</a>.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreTestRunnerSupportInXamarinStudio.png" title="&lsquo;.NET Core Test Runner in Xamarin Studio&rsquo; &lsquo;.NET Core Test Runner in Xamarin Studio&rsquo;" ></p>

<p>Xamarin Studio uses the <a href="https://docs.microsoft.com/en-us/dotnet/articles/core/tools/test-protocol">.NET Core test communication protocol</a> to support .NET Core test runners. This protocol provides a way to discover and run the unit tests provided by a .NET Core test runner.</p>

<p>When Xamarin Studio finds a testRunner in the project.json file it will attempt to discover the unit tests for that project.</p>

<pre><code>{
    "version": "1.1.0-*",

    "testRunner": "nunit",

    "dependencies": {,
        "NUnit": "3.4.0",
        "dotnet-test-nunit": "3.4.0-beta-1"
    },

    "frameworks": {
        "netcoreapp1.0": {
            "imports": [
                "netcoreapp1.0",
                "portable-net45+win8"
            ],
            "dependencies": {
                "Microsoft.NETCore.App": {
                    "version": "1.0.0-*",
                    "type": "platform"
                }
            }
        }
    }
}
</code></pre>

<p>The discovered tests are then shown in the Unit Tests window.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreDiscoveredUnitTestsInUnitTestsWindow.png" title="&lsquo;Discovered NET Core unit tests in Unit Tests window&rsquo; &lsquo;Discovered NET Core unit tests in Unit Tests window&rsquo;" ></p>

<p>After building the project the Unit Tests window will discover any new tests that have been added.</p>

<p>Tests can be run by clicking Run All or by right clicking a test in the Unit Tests window and selecting Run Test.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/RunDotNetCoreTestsContextMenu.png" title="&lsquo;Run NET Core unit tests in Unit Tests window&rsquo; &lsquo;Run NET Core unit tests in Unit Tests window&rsquo;" ></p>

<p>The test results are shown in the Test Results window.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreTestResultsWindow.png" title="&lsquo;.NET Core test results  in Test Results window&rsquo; &lsquo;.NET Core test results  in Test Results window&rsquo;" ></p>

<p>Console output from the test runner is shown in the Application Output window.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreTestRunnerApplicationOutput.png" title="&lsquo;.NET Core Test Runner in Xamarin Studio&rsquo; &lsquo;.NET Core Test Runner in Xamarin Studio&rsquo;" ></p>

<p>Debugging the unit tests is not yet supported.</p>

<p><a href="https://xunit.github.io/">xUnit</a> and <a href="http://nunit.org/">NUnit</a> provide .NET Core test runners and both of these are supported in Xamarin Studio. More information can be found in existing tutorials on how to use these test runners:</p>

<ul>
<li> <a href="http://www.alteridem.net/2016/06/18/nunit-3-testing-net-core-rc2/">NUnit 3 Tests for .NET Core RC2 and ASP.NET Core RC2</a></li>
<li> <a href="http://xunit.github.io/docs/getting-started-dotnet-core.html">Getting started with xUnit.net (.NET Core / ASP.NET Core)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 6.0]]></title>
    <link href="http://lastexitcode.com/blog/2016/06/12/NuGetSupportInXamarinStudio6-0/"/>
    <updated>2016-06-12T14:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/06/12/NuGetSupportInXamarinStudio6-0</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 6.0 was released last week and it includes a lot of <a href="https://blog.xamarin.com/live-from-dotnetconf-cycle-7-xamarin-studio-6-and-more/">new features</a>, such as a new dark theme and <a href="https://github.com/dotnet/roslyn">Roslyn integration</a>. This release also includes some improvements made to the NuGet support.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-0/AddPackagesDialogDarkTheme.png" title="&lsquo;Add Packages Dialog &ndash; Dark Theme&rsquo; &lsquo;Add Packages Dialog &ndash; Dark Theme&rsquo;" ></p>

<h2>New Features</h2>

<ul>
<li> Support NuGet packages targeting tvOS.</li>
<li> Support updating pre-release NuGet packages.</li>
<li> Show updates available for pre-release NuGet packages.</li>
<li> Remember Show pre-release Packages setting in Add Packages dialog.</li>
<li> Error dialog displayed if NuGet.Config file cannot be read.</li>
</ul>


<p>More information on all the changes in Xamarin Studio 6.0 can be found in the <a href="https://developer.xamarin.com/releases/studio/xamarin.studio_6.0/xamarin.studio_6.0/">release notes</a>.</p>

<h2>Support NuGet packages targeting watchOS</h2>

<p>A new Xamarin.WatchOS target framework is now supported which allows NuGet packages to contain assemblies for watchOS.</p>

<h2>Support updating pre-release NuGet packages</h2>

<p>Previously it was not possible to update a pre-release NuGet package to a later pre-release  from the Solution window, only updates to stable NuGet packages were supported. The only way to update to a later pre-release NuGet package was to use the Add Packages dialog.</p>

<p>Now an individual pre-release NuGet package can be updated by right clicking and selecting Update. When all packages in a project or solution are updated then pre-release NuGet packages will be updated to a later pre-release version if they are available.</p>

<h2>Show updates available for pre-release NuGet packages</h2>

<p>Previously Xamarin Studio would only show stable NuGet package updates as being available if a pre-release NuGet package was installed. Now Xamarin Studio will check for updates for pre-release NuGet packages as well as stable packages and display this information in the Solution window.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-0/PreReleaseNuGetPackageUpdatesInSolutionWindow.png" title="&lsquo;Pre-release NuGet package updates in Solution window&rsquo; &lsquo;Pre-release NuGet package updates in Solution window&rsquo;" ></p>

<p>Only if an installed NuGet package is a pre-release version will pre-release updates be shown as available in the Solution window. Xamarin Studio will not check for pre-release updates for stable NuGet package versions that are installed.</p>

<h2>Remember Show pre-release Packages setting in Add Packages dialog</h2>

<p>The Show pre-release Packages check box setting will now be remembered in the Add Packages dialog on a per solution basis.</p>

<h2>Error dialog displayed if the NuGet.Config file cannot be read</h2>

<p>Previously if the NuGet.Config file could not be read the error would
be silently logged, but not reported, and Xamarin Studio would
then switch to using the default official NuGet package source. Now an error
dialog is shown indicating that there was a problem reading the
NuGet.Config file.</p>

<h2>Bug Fixes</h2>

<p><strong>Support NuGet packages that use icons from local files</strong></p>

<p>A NuGet package can now use an icon, which will be shown in the Add Packages
dialog, taken from the local file system using a file url. Previously this would fail with an invalid cast exception.</p>

<p><strong>Incorrect update count displayed after updating NuGet packages.</strong></p>

<p>When an update caused a NuGet package to be uninstalled the Packages
folder in the Solution window would show an incorrect count for the available updates.</p>

<p><strong>NuGet restore and update not working for workspaces</strong></p>

<p>With a workspace opened, or multiple solutions opened in Xamarin Studio, then restoring and updating NuGet packages would only work for one of the solutions.</p>

<p><strong>Unable to add Google Play Services packages</strong></p>

<p>The Xamarin.Android.Support.v7.AppCompat NuGet package depends on
a single version of the Xamarin.Android.Support.v4 NuGet package.
When a Xamarin Google Play Services NuGet package is installed
that depends on a higher version of the Xamarin.Android.Support.v4
NuGet package the install would fail to find a version of the
AppCompat NuGet package that is compatible. An error similar to the
following would be displayed in the Package Console window:</p>

<pre><code>Could not add Xamarin.GooglePlayServices.Ads.
Updating 'Xamarin.Android.Support.v4 23.1.1.0' to
'Xamarin.Android.Support.v4 23.1.1.1' failed. Unable to find a version
of 'Xamarin.Android.Support.v7.AppCompat' that is compatible with
'Xamarin.Android.Support.v4 23.1.1.1'.
</code></pre>

<p>The problem was that the AppCompat NuGet package is not involved
in the initial NuGet package resolution using the remote package
source so it is initially not considered for installation into the
packages directory. When a package reference is then added to the
packages.config file a search for a compatible AppCompat package was
only using the local solution&rsquo;s packages directory which fails causing
the install to fail.</p>

<p>To fix this the local solution packages directory is used first
when looking for a compatible AppCompat NuGet package and will
fallback to using the configured remote package sources if no suitable package
is found in this directory. To handle a package being added to the
packages.config at this point, after the original NuGet packages have
already been downloaded to the solution&rsquo;s packages directory, Xamarin Studio will detect a package is added to the packages.config file and install the NuGet package if it is not
already in the local solution packages directory.</p>

<p><strong>Incorrect package version being installed</strong></p>

<p>When installing a NuGet package using the Google Play Services dialog a package version is not specified by the dialog. If the NuGet package being installed was found in the local machine&rsquo;s NuGet cache it would be used instead of the latest version from the official NuGet gallery at nuget.org. This could result in a lower version being installed than expected.</p>

<p><strong>MSBuild property files (.props) not being added at correct project location</strong></p>

<p>Installing a NuGet package that included an MSBuild .props file would
add an Import element for the .props at the end of the project file
(.csproj) instead of at the start. The .props files are now added to the project
file as the first child element inside the project&rsquo;s root element.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Core 1.0 RC2 support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/06/05/AspNetCoreRC2SupportInXamarinStudio/"/>
    <updated>2016-06-05T19:02:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/06/05/AspNetCoreRC2SupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio and MonoDevelop now have support for <a href="https://blogs.msdn.microsoft.com/webdev/2016/05/16/announcing-asp-net-core-rc2/">ASP.NET Core 1.0 RC2</a> with an alpha release of the <a href="https://github.com/mrward/monodevelop-dnx-addin">.NET Core addin</a>.</p>

<p><img src="/images/blog/AspNetCoreRC2SupportInXamarinStudio/WebProjectInSolutionWindow.png" title="&lsquo;ASP.NET Core web project in Solution window&rsquo; &lsquo;ASP.NET Core web project in Solution window&rsquo;" ></p>

<p>This is an update of the original <a href="/blog/2016/01/01/DNXSupportInXamarinStudio/">DNX addin</a> which adds support for .NET Core RC2 and also, thanks to <a href="https://twitter.com/davidkarlas">David Karlaš</a>, adds support for debugging .NET Core applications on the Mac.</p>

<h2>Features</h2>

<ul>
<li> Debugging .NET Core applications with the .NET Core CLR on Mac.</li>
<li> Project templates for console, library and web applications</li>
<li> Code completion</li>
<li> NuGet integration</li>
<li> Solution window integration</li>
</ul>


<h2>Supports</h2>

<ul>
<li> MonoDevelop and Xamarin Studio 6.0 (build 5166). (Note that 6.1 is not yet supported)</li>
<li> <a href="https://www.microsoft.com/net/core">.NET Core 1.0 RC2</a>.</li>
</ul>


<h2>Installing .NET Core SDK</h2>

<p>The <a href="https://www.microsoft.com/net/core">.NET Core SDK</a> needs to be installed separately before using the .NET Core addin. Detailed installation instructions can be found on <a href="https://www.microsoft.com/net/core">Microsoft&rsquo;s .NET Core web site</a>.</p>

<h2>Installing the addin</h2>

<p>The addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> in the alpha channel. In Xamarin Studio open the Add-in Manager and select the Gallery tab. Click the repository drop down and if <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> is not displayed then click Manage Repositories. In the window that opens tick the check box next to Xamarin Studio Add-in Repository (Alpha Channel) and then click the Close button.</p>

<p><img src="/images/blog/AspNetCoreRC2SupportInXamarinStudio/AddinManagerNetCoreAddin.png" title="&lsquo;.NET Core addin selected in Addin Manager dialog&rsquo; &lsquo;.NET Core addin selected in Addin Manager dialog&rsquo;" ></p>

<p>Select the .NET Core addin and then click the Install button.</p>

<p>After installing the .NET Core addin you will need to restart Xamarin Studio before the project templates are available in the New Project dialog.</p>

<h2>Creating a .NET Core project</h2>

<p>There are three project templates available for .NET Core in the New Project dialog.</p>

<p><img src="/images/blog/AspNetCoreRC2SupportInXamarinStudio/NewProjectDialogNetCoreProjectTemplates.png" title="&lsquo;New ASP.NET 5 project templates&rsquo; &lsquo;New ASP.NET 5 project templates&rsquo;" ></p>

<h2>Debugging</h2>

<p>Thanks to <a href="https://twitter.com/davidkarlas">David Karlaš</a> there is a support for debugging .NET Core applications when running on the .NET Core CLR if you have the <a href="http://addins.monodevelop.com/Project/Index/228">VSCode Debugger addin</a> installed.</p>

<p><img src="/images/blog/AspNetCoreRC2SupportInXamarinStudio/DebuggingNetCoreApplication.png" title="&lsquo;Debugging a .NET Core application&rsquo; &lsquo;Debugging a .NET Core application&rsquo;" ></p>

<p>The VSCode Debugger addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> on the alpha channel.</p>

<p>Debugging .NET Core console and web projects that target the full .NET framework is supported on all platforms. The .NET Core command line tool (dotnet.exe) will create an executable when targeting the full .NET Framework which can be debugged in Xamarin Studio. On Windows the x86 version of the .NET Core SDK needs be installed since Xamarin Studio currently cannot debug x64 applications on Windows.</p>

<h2>Source Code</h2>

<p>The source code for the addin is available on GitHub.</p>

<ul>
<li><a href="https://github.com/mrward/monodevelop-dnx-addin">.NET Core addin source code</a>.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET 5 and DNX support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/01/01/DNXSupportInXamarinStudio/"/>
    <updated>2016-01-01T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2016/01/01/DNXSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio and MonoDevelop now have support for <a href="http://docs.asp.net/en/latest/dnx/overview.html">ASP.NET 5 and DNX</a> with an alpha release of the <a href="https://github.com/mrward/monodevelop-dnx-addin">DNX addin</a>.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/DnxWebProjectInSolutionWindow.png" title="&lsquo;DNX web project in Solution window&rsquo; &lsquo;DNX web project in Solution window&rsquo;" ></p>

<p>The core part of the addin that communicates with the DNX host is taken directly from <a href="https://github.com/OmniSharp/omnisharp-roslyn">OmniSharp</a> and is used mostly unchanged.</p>

<h2>Features</h2>

<ul>
<li> Project templates for console, library and web applications</li>
<li> Code completion</li>
<li> Debugger support with Mono 4.3</li>
<li> NuGet integration</li>
<li> Solution window integration</li>
</ul>


<h2>Supports</h2>

<ul>
<li> MonoDevelop and Xamarin Studio 5.9 and later versions.</li>
<li> ASP.NET 5 RC 1 Update 1 and earlier versions.</li>
</ul>


<h2>Installing ASP.NET 5</h2>

<p><a href="https://get.asp.net/">ASP.NET 5</a> needs to be installed separately before using the DNX addin. There are instructions on <a href="https://get.asp.net/">get.asp.net</a> on how to do this for Mac, Linux and Windows.</p>

<h2>Installing the addin</h2>

<p>The addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> in the alpha channel. In Xamarin Studio open the Add-in Manager and select the Gallery tab. Click the repository drop down and if <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> is not displayed then click Manage Repositories. In the window that opens tick the check box next to Xamarin Studio Add-in Repository (Alpha Channel) and then click the Close button.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/AddingAlphaChannelAddins.png" title="&lsquo;Enabling alpha channel addins&rsquo; &lsquo;Enabling alpha channel addins&rsquo;" ></p>

<p>Back in the Add-in Manager dialog click the Refresh button to update the list of addins. Use the search text box in the top right hand corner of the dialog to search for the addin by typing in <strong>DNX</strong>.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/AddinManagerDnxAddin.png" title="&lsquo;DNX addin selected in Addin Manager dialog&rsquo; &lsquo;DNX addin selected in Addin Manager dialog&rsquo;" ></p>

<p>Select the DNX addin and then click the Install button.</p>

<p>After installing the DNX addin you will need to restart Xamarin Studio before the project templates will be available in the New Project dialog.</p>

<h2>Creating an ASP.NET 5 project</h2>

<p>There are three project templates available for ASP.NET 5 in the New Project dialog.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/NewProjectDialogDnxProjectTemplates.png" title="&lsquo;New ASP.NET 5 project templates&rsquo; &lsquo;New ASP.NET 5 project templates&rsquo;" ></p>

<p>Each of the project templates will create a solution and an .xproj file in the same way as Visual Studio 2015 does. The projects created should be compatible with Visual Studio 2015.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/DnxConsoleProjectInSolutionWindow.png" title="&lsquo;DNX console project in Solution window&rsquo; &lsquo;DNX console project in Solution window&rsquo;" ></p>

<h2>Dependencies</h2>

<p>When you create or open an ASP.NET 5 project the NuGet packages it uses will automatically be restored.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/SolutionWindowRestoringNuGetPackages.png" title="&lsquo;Restoring NuGet packages in Solution window&rsquo; &lsquo;Restoring NuGet packages in Solution window&rsquo;" ></p>

<p>In the Solution window the dependencies show a warning icon if they are not resolved and the Dependencies folder shows a message that it is restoring the NuGet packages. Once restored you can expand the Dependencies folder and see the dependency hierarchy.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/DnxConsoleProjectDependenciesExpanded.png" title="&lsquo;Dependency hierarchy in Solution window&rsquo; &lsquo;Dependency hierarchy in Solution window&rsquo;" ></p>

<p>If the DNX runtime being used by the solution is not installed then an error icon will be displayed next to the Dependencies folder.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/SolutionWindowDependenciesError.png" title="&lsquo;Dependencies error icon in Solution window&rsquo; &lsquo;Dependencies error icon in Solution window&rsquo;" ></p>

<p>Hovering the mouse over the error icon will show more information about the error.</p>

<h2>Building</h2>

<p>When you build the solution or project any errors and warnings are displayed in the Errors window and in the text editor. No assemblies are generated when you build.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/TextEditorDnxBuildError.png" title="&lsquo;DNX build error in text editor&rsquo; &lsquo;DNX build error in text editor&rsquo;" ></p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/DnxBuildErrorsInErrorsWindow.png" title="&lsquo;DNX build errors in Errors window&rsquo; &lsquo;DNX build errors in Errors window&rsquo;" ></p>

<h2>Running</h2>

<p>The main toolbar shows the currently selected command and the framework that will be used when the application is run. These are taken from the project.json file.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/DnxCommandsInMainToolbar.png" title="&lsquo;DNX commands in main toolbar&rsquo; &lsquo;DNX commands in main toolbar&rsquo;" ></p>

<p>The screenshot above shows the main toolbar for a web project. There are three entries:</p>

<ul>
<li> web</li>
<li> web DNX 4.5.1</li>
<li> web DNX Core 5.0</li>
</ul>


<p>The first entry will run the web command and use the default runtime which will currently be DNX 4.5.1. The last two entries will run the web command but will explicitly run the application with the specified runtime.</p>

<h2>Debugging</h2>

<p>Thanks to <a href="https://twitter.com/davidkarlas">David Karlaš</a> and <a href="https://github.com/vargaz">Zoltan Varga</a> there is support for debugging DNX applications with DNX 4.5.1 if you have <a href="http://download.mono-project.com/archive/nightly/macos-10-universal/">Mono 4.3</a> installed.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/DebuggingDnxApplication.png" title="&lsquo;Debugging a DNX application&rsquo; &lsquo;Debugging a DNX application&rsquo;" ></p>

<p>Debugging ASP.NET 5 projects with the CoreCLR is not supported on Mac nor on Linux. Debugging ASP.NET 5 projects is not supported at all on Windows.</p>

<h2>Adding NuGet Packages</h2>

<p>To add a NuGet package to a project you can right click the Dependencies folder in the Solution window and select Add NuGet Packages, or alternatively you can double click the Dependencies folder.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/AddNuGetPackagesMenuItem.png" title="&lsquo;Add NuGet Packages menu in Solution window&rsquo; &lsquo;Add NuGet Packages menu in Solution window&rsquo;" ></p>

<p>This will open up the Add NuGet Packages dialog. Installing a NuGet package using this dialog will add the NuGet package into the project.json file.</p>

<p>Note that using the Add Packages dialog from the Packages folder will not add the NuGet package into the project.json file and will instead download the package to the packages directory and update the packages.config file.</p>

<h2>Adding Dependencies</h2>

<p>Dependencies can also be added directly into the project.json file. Currently there is no code completion available in the project.json file but changes to the file are monitored and the Dependencies folder will be updated when items are added or removed. New NuGet package dependencies that are added will automatically be restored if they are missing.</p>

<h2>Removing Dependencies</h2>

<p>A dependency can be removed by selecting it in the Solution window, right clicking and selecting Remove, or by pressing the delete key.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/RemoveDependencyMenuItem.png" title="&lsquo;Remove dependency menu in Solution window&rsquo; &lsquo;Remove dependency menu in Solution window&rsquo;" ></p>

<h2>Changing the active framework</h2>

<p>In Visual Studio the active framework can be changed by selecting it from the drop down list at the top of the text editor. Currently using the drop down list at the top of the text editor to change the active framework is not supported in Xamarin Studio. Instead you can right click in the text editor, select Active Framework and then select the framework.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/TextEditorSelectActiveDnxFramework.png" title="&lsquo;Active DNX framework context menu in text editor&rsquo; &lsquo;Active DNX framework context menu in text editor&rsquo;" ></p>

<p>The active framework affects the code completion provided in the text editor. In the screenshot below the active framework has been set to DNX Core and you can see that the DateTime type does not show ToShortDateString in its completion list.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/DnxCodeCompletionForActiveFramework.png" title="&lsquo;Code completion for active DNX framework&rsquo; &lsquo;Code completion for active DNX framework&rsquo;" ></p>

<p>You can also see that the code in the #if DNX451 block is grayed out since it is not used with the currently active framework.</p>

<h2>DNX Output</h2>

<p>Output from the DNX host and from OmniSharp can be seen in the DNX Output window. This window can be opened by selecting <strong>DNX Output</strong> from the <strong>View</strong> menu.</p>

<p><img src="/images/blog/DNXSupportInXamarinStudio/DnxOutputWindow.png" title="&lsquo;DNX Output window&rsquo; &lsquo;DNX Output window&rsquo;" ></p>

<p>By default only warnings and errors will be displayed in the DNX Output window. To see more or less information you can change the DNX output verbosity in preferences in the DNX &ndash; General section.</p>

<h2>Known Issues</h2>

<p><strong>kqueue() FileSystemWatcher has reached the maximum number of files to watch</strong></p>

<p> When opening a project with many source files, such as AutoFac, you may see the above FileSystemWatcher error message. To resolve this problem you can set the MONO_MANAGED_WATCHER to false:</p>

<pre><code>export MONO_MANAGED_WATCHER=false
</code></pre>

<p>Xamarin Studio will need to be run from the command line for this environment variable to be used.</p>

<p><strong>project.json file formatting</strong></p>

<p>When adding or removing dependencies from the Solution window will cause the project.json file to be reformatted differently compared to how Visual Studio 2015 formats the file.</p>

<h2>Source Code</h2>

<p>The source code for the addin is available on GitHub.</p>

<ul>
<li><a href="https://github.com/mrward/monodevelop-dnx-addin">DNX addin source code</a>.</li>
</ul>


<p> There is also a <a href="https://github.com/mrward/monodevelop-dnx-addin/tree/roslyn">separate branch</a> that supports MonoDevelop and Xamarin Studio 6.0.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.10]]></title>
    <link href="http://lastexitcode.com/blog/2015/11/22/NuGetSupportInXamarinStudio5-10/"/>
    <updated>2015-11-22T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2015/11/22/NuGetSupportInXamarinStudio5-10</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 5.10 was released last week as part of the <a href="https://blog.xamarin.com/introducing-xamarin-4/">Xamarin 4 release</a> and it includes changes to the NuGet support.</p>

<h2>Changes</h2>

<ul>
<li> Support NuGet 2.8.7.</li>
<li> Open readme.txt when a NuGet package is installed.</li>
<li> Support packages.config file named after the project.</li>
<li> Local Copy settings are preserved for references when updating packages.</li>
<li> Do not show Checking for package updates message in status bar.</li>
<li> Do not show warning in the status bar if a NuGet package has PowerShell scripts.</li>
<li> Prevent the solution being closed when NuGet packages are being added.</li>
<li> Removing a NuGet package does not update the Solution window when multiple solutions are open.</li>
<li> Prevent packages.config file being marked as deleted by Git after updating a pre-release NuGet package.</li>
<li> Prevent retargeting a NuGet package marking packages.config as deleted by Git.</li>
<li> Allow Microsoft.ApplicationInsights NuGet package to be installed.</li>
<li> Support NuGet packages targeting watchOS.</li>
<li> Package license acceptance (Xamarin Studio 5.10.3)</li>
</ul>


<p>More information on all the changes in Xamarin Studio 5.10 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.10/xamarin.studio_5.10/">release notes</a>.</p>

<h2>NuGet 2.8.7 support</h2>

<p>Xamarin Studio now supports NuGet 2.8.7. NuGet 2.8.7 adds support for the Universal App Platform (UAP) target framework to support Windows 10 Application Development.</p>

<h2>Open readme.txt when a NuGet package is installed</h2>

<p>A NuGet package can contain a <a href="https://docs.nuget.org/create/creating-and-publishing-a-package#user-content-automatically-displaying-a-readmetxt-file-during-package-installation">readme.txt file</a> which Xamarin Studio will now open and display in the text editor when the NuGet package is installed or updated.</p>

<h2>Preserve Local Copy on Updating Packages</h2>

<p>The Local Copy setting on an assembly reference will now be preserved when updating a NuGet package or retargeting a NuGet package.</p>

<p>By default Local Copy is set to true for assembly references when installing a NuGet package. If you set Local Copy to false for one or more of these references then this setting will now be preserved when updating or retargeting the NuGet package.</p>

<h2>Packages.config file named after project</h2>

<p>NuGet supports multiple projects in the same directory each using their own packages.config file. To allow multiple projects in the same directory to each use their own NuGet packages you can name the packages.config file after each project. In the examples below the project filename is on the left and the corresponding packages.config filename is on the right.</p>

<ul>
<li>Foo.csproj => packages.Foo.config</li>
<li>Bar.csproj => packages.Bar.config</li>
<li>Foo Bar.csproj => packages.Foo_Bar.config</li>
</ul>


<p>Xamarin Studio now checks for the packages.ProjectName.config file first and will use it if it exists, otherwise it will fall back to the default behaviour and use the packages.config file.</p>

<p>Note that a new project without any NuGet packages will use a packages.config file by default. The basic procedure to enable a project specific packages.config file when creating a new project is:</p>

<ol>
<li>Create new project called Foo.</li>
<li>Add a NuGet package to the Foo project.</li>
<li>Rename the packages.config file to packages.Foo.config</li>
<li>Reload the solution in Xamarin Studio.</li>
</ol>


<p>Also note that if you remove all the NuGet packages from a project the packages.ProjectName.config file will be deleted and on adding a new NuGet package the default packages.config file will be used.</p>

<h2>Do not show Checking for package updates message in status bar</h2>

<p>Previously when Xamarin Studio was checking for NuGet package updates a message would appear in the status bar. This status bar message has now been removed since checking for NuGet package updates is a background task and does not prevent Xamarin Studio from being used.</p>

<h2>Do not show warning in the status bar if a NuGet package has PowerShell scripts</h2>

<p>Previously if a NuGet package was installed and it contained PowerShell scripts then a warning was shown in the status bar. Now this message is only shown in the Package Console window.</p>

<h2>Prevent the solution being closed when NuGet packages are being added</h2>

<p>A check is now made when Xamarin Studio is closed to see if NuGet packages are still being installed. If this is the case then a dialog will be displayed indicating that it is not currently possible to close Xamarin Studio allowing the NuGet package to finish installing.</p>

<h2>Support NuGet packages targeting watchOS</h2>

<p>A new Xamarin.WatchOS target framework is now supported which allows NuGet packages to contain assemblies for watchOS.</p>

<h2>Package license acceptance</h2>

<p>Xamarin Studio 5.10.3 now includes a license acceptance dialog that will be displayed if a NuGet package requires a license to be accepted before it is installed. If the license is declined then the NuGet package will not be installed.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-10/PackageLicenseAcceptanceDialog.png" title="&lsquo;Package license acceptance dialog&rsquo; &lsquo;Package license acceptance dialog&rsquo;" ></p>

<h2>Bug Fixes</h2>

<p><strong>Removing a NuGet package does not update the Solution window when multiple solutions are open</strong></p>

<p>With two or more solutions opened at the same time the Packages folder would not be updated for all solutions when a NuGet package was removed. This was because Xamarin Studio was not refreshing the Packages folder for all solutions currently open.</p>

<p><strong>Prevent packages.config file being marked as deleted by Git after updating pre-release NuGet package.</strong></p>

<p>If there was only one pre-release NuGet package installed into a project and then a later version of the NuGet package was installed from the Add Packages dialog then the packages.config file was then being shown as deleted by Git instead of modified.</p>

<p>The packages.config file is deleted by NuGet after the old NuGet package is uninstalled if there are no NuGet packages referenced. A special case to handle this was added in Xamarin Studio 5.3 but that only handled updating a NuGet package from the Solution window. Now updating a pre-release from the Add Packages dialog is also handled.</p>

<p><strong>Retargeting a NuGet package marks packages.config as deleted by Git</strong></p>

<p>This is similar to the previous bug. Retargeting a NuGet package will uninstall and then install the NuGet package. If there is only one NuGet package in the project then the packages.config file is deleted and was causing Git to mark the file as deleted instead of updated.</p>

<p><strong>Unable to install Microsoft.ApplicationInsights NuGet package</strong></p>

<p>Xamarin Studio 5.9.2 added support for NuGet 2.8.5 but it was not possible to install the <a href="https://www.nuget.org/packages/Microsoft.ApplicationInsights/">Microsoft.ApplicationInsights NuGet package</a> into a project. It was possible to install it using Visual Studio with NuGet 2.8.3 or higher installed. The error reported by Xamarin Studio was:</p>

<pre><code>Adding Microsoft.ApplicationInsights...
The 'Microsoft.ApplicationInsights' package requires NuGet client version '2.8.50313' or above, but the current NuGet version is '2.8.5.0'.
</code></pre>

<p>Xamarin Studio 5.10 now allows the Microsoft.ApplicationInsights NuGet package to be installed into a project.</p>
]]></content>
  </entry>
  
</feed>
