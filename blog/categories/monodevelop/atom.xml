<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: monodevelop | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/monodevelop/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2019-04-20T12:36:54+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.0]]></title>
    <link href="http://lastexitcode.com/blog/2019/04/20/NuGetSupportInVisualStudioMac8-0/"/>
    <updated>2019-04-20T12:40:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2019/04/20/NuGetSupportInVisualStudioMac8-0</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Fixed build action not available after installing package into a PackageReference project</li>
<li> Fixed NuGet extension api install events not raised for PackageReference projects</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.0</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed build action not available on installing package into a PackageReference project</strong></p>

<p>After installing the Xamarin.GooglePlayServices.Basement NuGet package, into a project
that used PackageReferences, the GoogleServicesJson build action, defined by this NuGet package,
was not available in the list of build actions when you right clicked a file in the
Solution window. The build action was available after the solution was closed and re-opened.</p>

<p>Installing a NuGet package into a project that used PackageReferences
would not re-evaluate the project&rsquo;s MSBuild information. This resulted in any custom
<a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/visual-studio-integration-msbuild?view=vs-2019#additional-build-actions">AvailableItemNames</a>
not being available to be used as a build action
in the Solution window. The build actions for a project were cached so these
are now cleared to ensure the latest items are available
after an re-evaluation.</p>

<p><strong>Fixed NuGet extension api install events not raised for PackageReference projects</strong></p>

<p>The NuGet extension API has a PackageReferenceAdded event and a
PackageReferenceRemoved. These were being raised if a project had
a packages.config file but not if the project used PackageReferences.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.8]]></title>
    <link href="http://lastexitcode.com/blog/2019/03/02/NuGetSupportInVisualStudioMac7-8/"/>
    <updated>2019-03-02T12:40:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2019/03/02/NuGetSupportInVisualStudioMac7-8</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet package diagnostics displayed in Solution window</li>
<li> Support restoring multi-target framework projects</li>
<li> Display summary of NuGet restore errors in Package Console</li>
<li> Fixed wrong version of Microsoft.AspNetCore.App being restored</li>
<li> Fixed Paket restore not working with SDK style projects</li>
<li> Fixed NuGet restore ignoring build targets</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.8</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#whats-new-in-78">release notes</a>.</p>

<h2>NuGet package diagnostics displayed in Solution window</h2>

<p>NuGet package diagnostic warnings are now shown in the Solution window.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-8/NuGetPackageDiagnosticWarningInSolutionWindow.png" title="&lsquo;NuGet package diagnostic warnings in Solution Window&rsquo; &lsquo;NuGet package diagnostic warnings in Solution Window&rsquo;" ></p>

<p>The diagnostic warnings are shown underneath the NuGet package with
a warning icon. Hovering over the warning icon will show a tooltip.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-8/NuGetPackageDiagnosticWarningTooltip.png" title="&lsquo;NuGet package diagnostic warning tooltip in Solution Window&rsquo; &lsquo;NuGet package diagnostic warning tooltip in Solution Window&rsquo;" ></p>

<h2>Support restoring multi-target framework projects</h2>

<p>Projects that have multiple target frameworks now have all frameworks restored.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-8/MultiTargetProjectInSolutionWindow.png" title="&lsquo;Multi-target framework project restored in Solution window&rsquo; &lsquo;Multi-target framework project restored in Solution window&rsquo;" ></p>

<p>Previously only the first target framework would be restored.</p>

<p>Conditional PackageReferences defined in the project file are also now
respected when restoring the project. Previously the conditions on the
PackageReferences would be ignored.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-8/ConditionalPackageReferences.png" title="&lsquo;Conditional PackageReferences restored in Solution window&rsquo; &lsquo;Conditional PackageReferences restored in Solution window&rsquo;" ></p>

<p>Visual Studio for Mac now uses the GenerateRestoreGraphFile MSBuild target to determine
package dependencies. Previously this information was obtained from the project information
held in memory. This fixes several NuGet restore bugs in Visual Studio for Mac.</p>

<h2>Display summary of NuGet restore errors in Package Console</h2>

<p>Creating an xUnit .NET Core test project named &lsquo;xunit&rsquo; fails to
restore since there is a package reference cycle between the project
and the xunit NuGet package. Whilst this reference cycle is reported it is
hidden in the Package Console output and all you would see was a message
indicating that the restore had failed. Now the error information is
shown at the end of the
Package Console as a summary of the failures to make it easier to
see the problem.</p>

<p>Now for the xunit project you will see the following
at the end of the Package Console output:</p>

<pre><code>Cycle detected.
  xunit -&gt; xunit (&gt;= 2.3.1).
Restore failed.
</code></pre>

<h2>Bug Fixes</h2>

<p><strong>Fixed wrong version of Microsoft.AspNetCore.App being restored</strong></p>

<p>With an ASP.NET Core 2.1 project, that had included a PackageReference for
Microsoft.AspNetCore.App version 2.1.5, Visual Studio for Mac would incorrectly restore
Microsoft.AspNetCore.App version 2.1.1.</p>

<p>Using the GenerateRestoreGraphFile MSBuild target to determine package reference
information when restoring has fixed this problem.</p>

<p><strong>Fixed Paket restore not working with SDK style projects</strong></p>

<p>When Paket is used with an SDK style project it injects PackageReferences
via the PaketRestore target from the Paket.Restore.targets file. Visual Studio for
Mac was not using MSBuild to get the package reference information so
PackageReferences defined by Paket were not being restored or made available.</p>

<p><strong>Fixed NuGet restore ignoring build targets</strong></p>

<p>OrchardCore would fail to restore when opened in Visual Studio for Mac. OrchardCore
defines the PackageReference versions in a separate MSBuild .props file and has a custom
MSBuild target to define these versions. This custom MSBuild target is now supported
since Visual Studio for Mac uses the GenerateRestoreGraphFile MSBuild target to
determine package references when restoring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Task Runner Explorer in Visual Studio for Mac]]></title>
    <link href="http://lastexitcode.com/blog/2019/01/04/TaskRunnerExplorerInVisualStudioMac/"/>
    <updated>2019-01-04T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2019/01/04/TaskRunnerExplorerInVisualStudioMac</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/mrward/monodevelop-language-server-addin">Task Runner Explorer addin</a> provides a
Task Runner Explorer
window, similar to the one in Visual Studio on Windows, which can be used to run tasks with
Cake, Gulp, Grunt, NPM and TypeScript.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerWindowGruntNpmTasks.png" title="&lsquo;Task Runner Explorer window&rsquo; &lsquo;Task Runner Explorer Window&rsquo;" ></p>

<h2>Features</h2>

<ul>
<li>Task Runner Explorer Window

<ul>
<li>View tasks</li>
<li>Run tasks</li>
<li>View task output</li>
<li>Run and cancel long running tasks, such as tcs watch</li>
<li>Configure tasks to run when specific IDE events occur

<ul>
<li>Before Build</li>
<li>After Build</li>
<li>Clean</li>
<li>Project Opened</li>
<li>Solution Opened</li>
</ul>
</li>
</ul>
</li>
<li>Task Runners

<ul>
<li>Cake</li>
<li>Gulp</li>
<li>Grunt</li>
<li>NPM</li>
<li>TypeScript</li>
</ul>
</li>
</ul>


<h2>Supports</h2>

<ul>
<li>Visual Studio Mac 7.5 or later.</li>
</ul>


<h2>Task Runner Explorer</h2>

<p>To open the Task Runner Explorer window, from the View menu select Pads, then
select Task Runner Explorer.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/ViewTaskRunnerExplorerMenu.png" title="&lsquo;View Task Runner Explorer menu&rsquo; &lsquo;View Task Runner Explorer menu&rsquo;" ></p>

<p>The Task Runner Explorer will look for files supported by a task runner in the
solution directory and the project directory. It will also look at all files
that have been added to a project or that have been added to a solution folder.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerTypeScriptNpmTasks.png" title="&lsquo;Task Runner Explorer TypeScript and NPM tasks&rsquo; &lsquo;Task Runner Explorer TypeScript and NPM tasks&rsquo;" ></p>

<p>The top left of the Task Runner Explorer shows a list of projects
or the solution that have tasks available. This can be used to filter the tasks shown in the
Task Runner Explorer window.</p>

<p>Currently changes made to tasks will not be detected automatically. To refresh
the task information you can click the Refresh button
available at the top left of the Task Runner Explorer window.</p>

<h3>Running a Task</h3>

<p>To run a task you can double click it or right click and select Run.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerRunMenu.png" title="&lsquo;Task Runner Explorer Run menu&rsquo; &lsquo;Task Runner Explorer Run menu&rsquo;" ></p>

<p>Output from the task is shown on the right hand side of the Task Runner Explorer
window.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerNpmUpdateRunning.png" title="&lsquo;NPM update running&rsquo; &lsquo;NPM update running&rsquo;" ></p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/NpmUpdateRunCompleted.png" title="&lsquo;NPM update completed&rsquo; &lsquo;NPM update completed&rsquo;" ></p>

<p>A long running task, such as tcs watch, will run until the solution is closed,
or the Stop button, available on the right hand side
of the Task Runner Explorer window, is clicked.</p>

<h3>Binding Tasks to IDE Events</h3>

<p>Tasks can be configured to run when the following IDE events occur:</p>

<ul>
<li>After Build</li>
<li>Before Build</li>
<li>Clean</li>
<li>Project or Solution Opened</li>
</ul>


<p>If the task runner file is in a project directory then the build and clean
events are associated with the project. If the task runner file is in a solution directory
then the build events are associated with the solution.</p>

<p>To configure a task, right click it, select Bindings and then select the
event.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerBindingsMenu.png" title="&lsquo;Task Runner Explorer Bindings menu&rsquo; &lsquo;Task Runner Explorer Bindings menu&rsquo;" ></p>

<p>The binding will be displayed in the Bindings tab and will also be shown as
checked when the context menu for the task is opened.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerBeforeBuildBindingAdded.png" title="&lsquo;Task Runner Explorer Before Build binding added&rsquo; &lsquo;Task Runner Explorer Before Build binding added&rsquo;" ></p>

<p>To remove the binding you can right click the task, select Bindings and
select the event again to uncheck it. Alternatively you can right click
it in the Bindings tab and select Remove.</p>

<p>The order in which the tasks are run for a particular IDE event can be changed
by right clicking the binding in the Bindings tab and selecting Move Up or Move Down.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerBindingsMoveDownMenu.png" title="&lsquo;Task Runner Explorer binding Move Up and Down menus&rsquo; &lsquo;Task Runner Explorer binding Move Up and Down menus&rsquo;" ></p>

<p>The binding information is typically saved in a file in the same directory as the corresponding task
runner file, however this depends on how the task runner is implemented.</p>

<h3>Disabling Automatic Running of Tasks</h3>

<p>In preferences there is a Task Runner Explorer section which shows
a check box that can be used to enable or disable the automatic
running of tasks on opening a project or solution, and when building or cleaning.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerPreferences.png" title="&lsquo;Preferences &ndash; Automatically run tasks option&rsquo; &lsquo;Preferences &ndash; Automatically run tasks option&rsquo;" ></p>

<h2>Cake Task Runner</h2>

<p>The Cake task runner supports running tasks defined in a build.cake file.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/CakeTaskRunner.png" title="&lsquo;Cake Task Runner&rsquo; &lsquo;Cake Task Runner&rsquo;" ></p>

<p>This is based on the <a href="https://github.com/cake-build/cake-vs">Cake Task Runner for Visual Studio</a>.</p>

<h2>Gulp Task Runner</h2>

<p>The Gulp task runner supports running tasks defined in a gulpfile.js file.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/GulpTaskRunner.png" title="&lsquo;Gulp Task Runner&rsquo; &lsquo;Gulp Task Runner&rsquo;" ></p>

<p><a href="https://gulpjs.com">Gulp</a> needs to be installed separately.</p>

<h2>Grunt Task Runner</h2>

<p>The Grunt task runner supports running tasks defined in a Gruntfile.js file.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/GruntTaskRunner.png" title="&lsquo;Grunt Task Runner&rsquo; &lsquo;Grunt Task Runner&rsquo;" ></p>

<p><a href="https://gruntjs.com">Grunt</a> needs to be installed separately.</p>

<h2>NPM Task Runner</h2>

<p>The NPM task runner supports running tasks defined in a package.json file.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/NpmTaskRunner.png" title="&lsquo;NPM task runner&rsquo; &lsquo;NPM task runner&rsquo;" ></p>

<p>The NPM task runner is a port of <a href="https://madskristensen.net/">Mads Kristensen&rsquo;s</a>
<a href="https://github.com/madskristensen/NpmTaskRunner">NPM Task Runner</a>.</p>

<p>The NPM task runner supports running with the verbose NPM option defined. If a
task is selected then a button will be displayed on the left hand side of the
Task Runner Explorer window. If this is selected then npm will be passed the
<code>-d</code> argument when it is run.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/NpmTaskRunnerVerboseButton.png" title="&lsquo;NPM task runner Verbose button&rsquo; &lsquo;NPM task runner Verbose button&rsquo;" ></p>

<p>NPM needs to be installed separately.</p>

<h2>TypeScript Task Runner</h2>

<p>The TypeScript task runner supports running tcs build and tcs watch if a tsconfig.json file
is found.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TypeScriptTaskRunner.png" title="&lsquo;TypeScript task runner&rsquo; &lsquo;TypeScript task runner&rsquo;" ></p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TypeScriptWatchTaskOutput.png" title="&lsquo;TypeScript tcs watch output&rsquo; &lsquo;TypeScript tcs watch output&rsquo;" ></p>

<p>The TypeScript task runner will try to use tsc that is distributed with the Web Tools extension that
is included in Visual Studio for Mac. If the Web Tools extension is not installed then the task
runner will fall back to running tsc directly.</p>

<h2>Installation</h2>

<p>There are two addins to be installed:</p>

<ul>
<li><a href="https://github.com/mrward/monodevelop-task-runner-addin/releases/download/0.1/MonoDevelop.TaskRunner_0.1.mpack">Task Runner</a></li>
<li><a href="https://github.com/mrward/monodevelop-task-runner-addin/releases/download/0.1/MonoDevelop.TaskRunnersBundle_0.1.mpack">Task Runners Bundle</a></li>
</ul>


<p>The Task Runner is the main addin. This will be used by other task runner addins and provides the
main task runner API and services.</p>

<p>The Task Runners Bundle addin contains the Cake, Gulp, Grunt, NPM and TypeScript task runners. These
are currently included together as a single addin instead of being distributed separately.</p>

<p>Download both of the above .mpack files. Install the Task Runner addin first since the Task Runners Bundle
addin depends on it. To install an addin&rsquo;s .mpack file, open the Extensions Manager
by selecting Extensions&hellip; from the main menu. Click the Install from file button. Select the .mpack file
and then click the Open button. After installing both the addins restart Visual Studio for Mac.</p>

<p>These addins are not currently available from the main Visual Studio for Mac extensions server.</p>

<h2>Source Code</h2>

<ul>
<li><a href="https://github.com/mrward/monodevelop-language-server-addin">Task Runner Explorer for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/monodevelop-cake-task-runner">Cake Task Runner for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/monodevelop-grunt-task-runner">Grunt Task Runner for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/monodevelop-gulp-task-runner">Gulp Task Runner for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/NpmTaskRunner">NPM Task Runner for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/monodevelop-typescript-task-runner">TypeScript Task Runner for Visual Studio for Mac</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.7]]></title>
    <link href="http://lastexitcode.com/blog/2018/12/19/NuGetSupportInVisualStudioMac7-7/"/>
    <updated>2018-12-19T14:40:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2018/12/19/NuGetSupportInVisualStudioMac7-7</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 4.8 support</li>
<li> Support PackageReferences without a Version</li>
<li> Fixed NuGet sdk resolver not being found in Mono 5.16</li>
<li> Fixed null reference exception in package compatiblity check</li>
<li> Fixed Update menu enabled when project has no PackageReferences</li>
<li> Fixed updating a NuGet package changing a reference&rsquo;s ItemGroup</li>
<li> Fixed updating a NuGet package changing a fully qualified reference hint path to a relative path</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.7</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#whats-new-in-77">release notes</a>.</p>

<h2>NuGet 4.8 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.8-rtm">NuGet 4.8.0.5385</a> is now
included with Visual Studio for Mac 7.7.2.</p>

<h2>Support PackageReferences without a Version</h2>

<p>Visual Studio for Mac did not support projects that used PackageReferences without
specifying a version.</p>

<pre><code>&lt;ItemGroup&gt;
    &lt;PackageReference Include="Newtonsoft.Json" /&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>The version may be defined elsewhere in another MSBuild file, such as the Directory.props file,
or by the .NET Core SDK, as with the
Microsoft.AspNetCore.App PackageReference in ASP.NET Core projects. By default a
PackageReference without a version will restore the lowest available version for
the NuGet package.</p>

<p>However in Visual Studio for Mac there were several problems with PackageReferences that
did not specify a version.</p>

<p>Opening a project with a PackageReference without a Version
would result in an ArgumentNullException being logged and the
Add Packages dialog could not be opened.</p>

<p>If the PackageReference, in a non-SDK project, had no Version
then it was not displayed in the Packages folder and a null reference
exception was logged. The Solution window would try to find
the package to check if it was installed which is not possible
with a missing version and NuGet&rsquo;s VersionFolderPathResolver
would throw a null reference exception.</p>

<p>If a PackageReference had no Version then a null reference exception
was logged when checking for updates. A null version is now handled.</p>

<p>Right clicking the package in the Packages folder would log a
null reference exception if a non-SDK style project was used and it
had a PackageReference without a version. This is now handled and the
menu label will show &ldquo;Version None&rdquo;.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed NuGet sdk resolver not being found in Mono 5.16</strong></p>

<p>More recent versions of MSBuild, such as MSBuild 16.0.40 which is included
with Mono 5.16.0.173, allow the sdk resolver to use a manifest.xml file to
define the assembly where the resolver can be found:</p>

<pre><code>&lt;SdkResolver&gt;
  &lt;Path&gt;..\..\Microsoft.Build.NuGetSdkResolver.dll&lt;/Path&gt;
&lt;/SdkResolver&gt;
</code></pre>

<p>This manifest file not supported and resulted in the NuGet sdk resolver not
being loaded. Any projects that use an MSBuild sdk from a NuGet
package no longer worked and would result in an &lsquo;Invalid configuration
mapping&rsquo; error shown in the Solution window. The sdk resolution in
Visual Studio for Mac has now
been updated based on the latest MSBuild source code.</p>

<p><strong>Fixed null reference exception in compatiblity check</strong></p>

<p>Changing the target framework of a project that uses a packages.config
file will result in a package compatiblity check being run.
If the project had both a PackageReference and a packages.config file
the package compatiblity check would fail with a null
reference exception. Visual Studio for Mac was treating the project as
though it was using a packages.config file, when it should have been
treated as a PackageReference project. This resulted in a null
reference exception being thrown when checking for package compatiblity.</p>

<p><strong>Fixed Update menu enabled when project has no PackageReferences</strong></p>

<p>The Update menu was enabled if the project used PackageReferences but
had none in the project. Without any PackageReferences in the
project there is no packages to update. The check to determine if the Update
menu should be enabled has been changed to make sure the project has
PackageReferences in the project file, not just imported
PackageReferences. The Update
NuGet Packages menu, which is used to update packages for the solution,
has also been changed to have the same behaviour.</p>

<p><strong>Fixed updating a NuGet package changing a reference&rsquo;s ItemGroup</strong></p>

<p>On updating a NuGet package the Reference item will now be modified in
place in the project file.</p>

<p>On updating a NuGet package in a project that used a packages.config
the old NuGet package is uninstalled and the new one is installed.
This removes the old references and adds new references. If the
references are in an ItemGroup with a condition then the new
reference may be added into a different ItemGroup if there are other
ItemGroups with references. To prevent this from happening the
changes to made to references are cached and not applied to the
project until all the NuGet actions have all been run. This allows
a NuGet package update which would remove a reference and then
add a new reference to be
converted into an update of the original Reference in the project,
changing just its HintPath, so its
location in the project file is not changed.</p>

<p>This was fixed in Visual Studio for Mac 7.7.3.</p>

<p><strong>Fixed updating a NuGet package changing a fully qualified reference hint path to a relative path</strong></p>

<p>Updating a NuGet package, where the project, which uses a packages.config file,
had been modified so the
original reference had a fully qualified hint path, would result in
a relative path used for the hint path when the reference was updated.</p>

<p>Now if the original hint path was full path then if the hint
path for the reference is changed it is saved using a full
path. This is different behaviour to how Visual Studio on Windows works, which
will always add a relative hint path for the reference.</p>

<p>This was fixed in Visual Studio for Mac 7.7.3.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.6]]></title>
    <link href="http://lastexitcode.com/blog/2018/09/02/NetCoreSupportInVisualStudioMac7-6/"/>
    <updated>2018-09-02T11:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2018/09/02/NetCoreSupportInVisualStudioMac7-6</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li>NuGet SDK resolver now used to find NuGet SDK packages</li>
<li>Fixed Synchronous operation cancelled message on stopping debugging</li>
<li>Fixed debugger hanging when debugging unit tests</li>
<li>Fixed command line arguments not used with a new project</li>
<li>Fixed hang when discovering unit tests</li>
<li>Allow loading of SDK style projects without a main PropertyGroup</li>
<li>Fixed TargetFramework not being updated in project</li>
<li>Fixed .xaml.cs code completion in new Xamarin.Forms .NET Standard project</li>
<li>Fixed default build action for new HTML file</li>
<li>Fixed SDK version not being parsed from Sdk attribute</li>
<li>Fixed null reference on opening .NET Core project with sdk version</li>
<li>Fixed editor errors when .NET Standard assembly referenced in Xamarin.iOS project</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.6</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#whats-new-in-76">release notes</a>.</p>

<h2>NuGet SDK resolver now used to find NuGet SDK packages</h2>

<p>Visual Studio for Mac now has support for the
<a href="https://github.com/Microsoft/msbuild/issues/2803">NuGet SDK resolver</a>. The NuGet
SDK resolver will download and install SDKs for SDK style
projects if these SDKs are missing.</p>

<pre><code>&lt;Project Sdk="My.Custom.Sdk/2.3.4"&gt;
  ...
&lt;/Project&gt;
</code></pre>

<p>The SDK resolution is done in the background
when the project is opened and there is currently no visual indication that
this is happening.</p>

<p>The NuGet library assemblies are not available to the remote MSBuild host used by
Visual Studio for Mac so the NuGet SDK resolver was previously failing to load. The NuGet SDK
resolver supports a MSBUILD_NUGET_PATH environment variable which is now set by
Visual Studio for Mac to point to the directory containing the NuGet assemblies
that are included with the IDE.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed synchronous operation cancelled message on stopping debugging</strong></p>

<p>Stopping the .NET Core debugger would sometimes result in
a dialog being displayed indicating that the debugger operation failed.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-6/DebuggerOperationFailedMessage.png" title="&lsquo;Debugger operation failed &ndash; Synchronous operation cancelled &ndash; dialog&rsquo; &lsquo;Debugger operation failed &ndash; Synchronous operation cancelled &ndash; dialog&rsquo;" ></p>

<p><strong>Fixed debugger hanging when debugging unit tests</strong></p>

<p>The .NET Core debugger would sometimes hang Visual Studio for Mac when debugging unit tests.
The problem was that if the breakpoint was placed on an invalid line then the .NET Core debugger
would send back the adjusted breakpoint location. Visual Studio for Mac would then send back
an incorrect breakpoint line back to the .NET Core debugger, which again resulted in the debugger
sending back a corrected line. This would repeat resulting in the IDE and debugger
getting stuck in a loop.</p>

<p><strong>Fixed command line arguments not used with a new project</strong></p>

<p>Creating a new .NET Core console project, editing the project run
configuration to use extra command line arguments, or to not use the
external console, then building and running the project would result
in the project run configuration not being used. No extra
arguments would be passed to the console project, and the external
console would still be used. This could be fixed by closing and
re-opening the solution.</p>

<p>The problem was that when the project is re-evaluated, after it is
created, its run configurations are cleared. The solution&rsquo;s
startup run configuration would still be using
the original project run configuration that was no longer used.
Changes made to the project run configuration then had no affect. Closing and
re-opening the solution fixed this since
the run configuration defined in the .csproj.user file is re-used when the
project is re-evaluated on reloading so both the solution run configuration and
the project run configuration refer to the same configuration. To fix this,
on re-evaluating the project, if the solution&rsquo;s run configuration
refers to a project run configuration that has been removed then
the solution&rsquo;s startup configuration is refreshed.</p>

<p>Note that there is a similar problem with multiple solution run
configurations that can occur which is not addressed by this fix.</p>

<p><strong>Fixed hang when discovering unit tests</strong></p>

<p>Opening a solution containing a .NET Core test project would sometimes
result in the IDE hanging when discovering tests. On running <code>kill -QUIT pid</code>
the IDE log would show a background thread and the UI thread both
awaiting test discovery to complete:</p>

<pre><code>var discoveredTests = await VsTestDiscoveryAdapter.Instance.DiscoverTestsAsync (Project);

VsTestProjectTestSuite/&lt;OnCreateTests&gt;d__12.MoveNext
in MonoDevelop.UnitTesting.VsTest/VsTestProjectTestSuite.cs:95
</code></pre>

<p><strong>Allow loading of SDK style projects without a main PropertyGroup</strong></p>

<p>On loading an SDK style project that did not have a main PropertyGroup
Visual Studio for Mac would show the error message
&ldquo;Error while trying to load project:
Object reference not set to an instance of an object&rdquo;.</p>

<p>A project may define MSBuild properties in a Directory.Build.props file
instead of having this in the main project file. It is then
possible for the main project file to have no main property group.</p>

<p>Directory.Build.props:</p>

<pre><code>&lt;Project&gt;
  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp2.1&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
</code></pre>

<p>MainProject.csproj:</p>

<pre><code>&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
&lt;/Project&gt;
</code></pre>

<p>Visual Studio for Mac now handles the missing main PropertyGroup.</p>

<p><strong>Fixed TargetFramework not being updated in project</strong></p>

<p>Changing a .NET Core project&rsquo;s target framework to a different version in
Project Options, then re-opening Project Options and changing the
target framework version back again, would result in the target framework
not being updated in the project. The problem was the original target framework the
project had on opening was cached and the changing back to the same
target framework version was being ignored resulting in the project file not
being updated.</p>

<p><strong>Fixed .xaml.cs code completion in new Xamarin.Forms .NET Standard project</strong></p>

<p>Creating a new Xamarin.Forms .NET Standard project, then
modifing the .xaml to add new named UI items, would result in no
code completion in the .xaml.cs file for these new items
until the solution was closed and re-opened. The problem was that the
.xaml and .xaml.cs files
were being removed from the file information held in memory
when the project was re-evaluated. On re-evaluation, after
the NuGet restore is first run for the project, the old MSBuild items for the
.xaml and .xaml.cs file have the wrong metadata, so they need
to be removed, whilst new MSBuild items with the updated metadata
need to be added. The removal was done after adding the updated files
and, since they had the same filename, the new updated files were being
removed. The removal is now done before adding the updated files to
avoid the files being removed incorrectly.</p>

<p><strong>Fixed default build action for new HTML file</strong></p>

<p>Adding a new .html file to the wwwroot folder of an ASP.NET Core
project would add the file as a None item instead of a Content
item. This would result in the .html file not being used when
publishing the project. When &lsquo;dotnet publish&rsquo; was used the
publish directory would not contain the .html file.</p>

<p>ASP.NET Core projects have different build actions for files based on where they
are added. A .html file in the root directory would be a None item by default,
whilst a .html file in the wwwroot directory would be a Content item
by default. To fix this the default build action for a file is
determined by the file wildcard information available from the .NET
Core SDK.</p>

<p><strong>Fixed SDK version not being parsed from Sdk attribute</strong></p>

<p>The Sdk attribute would have its forward slash / replaced with a
backslash \ which meant Visual Studio for Mac was creating an
SdkReference with the wrong name, for example:</p>

<pre><code>Microsoft.NET.Sdk.Razor\2.1.0-preview2-final
</code></pre>

<p>Instead of having Microsoft.NET.Sdk.Razor as the name with the
version being separate.</p>

<p><strong>Fixed null reference on opening .NET Core project with SDK version</strong></p>

<p>Opening a SDK style project that used a Sdk attribute with a version
would show an error message &ldquo;Error while trying to load project:
Object reference not set to an instance of an object&rdquo;. The problem
was that an SdkResolver can return null from its Resolve method.
These null results were added to a list and then an attempt was made
to log the result warnings on a null result.</p>

<pre><code>&lt;Project Sdk="Microsoft.NET.Sdk.Razor/2.1.0-preview2-final"&gt;
</code></pre>

<p><strong>Fixed editor errors when .NET Standard assembly referenced in Xamarin.iOS project</strong></p>

<p>When a Xamarin.iOS project used an assembly that was compiled
for .NET Standard, such as the assembly in the
System.Collections.Immutable NuGet package, the netstandard assembly
was not made available for code completion. This then resulted in the text editor
showing errors even though the project could be compiled succesfully.
The errors displayed were similar to:</p>

<pre><code>  The type 'ValueType' is defined in an assembly that is not
  referenced. You must add a reference to assembly 'netstandard,
  Version=2.0.0.0, Culture=neutral, PublicKeytoken=cc7b1dffcd2ddd51'.
</code></pre>

<p>Now a check is made to determine
if an assembly is referencing netstandard and if so the facade assemblies,
which for Xamarin.iOS will include the netstandard.dll, are made available
for code completion. Previously only a check was made for the project having
an assembly referencing System.Runtime before including the facade assemblies.</p>
]]></content>
  </entry>
  
</feed>
