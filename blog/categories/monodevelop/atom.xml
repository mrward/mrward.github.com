<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: monodevelop | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/monodevelop/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2015-04-01T21:58:14+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TypeScript Support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2015/04/01/TypeScriptSupportInXamarinStudio/"/>
    <updated>2015-04-01T21:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/04/01/TypeScriptSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio and MonoDevelop now have support for <a href="http://www.typescriptlang.org/">TypeScript</a> on Linux, Mac and Windows with an alpha release of the <a href="https://github.com/mrward/typescript-addin">TypeScript Addin</a>.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/EditingTypeScriptInTextEditor.png" title="&lsquo;Editing TypeScript in Xamarin Studio on the Mac&rsquo; &lsquo;Editing TypeScript in Xamarin Studio on the Mac&rsquo;" ></p>

<p>The TypeScript addin uses <a href="http://v8dotnet.codeplex.com">V8.NET</a> which is a library that allows a .NET application to host <a href="https://code.google.com/p/v8/">Google&rsquo;s V8 JavaScript engine</a> and have JavaScript interact with .NET objects in the host application.</p>

<p>The ability to support Windows, Mac and Linux would not have been possible without the work done by <a href="http://jameswilkins.net">James Wilkins</a> and <a href="https://github.com/chrisber">Christian Bernasko</a>. <a href="http://jameswilkins.net">James Wilkins</a> created the <a href="http://v8dotnet.codeplex.com">V8.NET</a> library and when it was first released it supported only Windows. <a href="https://github.com/chrisber">Christian Bernasko</a> then took V8.NET and modified it to make it work with Mono on Linux and the Mac. The TypeScript addin is using V8.NET binaries built by Christian from his port of <a href="https://github.com/chrisber/v8dotnet/tree/development-mono">V8.NET</a>.</p>

<p>Please note that this is an alpha release and because V8.NET uses a native library it can cause Xamarin Studio or MonoDevelop to terminate if a bug is encountered.</p>

<h2>Features</h2>

<ul>
<li>TypeScript compilation on save or build.</li>
<li>Code completion.</li>
<li>Find references.</li>
<li>Rename refactoring.</li>
<li>Go to declaration.</li>
<li>Errors highlighted as you type.</li>
<li>Code folding.</li>
</ul>


<p>The addin supports:</p>

<ul>
<li>Xamarin Studio MonoDevelop 5 and above.</li>
<li>TypeScript 1.4</li>
<li>Linux, Mac and Windows.</li>
</ul>


<h2>Installing the addin</h2>

<p>The addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> in the alpha channel. By default the alpha repository is not enabled so you will have to enable it before you can find and install the addin.</p>

<p>In Xamarin Studio open the Add-in Manager and select the Gallery tab. Click the repository drop down and if <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> is not displayed then click <strong>Manage Repositories&hellip;</strong>. In the window that opens tick the check box next to <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> and then click the Close button.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/AddingAlphaChannelAddins.png" title="&lsquo;Enabling alpha channel addins&rsquo; &lsquo;Enabling alpha channel addins&rsquo;" ></p>

<p>Back in the Add-in Manager dialog click the Refresh button to update the list of addins. Use the search text box in the top right hand corner of the dialog to search for the addin by typing in <strong>TypeScript</strong>.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/AddinManagerTypeScriptAddin.png" title="&lsquo;TypeScript addin selected in Addin Manager dialog&rsquo; &lsquo;TypeScript addin selected in Addin Manager dialog&rsquo;" ></p>

<p>Select the TypeScript addin and then click the <strong>Install&hellip;</strong> button.</p>

<p>Note that if you are using Linux 32 bit then you should install the <strong>TypeScript Linux 32 bit</strong> addin. The other <strong>TypeScript</strong> addin listed supports Linux 64 bit. Hopefully in the future it will be possible to support both Linux 32 bit and 64 bit using the same addin.</p>

<h2>Getting Started</h2>

<p>Now that the TypeScript addin is installed let us create a TypeScript file.</p>

<p>To add a TypeScript file open the New File dialog, select the <strong>Web</strong> category and select <strong>Empty TypeScript</strong> file.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/NewFileDialogNewTypeScriptFile.png" title="&lsquo;New File Dialog &ndash; New TypeScript File&rsquo; &lsquo;New File Dialog &ndash; New TypeScript File&rsquo;" ></p>

<p>Give the file a name and click the New button.</p>

<p>Note that currently the TypeScript file needs to be included in a project. Standalone TypeScript project files are not supported. TypeScript files can be added to any .NET project.</p>

<h2>Code Completion</h2>

<p>When editing the TypeScript code you will have code completion when you press the dot character.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptCodeCompletion.png" title="&lsquo;TypeScript dot code completion&rsquo; &lsquo;TypeScript dot code completion&rsquo;" ></p>

<p>Code completion also works when you type the opening bracket of a function.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptMethodCompletion.png" title="&lsquo;TypeScript method completion&rsquo; &lsquo;TypeScript method completion&rsquo;" ></p>

<h2>Go to Declaration</h2>

<p>The text editor&rsquo;s right click menu has three TypeScript menus: Go to Declaration, Find References and Rename.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptTextEditorContextMenu.png" title="&lsquo;Text editor context menu with TypeScript menu options&rsquo; &lsquo;Text editor context menu with TypeScript menu options&rsquo;" ></p>

<p>The Go To Declaration menu option will open the corresponding definition in the text editor.</p>

<h2>Find References</h2>

<p>Find References will show the references in the Search Results window.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptReferencesInSearchResults.png" title="&lsquo;TypeScript references shown in Search Results window&rsquo; &lsquo;TypeScript references shown in Search Results window&rsquo;" ></p>

<h2>Rename</h2>

<p>Selecting the Rename menu option in the text editor will open the Rename dialog where you can type in a new name and click OK to have it updated.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptRenameDialog.png" title="&lsquo;TypeScript rename dialog&rsquo; &lsquo;TypeScript rename dialog&rsquo;" ></p>

<p>Note that currently on Linux the Rename dialog will only be displayed if the keyboard shortcut F2 is used. Selecting the context menu will not show the Rename dialog on Linux but will work on Windows and on the Mac.</p>

<h2>Error Highlighting</h2>

<p>Errors in your TypeScript code will be highlighted as you are typing in the text editor.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptErrorsHighlightedInTextEditor.png" title="&lsquo;TypeScript errors highlighted in text editor&rsquo; &lsquo;TypeScript errors highlighted in text editor&rsquo;" ></p>

<h2>Code Folding</h2>

<p>Code folding is supported for TypeScript classes, modules and interfaces.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptCodeFolding.png" title="&lsquo;TypeScript code folding&rsquo; &lsquo;TypeScript code folding&rsquo;" ></p>

<p>Code folding by default is disabled. To enable code folding open the Preferences dialog and in the Text Editor section select the General category, then tick the <strong>Enable code folding</strong> check box.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/PreferencesEnableCodeFolding.png" title="&lsquo;Preferences &ndash; Enabling code folding&rsquo; &lsquo;Preferences &ndash; Enabling code folding&rsquo;" ></p>

<h2>Compiling to JavaScript</h2>

<p>By default the TypeScript files will be compiled to JavaScript when the project is compiled.</p>

<p>There are more compiler options available in the project options in the Build &ndash; TypeScript category.</p>

<p><img src="/images/blog/TypeScriptSupportInXamarinStudio/TypeScriptCompilerOptions.png" title="&lsquo;TypeScript compiler options for the project&rsquo; &lsquo;TypeScript compiler options for the project&rsquo;" ></p>

<p>On this page you can change when the compiler is run and what options are passed to the compiler when generating JavaScript code.</p>

<p>If an <strong>Output file</strong> is specified then all the TypeScript files will be compiled into a single JavaScript file. If an <strong>Output directory</strong> is specified then the JavaScript files will be generated in that directory instead of next to the TypeScript files.</p>

<p>That is the end of our quick look at TypeScript support in Xamarin Studio and MonoDevelop.</p>

<h2>Source Code</h2>

<p>The source code for the addin and for the V8.NET engine that works on Mono are available on GitHub.</p>

<ul>
<li><p><a href="ttps://github.com/mrward/typescript-addin/tree/monodevelop-v8-dotnet">TypeScript addin source code</a>.</p></li>
<li><p><a href="https://github.com/chrisber/v8dotnet/tree/development-mono">V8.NET source code</a>.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.8]]></title>
    <link href="http://lastexitcode.com/blog/2015/03/21/NuGetSupportInXamarinStudio5-8/"/>
    <updated>2015-03-21T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2015/03/21/NuGetSupportInXamarinStudio5-8</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 5.8 <a href="http://blog.xamarin.com/xamarin-releases-watch-kit-support-like-clockwork/">added support for Apple&rsquo;s Watch Kit</a> and it also includes some NuGet bug fixes.</p>

<h2>Bug Fixes</h2>

<ul>
<li> Allow ASP.NET project templates to work offline.</li>
<li> Build error after updating Xamarin.Forms in a project created by Visual Studio</li>
<li> Custom MSBuild task not updated after updating Xamarin.Forms</li>
<li> Update information in the Solution window incorrect after updating packages</li>
<li> Check for package updates continues after closing a solution</li>
<li> Check for package updates prevents packages from being removed</li>
<li> Incorrect error message displayed when checking for package updates</li>
<li> Exception when checking for package updates after changing target framework of a project</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.8 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.8/xamarin.studio_5.8/">release notes</a>.</p>

<p><strong>Allow ASP.NET project templates to work offline</strong></p>

<p>Previously it was not possible to create an ASP.NET project without an internet connection even if all the NuGet packages were available in the local machine&rsquo;s NuGet packages cache.</p>

<p>Now the local machine&rsquo;s NuGet cache is used as the primary source of packages for project templates so it is possible to create an ASP.NET project without an internet connection if the NuGet packages are already in this cache.</p>

<p>This problem did not affect project templates, such as Xamarin.Forms, which include the NuGet packages with their project templates.</p>

<p><strong>Build error after updating Xamarin.Forms in a project created by Visual Studio</strong></p>

<p>When a NuGet package that uses custom MSBuild targets file, such as Xamarin.Forms, is added to a project by Visual Studio the project file has an extra Target added, as shown below.</p>

<pre><code>&lt;Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild"&gt;
  &lt;PropertyGroup&gt;
    &lt;ErrorText&gt;This project references NuGet package(s) that are missing on this computer.
Enable NuGet Package Restore to download them.  For more information, see
http://go.microsoft.com/fwlink/?LinkID=322105. The missing file is {0}.&lt;/ErrorText&gt;
  &lt;/PropertyGroup&gt;
  &lt;Error Condition="!Exists('packages\Xamarin.Forms.1.2.1.6229\build\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\Xamarin.Forms.targets')" Text="$([System.String]::Format('$(ErrorText)', 'packages\Xamarin.Forms.1.2.1.6229\build\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\Xamarin.Forms.targets'))" /&gt;
&lt;/Target&gt;
</code></pre>

<p>When the project was opened in a previous version of Xamarin Studio, and the NuGet package is updated or removed, the Error task was not updated. The project would then fail to compile with an error being reported that the old .targets file could not be found.</p>

<p>Now when updating or removing a NuGet package the EnsureNuGetPackageBuildImports target is
checked and the matching Error task will be removed. If there are no remaining Error tasks then the EnsureNuGetPackageBuildImports target is also removed. This prevents build errors after updating or uninstalling the old
NuGet package from the project.</p>

<p>Note that Xamarin Studio will not add an EnsureNuGetPackageBuildImports target and will not add Error tasks to a project when a NuGet package is added or updated.</p>

<p><strong>Custom MSBuild task not updated after updating Xamarin.Forms</strong></p>

<p>If a project that had a reference to Xamarin.Forms was compiled once, then the NuGet package was updated, the old MSBuild task was still being used when compiling.</p>

<p>For Xamarin.Forms this could cause a &ldquo;XamlG Task failed unexpectedly&rdquo; build error to be reported. Also the Package Console would report not being able to access the Xamarin.Forms.Build.Tasks.dll when updating or removing the NuGet package.</p>

<p>The problem was that MonoDevelop.Projects.Formats.MSBuild.exe that compiles the project would lock the MSBuild task assembly.</p>

<p>Now when an MSBuild import is removed on updating a NuGet package Xamarin Studio will dispose the current project builder which will shutdown the MonoDevelop.Projects.Formats.MSBuild.exe process. This unlocks any custom MSBuild task assemblies loaded by this process,
allowing the old NuGet package to be removed without any access denied errors, and when the project is recompiled again it will use the correct MSBuild task assembly.</p>

<p><strong>Update information in the Solution window incorrect after updating packages</strong></p>

<p>With check for updates enabled in Preferences, when an ASP.NET project is created, updates are shown as available for several packages. When
the packages are updated the Solution window would still show updates as being available even though the packages had been updated.</p>

<p>The problem was that a change was made in Xamarin Studio 5.7 to update package dependencies at the same time as the package was updated. This meant that an update event was not fired for each
package being updated which would result in some package updates being shown as available in the Solution window even when they had been updated.</p>

<p>Now Xamarin Studio will check all package references when a package is updated so if any package dependencies are updated the Solution
window will show the correct status of the packages.</p>

<p><strong>Check for package updates continues after closing a solution</strong></p>

<p>Xamarin Studio will now stop checking for package updates when the current solution is closed. Previously this would continue until the check was completed.</p>

<p><strong>Check for updates prevents packages from being removed</strong></p>

<p>Previously when Xamarin Studio was checking for package updates all other NuGet actions, such as updating, adding or removing packages, would not be run until the check for updates had completed.
Now the check for NuGet package updates is done on a separate thread so other NuGet actions can be run at the same time.</p>

<p><strong>Incorrect error message displayed when checking for package updates</strong></p>

<p>The Package Console would sometimes show the error message &ldquo;An exception was thrown while dispatching a method call in the UI thread.&rdquo; instead of the underlying error making it difficult to determine the cause of the problem.
For example if there was a zero byte sized .nupkg file in the solution&rsquo;s package directory, and check for updates is enabled, then
the wrong error was displayed in the Package Console.</p>

<p><strong>Exception when checking for package updates after changing target framework of a project</strong></p>

<p>Previously a null reference exception would be reported in the Package console window when doing the following:</p>

<ol>
<li> Create a project with one NuGet package added.</li>
<li> Create two NuGet package sources in Preferences. Disable all other package sources.</li>
<li> Open the Add Packages dialog and select All Sources.</li>
<li> Go back to Preferences and uncheck both of the package sources.</li>
<li> Change the target framework of the project in the project options.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.7]]></title>
    <link href="http://lastexitcode.com/blog/2015/01/18/NuGetSupportInXamarinStudio5-7/"/>
    <updated>2015-01-18T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2015/01/18/NuGetSupportInXamarinStudio5-7</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet menus renamed to make them easier to discover</li>
<li> Solution window icons made consistent</li>
<li> Fix build errors after MSBuild target restored for package</li>
<li> Fix types imported by MSBuild target not recognised after NuGet package installed</li>
<li> Fix Solution window cannot be opened when access to NuGet.Config is denied</li>
<li> Fix updating all packages not updating dependencies</li>
<li> Fix pre-release NuGet package being downgraded on update</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.7 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.7/xamarin.studio_5.7/">release notes</a>.</p>

<h2>NuGet menus renamed</h2>

<p>The menus have been changed so they now include the word NuGet to make them easier to discover.</p>

<h3>Project menu</h3>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/ProjectMenuNuGetMenuItems.png" title="&lsquo;NuGet menu items in the main Project menu&rsquo; &lsquo;NuGet menu items in the main Project menu&rsquo; &lsquo;&rsquo;" ></p>

<h3>Solution context menu</h3>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/SolutionContextMenuNuGetMenuItems.png" title="&lsquo;NuGet menu items in the Solution context menu&rsquo; &lsquo;NuGet menu items in the Solution context menu&rsquo; &lsquo;&rsquo;" ></p>

<h3>Project context menu</h3>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/ProjectContextMenuNuGetMenuItems.png" title="&lsquo;NuGet menu items in the Project context menu&rsquo; &lsquo;NuGet menu items in the Project context menu&rsquo; &lsquo;&rsquo;" ></p>

<h2>Solution Window</h2>

<p>The warning icon used in the Solution window has been changed so it is consistent with other Solution window items.</p>

<h3>Package not restored</h3>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/SolutionWindowNuGetPackageMissing.png" title="&lsquo;Solution Window &ndash; NuGet package not restored&rsquo; &lsquo;Solution Window &ndash; NuGet package not restored&rsquo;" ></p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/SolutionWindowNuGetPackageMissingWithTooltip.png" title="&lsquo;Solution Window &ndash; NuGet package not restored with tooltip&rsquo; &lsquo;Solution Window &ndash; NuGet package not restored with tooltip&rsquo;" ></p>

<p>A new warning icon is used for packages that are not restored, the text is greyed out and hovering over the warning icon shows information about the warning.</p>

<h3>Package installing</h3>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/SolutionWindowNuGetPackageInstalling.png" title="&lsquo;Solution Window &ndash; NuGet package installing&rsquo; &lsquo;Solution Window &ndash; NuGet package installing&rsquo;" ></p>

<p>When a package is being installed the text is greyed out to indicate that the package is not currently available in the project and the text shows (installing) to distinguish between a package being installed and a package that is not restored.</p>

<h3>Package needs retargeting</h3>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/SolutionWindowNuGetPackageNeedsRetargetingWithTooltip.png" title="&lsquo;Solution Window &ndash; NuGet package needs retargeting&rsquo; &lsquo;Solution Window &ndash; NuGet package needs retargeting&rsquo;" ></p>

<p>A new warning icon is used for packages that need retargeting. The package id text has changed to black text instead of orange. Hovering over warning icon shows a message that the package needs retargeting.</p>

<h2>Bug Fixes</h2>

<p><strong>Build errors after MSBuild target restored for package</strong></p>

<p>If a NuGet package had an MSBuild target that added extra references to the project then on restoring the
NuGet package those references were still unavailable and the build would still fail.</p>

<p>This problem occurs with the MonoGame.Binaries NuGet package. The MonoGame.Binaries NuGet package has a custom MSBuild .targets file that adds extra references:</p>

<pre><code>&lt;Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
  &lt;ItemGroup&gt;
    &lt;Reference Include="MonoGame.Framework"&gt;
      &lt;HintPath&gt;$(MSBuildThisFileDirectory)\MonoGame.Framework.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Tao.Sdl"&gt;
      &lt;HintPath&gt;$(MSBuildThisFileDirectory)\Tao.Sdl.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="OpenTK"&gt;
      &lt;HintPath&gt;$(MSBuildThisFileDirectory)\OpenTK.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre>

<p>If the MonoGame.Binaries NuGet package is not available on opening the
project in Xamarin Studio the project will fail to build after
restoring the NuGet package since the references in the MSBuild targets file were not being refreshed.</p>

<p>Now after a NuGet package restore the MSBuild host used by Xamarin Studio is
refreshed which allows the references in the MSBuild targets file to be found and the project to compile without any build errors.</p>

<p><strong>Types imported by MSBuild target not recognised after NuGet package installed</strong></p>

<p>If a NuGet package had an MSBuild target that added extra references to the project then on installing the
NuGet package the types from those references were still unavailable to Xamarin Studio and would be highlighted in red
in the text editor. To fix this the solution had to be closed and re-opened. This problem occurs with the MonoGame.Binaries NuGet package.</p>

<p>Now after a NuGet package is installed and it contains a MSBuild targets
file then Xamarin Studio&rsquo;s type system will be refreshed for that project. The
types will then be known by Xamarin Studio and no longer be highlighted in red in the text editor.</p>

<p><strong>Solution window cannot be opened when access to NuGet.Config is denied</strong></p>

<p>If the NuGet directory containing the NuGet.Config file cannot be created or read by NuGet then an exception is thrown. This exception was not being handled by Xamarin Studio and would prevent the
solution window from opening.</p>

<p>Now if there is any error creating this
directory, or trying to load the NuGet.Config file, then the exception is caught which allows the Solution window to open. If the NuGet directory containing the NuGet.Config file cannot be created then it will not be possible to use NuGet in Xamarin Studio but it will not prevent the solution pad from being used.</p>

<p><strong>Updating all packages not updating dependencies</strong></p>

<p>Updating NuGet packages for the entire solution would not install the Xamarin.Android.Support.v13 NuGet package which was added as a new dependency to the Xamarin.Android.Support.v4 NuGet package.</p>

<p>The problem was that the NuGet package update was not configured to update any
NuGet package dependencies when updating all packages in the solution.
Updating all packages in the project or the NuGet package individually
would update package dependencies correctly.</p>

<p>Note that this fix has introduced a bug where Xamarin Studio will show updates as available even though the updates have just been installed for the solution. This new bug should be fixed in Xamarin Studio 5.8.</p>

<p><strong>Pre-release NuGet package being downgraded on update</strong></p>

<p>When a pre-release NuGet package was installed that was newer than the latest stable NuGet package available then updating the package would install the stable version even though it was a lower version. Now an explicit check is made to ensure that an older NuGet package is not being installed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.5]]></title>
    <link href="http://lastexitcode.com/blog/2014/10/19/NuGetSupportInXamarinStudio5-5/"/>
    <updated>2014-10-19T14:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/10/19/NuGetSupportInXamarinStudio5-5</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> Package version constraints in packages.config files are now supported</li>
<li> <a href="https://components.xamarin.com/">Xamarin Components</a> can now have NuGet package dependencies</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.5 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.5/xamarin.studio_5.5/">release notes</a>.</p>

<h2>NuGet Package Version Constraints</h2>

<p>NuGet allows you to <a href="http://docs.nuget.org/docs/reference/versioning">define a range of package versions that are allowed in your project</a> using the <strong>allowedVersions</strong> attribute in the packages.config file.</p>

<pre><code>&lt;packages&gt;
  &lt;package id="Newtonsoft.Json" version="5.0.1" allowedVersions="[5.0,6.0)" targetFramework="MonoAndroid44" /&gt;
&lt;/packages&gt;
</code></pre>

<p>In the above packages.config file the project has Json.NET 5.0.1 installed and will only allow updates to versions of Json.NET that are below 6.0.</p>

<p>When you open the solution in Xamarin Studio, and check for updates is enabled in preferences, you will see updates in the Solution window that are valid given the constraint defined in the packages.config file. In the screenshot below an update is shown for Json.NET 5.0.8 in the Solution window even though Json.NET currently has version 6.0.5 available.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/JsonNet508PackageUpdateAvailableInSolutionWindow.png" title="&lsquo;Json.NET 5.0.8 package update available shown in Solution window&rsquo; &lsquo;Json.NET 5.0.8 package update available shown in Solution window&rsquo;" ></p>

<p>When you update the NuGet packages from the Solution window Xamarin Studio will now update to a NuGet package that meets the version constraints defined in the packages.config. In the Package Console screenshot below the Json.NET package was updated, with the constraint in place, and Json.NET 5.0.8 was installed.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/JsonNet508PackageInstalledInPackageConsole.png" title="&lsquo;Json.NET package updated to 5.0.8 &ndash; Package Console output&rsquo; &lsquo;Json.NET package updated to 5.0.8 &ndash; Package Console output&rsquo;" ></p>

<p>Note that if you install a NuGet package from the Add Packages dialog you can override the constraint and install a NuGet package with a version outside of the range of the constraint.</p>

<h2>Components with NuGet Packages</h2>

<p>A Component from <a href="https://components.xamarin.com/">Xamarin&rsquo;s Component Store</a> can now declare a dependency on one or more NuGet packages which will be installed into the project when the Component is installed. The <a href="https://components.xamarin.com/view/xamandroidsupportv13-18">Android Support Library v13 Component</a> is one example that has a NuGet package dependency.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentInStore.png" title="&lsquo;Android Support Library v13 Component in Component Store&rsquo; &lsquo;Android Support Library v13 Component in Component Store&rsquo;" ></p>

<p>When you install this Component you will see that it installs the <a href="https://www.nuget.org/packages/Xamarin.Android.Support.v13/">Xamarin.Android.Support.v13 NuGet package</a>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentInstalledInSolutionWindow.png" title="&lsquo;Android Support Library v13 Component in Solution window&rsquo; &lsquo;Android Support Library v13 Component in Solution window&rsquo;" ></p>

<p>In older versions of Xamarin Studio the NuGet package will not be installed and instead the project will reference the Xamarin.Android.Support.v13.dll which is included with the Component.</p>

<p>The NuGet packages a Component depends on are displayed in the <strong>Packages</strong> tab on the Component Details page, which you can open by double clicking the Component in the Solution window, or by right clicking the Component and selecting <strong>Details</strong>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentDetailsWithPackagesTab.png" title="&lsquo;Android Support Library v13 Packages in Component Details page&rsquo; &lsquo;Android Support Library v13 Packages in Component Details page&rsquo;" ></p>

<p>From the <strong>Packages</strong> tab you can also install a NuGet package that a Component depends on if it was removed from the project. So if the Xamarin.Android.Support.v13 NuGet package is removed from the project the Component will be highlighted in red to indicate that there is a problem.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentErrorInSolutionWindow.png" title="&lsquo;Android Support Library v13 Component error in Solution window&rsquo; &lsquo;Android Support Library v13 Component error in Solution window&rsquo;" ></p>

<p>If you then open the Component Details page you will see in the <strong>Packages</strong> tab that the NuGet package is missing.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentDetailsWithMissingNuGetPackage.png" title="&lsquo;Android Support Library v13 Component Details page with missing NuGet Package&rsquo; &lsquo;Android Support Library v13 CComponent Details page with missing NuGet Package&rsquo;" ></p>

<p>To add the NuGet package back to the project you can hover the mouse over the warning icon and click the Add Package button that appears in the pop-up window.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentDetailsWithAddPackagePopUpWindow.png" title="&lsquo;Android Support Library v13 Component Details page with Add Package pop-up window&rsquo; &lsquo;Android Support Library v13 CComponent Details page with Add Package pop-up window&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.4]]></title>
    <link href="http://lastexitcode.com/blog/2014/09/29/NuGetSupportInXamarinStudio5-4/"/>
    <updated>2014-09-29T19:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/09/29/NuGetSupportInXamarinStudio5-4</id>
    <content type="html"><![CDATA[<h2>New Feature</h2>

<ul>
<li> Added support for the new Unified target frameworks for iOS and Mac

<ul>
<li>Xamarin.iOS</li>
<li>Xamarin.Mac</li>
</ul>
</li>
</ul>


<p>More details on all the new features and changes in Xamarin Studio 5.4 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.4/xamarin.studio_5.4/">release notes</a>.</p>

<h2>New Unified iOS and Mac Target Frameworks</h2>

<p>Xamarin recently announced <a href="http://blog.xamarin.com/unified-api-with-64-bit-support-for-ios-and-mac/">a new Unified API for its iOS and Mac products</a>. This new Unified API makes it easier to share code between Mac and iOS as well as allowing you to support 32 and 64 bit applications with the same binary.</p>

<p>To use this new Unified API you can create a new Unified project for iOS, or for Mac, using one of the project templates available from Xamarin Studio&rsquo;s New Project Dialog.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-4/UnifiedMacAndIOSProjectsInNewProjectDialog.png" title="&lsquo;Unified iOS and Mac Projects in New Project Dialog&rsquo; &lsquo;Unified iOS and Mac Projects in New Project Dialog&rsquo;" ></p>

<p>These Unified projects now support MSBuild and use the following target frameworks:</p>

<ul>
<li>Xamarin.iOS</li>
<li>Xamarin.Mac</li>
</ul>


<h2>NuGet Support for the New Unified Target Frameworks</h2>

<p>In order to support these two new frameworks the following changes were made to NuGet.</p>

<ul>
<li>Add Xamarin.iOS and Xamarin.Mac as known frameworks.</li>
<li>Make frameworks that have a name that starts with <strong>Xamarin</strong> optional when checking the compatibility of Portable Class Libraries (PCLs) inside a NuGet package with a Portable Class Library project.</li>
</ul>


<p>With these new Unified frameworks being recognised by NuGet you can now create a NuGet package with assemblies that specifically target these frameworks.  The following shows part of a .nuspec file with framework specific assemblies for iOS and Mac being copied into the appropriate target lib folder inside the NuGet package.</p>

<pre><code>&lt;files&gt;
    &lt;file src="lib\Xamarin.iOS\*.dll" target="lib\Xamarin.iOS10" /&gt;
    &lt;file src="lib\Xamarin.Mac\*.dll" target="lib\Xamarin.Mac20" /&gt;
&lt;/files&gt;
</code></pre>

<p>The <a href="https://www.nuget.org/packages/Splat/">Splat NuGet package</a>, created by Paul Betts, is one NuGet package available from the main NuGet gallery that explicitly targets both of the new Unified frameworks.</p>

<p>Having the Xamarin frameworks treated as optional by NuGet allows you to install a NuGet package containing PCL assemblies into a Portable Class Library project, on a machine with the Xamarin PCL profiles registered. Without the Xamarin frameworks being treated as optional the NuGet package would fail to be installed since NuGet would find them incompatible unless the NuGet package explicitly included the Xamarin frameworks as part of its PCL profile.</p>

<p>Support for the new Xamarin frameworks will be available in the official NuGet from Microsoft in version 2.8.3. <a href="https://nuget.codeplex.com/releases/view/133091">NuGet 2.8.3</a> is currently available as alpha release. Xamarin Studio 5.4 includes its own build of NuGet which has support for the new Xamarin frameworks.</p>

<h2>Portable Class Libraries</h2>

<p>In order to be able to install a NuGet package containing PCL assemblies, such as Json.NET, into a Unified iOS or Unified Mac project you will need to have the PCL profile XML files for Unified iOS and Mac installed on your machine.</p>

<p>On the Mac you can get these new PCL profile XML files by installing Mono 3.10.0, which is currently available from Xamarin Studio on the alpha and beta channels.</p>

<p>On Windows, since NuGet 2.8.3 is currently only available as an alpha release, there is a <a href="http://xvs.xamarin.com/Xamarin.iOS.PortableNuGet.msi">separate installer</a> which will register the Unified iOS framework with the PCL profiles on your machine and will also install an alpha version of Microsoft&rsquo;s NuGet Package Manager 2.8.3 into Visual Studio.</p>
]]></content>
  </entry>
  
</feed>
