<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: monodevelop | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/monodevelop/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2019-01-04T13:45:28+00:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Task Runner Explorer in Visual Studio for Mac]]></title>
    <link href="http://lastexitcode.com/blog/2019/01/04/TaskRunnerExplorerInVisualStudioMac/"/>
    <updated>2019-01-04T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2019/01/04/TaskRunnerExplorerInVisualStudioMac</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/mrward/monodevelop-language-server-addin">Task Runner Explorer addin</a> provides a
Task Runner Explorer
window, similar to the one in Visual Studio on Windows, which can be used to run tasks with
Cake, Gulp, Grunt, NPM and TypeScript.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerWindowGruntNpmTasks.png" title="&lsquo;Task Runner Explorer window&rsquo; &lsquo;Task Runner Explorer Window&rsquo;" ></p>

<h2>Features</h2>

<ul>
<li>Task Runner Explorer Window

<ul>
<li>View tasks</li>
<li>Run tasks</li>
<li>View task output</li>
<li>Run and cancel long running tasks, such as tcs watch</li>
<li>Configure tasks to run when specific IDE events occur

<ul>
<li>Before Build</li>
<li>After Build</li>
<li>Clean</li>
<li>Project Opened</li>
<li>Solution Opened</li>
</ul>
</li>
</ul>
</li>
<li>Task Runners

<ul>
<li>Cake</li>
<li>Gulp</li>
<li>Grunt</li>
<li>NPM</li>
<li>TypeScript</li>
</ul>
</li>
</ul>


<h2>Supports</h2>

<ul>
<li>Visual Studio Mac 7.5 or later.</li>
</ul>


<h2>Task Runner Explorer</h2>

<p>To open the Task Runner Explorer window, from the View menu select Pads, then
select Task Runner Explorer.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/ViewTaskRunnerExplorerMenu.png" title="&lsquo;View Task Runner Explorer menu&rsquo; &lsquo;View Task Runner Explorer menu&rsquo;" ></p>

<p>The Task Runner Explorer will look for files supported by a task runner in the
solution directory and the project directory. It will also look at all files
that have been added to a project or that have been added to a solution folder.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerTypeScriptNpmTasks.png" title="&lsquo;Task Runner Explorer TypeScript and NPM tasks&rsquo; &lsquo;Task Runner Explorer TypeScript and NPM tasks&rsquo;" ></p>

<p>The top left of the Task Runner Explorer shows a list of projects
or the solution that have tasks available. This can be used to filter the tasks shown in the
Task Runner Explorer window.</p>

<p>Currently changes made to tasks will not be detected automatically. To refresh
the task information you can click the Refresh button
available at the top left of the Task Runner Explorer window.</p>

<h3>Running a Task</h3>

<p>To run a task you can double click it or right click and select Run.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerRunMenu.png" title="&lsquo;Task Runner Explorer Run menu&rsquo; &lsquo;Task Runner Explorer Run menu&rsquo;" ></p>

<p>Output from the task is shown on the right hand side of the Task Runner Explorer
window.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerNpmUpdateRunning.png" title="&lsquo;NPM update running&rsquo; &lsquo;NPM update running&rsquo;" ></p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/NpmUpdateRunCompleted.png" title="&lsquo;NPM update completed&rsquo; &lsquo;NPM update completed&rsquo;" ></p>

<p>A long running task, such as tcs watch, will run until the solution is closed,
or the Stop button, available on the right hand side
of the Task Runner Explorer window, is clicked.</p>

<h3>Binding Tasks to IDE Events</h3>

<p>Tasks can be configured to run when the following IDE events occur:</p>

<ul>
<li>After Build</li>
<li>Before Build</li>
<li>Clean</li>
<li>Project or Solution Opened</li>
</ul>


<p>If the task runner file is in a project directory then the build and clean
events are associated with the project. If the task runner file is in a solution directory
then the build events are associated with the solution.</p>

<p>To configure a task, right click it, select Bindings and then select the
event.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerBindingsMenu.png" title="&lsquo;Task Runner Explorer Bindings menu&rsquo; &lsquo;Task Runner Explorer Bindings menu&rsquo;" ></p>

<p>The binding will be displayed in the Bindings tab and will also be shown as
checked when the context menu for the task is opened.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerBeforeBuildBindingAdded.png" title="&lsquo;Task Runner Explorer Before Build binding added&rsquo; &lsquo;Task Runner Explorer Before Build binding added&rsquo;" ></p>

<p>To remove the binding you can right click the task, select Bindings and
select the event again to uncheck it. Alternatively you can right click
it in the Bindings tab and select Remove.</p>

<p>The order in which the tasks are run for a particular IDE event can be changed
by right clicking the binding in the Bindings tab and selecting Move Up or Move Down.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerExplorerBindingsMoveDownMenu.png" title="&lsquo;Task Runner Explorer binding Move Up and Down menus&rsquo; &lsquo;Task Runner Explorer binding Move Up and Down menus&rsquo;" ></p>

<p>The binding information is typically saved in a file in the same directory as the corresponding task
runner file, however this depends on how the task runner is implemented.</p>

<h3>Disabling Automatic Running of Tasks</h3>

<p>In preferences there is a Task Runner Explorer section which shows
a check box that can be used to enable or disable the automatic
running of tasks on opening a project or solution, and when building or cleaning.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TaskRunnerPreferences.png" title="&lsquo;Preferences &ndash; Automatically run tasks option&rsquo; &lsquo;Preferences &ndash; Automatically run tasks option&rsquo;" ></p>

<h2>Cake Task Runner</h2>

<p>The Cake task runner supports running tasks defined in a build.cake file.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/CakeTaskRunner.png" title="&lsquo;Cake Task Runner&rsquo; &lsquo;Cake Task Runner&rsquo;" ></p>

<p>This is based on the <a href="https://github.com/cake-build/cake-vs">Cake Task Runner for Visual Studio</a>.</p>

<h2>Gulp Task Runner</h2>

<p>The Gulp task runner supports running tasks defined in a gulpfile.js file.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/GulpTaskRunner.png" title="&lsquo;Gulp Task Runner&rsquo; &lsquo;Gulp Task Runner&rsquo;" ></p>

<p><a href="https://gulpjs.com">Gulp</a> needs to be installed separately.</p>

<h2>Grunt Task Runner</h2>

<p>The Grunt task runner supports running tasks defined in a Gruntfile.js file.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/GruntTaskRunner.png" title="&lsquo;Grunt Task Runner&rsquo; &lsquo;Grunt Task Runner&rsquo;" ></p>

<p><a href="https://gruntjs.com">Grunt</a> needs to be installed separately.</p>

<h2>NPM Task Runner</h2>

<p>The NPM task runner supports running tasks defined in a package.json file.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/NpmTaskRunner.png" title="&lsquo;NPM task runner&rsquo; &lsquo;NPM task runner&rsquo;" ></p>

<p>The NPM task runner is a port of <a href="https://madskristensen.net/">Mads Kristensen&rsquo;s</a>
<a href="https://github.com/madskristensen/NpmTaskRunner">NPM Task Runner</a>.</p>

<p>The NPM task runner supports running with the verbose NPM option defined. If a
task is selected then a button will be displayed on the left hand side of the
Task Runner Explorer window. If this is selected then npm will be passed the
<code>-d</code> argument when it is run.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/NpmTaskRunnerVerboseButton.png" title="&lsquo;NPM task runner Verbose button&rsquo; &lsquo;NPM task runner Verbose button&rsquo;" ></p>

<p>NPM needs to be installed separately.</p>

<h2>TypeScript Task Runner</h2>

<p>The TypeScript task runner supports running tcs build and tcs watch if a tsconfig.json file
is found.</p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TypeScriptTaskRunner.png" title="&lsquo;TypeScript task runner&rsquo; &lsquo;TypeScript task runner&rsquo;" ></p>

<p><img src="/images/blog/TaskRunnerExplorerInVisualStudioMac/TypeScriptWatchTaskOutput.png" title="&lsquo;TypeScript tcs watch output&rsquo; &lsquo;TypeScript tcs watch output&rsquo;" ></p>

<p>The TypeScript task runner will try to use tsc that is distributed with the Web Tools extension that
is included in Visual Studio for Mac. If the Web Tools extension is not installed then the task
runner will fall back to running tsc directly.</p>

<h2>Installation</h2>

<p>There are two addins to be installed:</p>

<ul>
<li><a href="https://github.com/mrward/monodevelop-task-runner-addin/releases/download/0.1/MonoDevelop.TaskRunner_0.1.mpack">Task Runner</a></li>
<li><a href="https://github.com/mrward/monodevelop-task-runner-addin/releases/download/0.1/MonoDevelop.TaskRunnersBundle_0.1.mpack">Task Runners Bundle</a></li>
</ul>


<p>The Task Runner is the main addin. This will be used by other task runner addins and provides the
main task runner API and services.</p>

<p>The Task Runners Bundle addin contains the Cake, Gulp, Grunt, NPM and TypeScript task runners. These
are currently included together as a single addin instead of being distributed separately.</p>

<p>Download both of the above .mpack files. Install the Task Runner addin first since the Task Runners Bundle
addin depends on it. To install an addin&rsquo;s .mpack file, open the Extensions Manager
by selecting Extensions&hellip; from the main menu. Click the Install from file button. Select the .mpack file
and then click the Open button. After installing both the addins restart Visual Studio for Mac.</p>

<p>These addins are not currently available from the main Visual Studio for Mac extensions server.</p>

<h2>Source Code</h2>

<ul>
<li><a href="https://github.com/mrward/monodevelop-language-server-addin">Task Runner Explorer for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/monodevelop-cake-task-runner">Cake Task Runner for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/monodevelop-grunt-task-runner">Grunt Task Runner for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/monodevelop-gulp-task-runner">Gulp Task Runner for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/NpmTaskRunner">NPM Task Runner for Visual Studio for Mac</a></li>
<li><a href="https://github.com/mrward/monodevelop-typescript-task-runner">TypeScript Task Runner for Visual Studio for Mac</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.7]]></title>
    <link href="http://lastexitcode.com/blog/2018/12/19/NuGetSupportInVisualStudioMac7-7/"/>
    <updated>2018-12-19T14:40:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2018/12/19/NuGetSupportInVisualStudioMac7-7</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 4.8 support</li>
<li> Support PackageReferences without a Version</li>
<li> Fixed NuGet sdk resolver not being found in Mono 5.16</li>
<li> Fixed null reference exception in package compatiblity check</li>
<li> Fixed Update menu enabled when project has no PackageReferences</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.7</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#whats-new-in-77">release notes</a>.</p>

<h2>NuGet 4.8 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.8-rtm">NuGet 4.8.0.5385</a> is now
included with Visual Studio for Mac 7.7.2.</p>

<h2>Support PackageReferences without a Version</h2>

<p>Visual Studio for Mac did not support projects that used PackageReferences without
specifying a version.</p>

<pre><code>&lt;ItemGroup&gt;
    &lt;PackageReference Include="Newtonsoft.Json" /&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>The version may be defined elsewhere in another MSBuild file, such as the Directory.props file,
or by the .NET Core SDK, as with the
Microsoft.AspNetCore.App PackageReference in ASP.NET Core projects. By default a
PackageReference without a version will restore the lowest available version for
the NuGet package.</p>

<p>However in Visual Studio for Mac there were several problems with PackageReferences that
did not specify a version.</p>

<p>Opening a project with a PackageReference without a Version
would result in an ArgumentNullException being logged and the
Add Packages dialog could not be opened.</p>

<p>If the PackageReference, in a non-SDK project, had no Version
then it was not displayed in the Packages folder and a null reference
exception was logged. The Solution window would try to find
the package to check if it was installed which is not possible
with a missing version and NuGet&rsquo;s VersionFolderPathResolver
would throw a null reference exception.</p>

<p>If a PackageReference had no Version then a null reference exception
was logged when checking for updates. A null version is now handled.</p>

<p>Right clicking the package in the Packages folder would log a
null reference exception if a non-SDK style project was used and it
had a PackageReference without a version. This is now handled and the
menu label will show &ldquo;Version None&rdquo;.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed NuGet sdk resolver not being found in Mono 5.16</strong></p>

<p>More recent versions of MSBuild, such as MSBuild 16.0.40 which is included
with Mono 5.16.0.173, allow the sdk resolver to use a manifest.xml file to
define the assembly where the resolver can be found:</p>

<pre><code>&lt;SdkResolver&gt;
  &lt;Path&gt;..\..\Microsoft.Build.NuGetSdkResolver.dll&lt;/Path&gt;
&lt;/SdkResolver&gt;
</code></pre>

<p>This manifest file not supported and resulted in the NuGet sdk resolver not
being loaded. Any projects that use an MSBuild sdk from a NuGet
package no longer worked and would result in an &lsquo;Invalid configuration
mapping&rsquo; error shown in the Solution window. The sdk resolution in
Visual Studio for Mac has now
been updated based on the latest MSBuild source code.</p>

<p><strong>Fixed null reference exception in compatiblity check</strong></p>

<p>Changing the target framework of a project that uses a packages.config
file will result in a package compatiblity check being run.
If the project had both a PackageReference and a packages.config file
the package compatiblity check would fail with a null
reference exception. Visual Studio for Mac was treating the project as
though it was using a packages.config file, when it should have been
treated as a PackageReference project. This resulted in a null
reference exception being thrown when checking for package compatiblity.</p>

<p><strong>Fixed Update menu enabled when project has no PackageReferences</strong></p>

<p>The Update menu was enabled if the project used PackageReferences but
had none in the project. Without any PackageReferences in the
project there is no packages to update. The check to determine if the Update
menu should be enabled has been changed to make sure the project has
PackageReferences in the project file, not just imported
PackageReferences. The Update
NuGet Packages menu, which is used to update packages for the solution,
has also been changed to have the same behaviour.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.6]]></title>
    <link href="http://lastexitcode.com/blog/2018/09/02/NetCoreSupportInVisualStudioMac7-6/"/>
    <updated>2018-09-02T11:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2018/09/02/NetCoreSupportInVisualStudioMac7-6</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li>NuGet SDK resolver now used to find NuGet SDK packages</li>
<li>Fixed Synchronous operation cancelled message on stopping debugging</li>
<li>Fixed debugger hanging when debugging unit tests</li>
<li>Fixed command line arguments not used with a new project</li>
<li>Fixed hang when discovering unit tests</li>
<li>Allow loading of SDK style projects without a main PropertyGroup</li>
<li>Fixed TargetFramework not being updated in project</li>
<li>Fixed .xaml.cs code completion in new Xamarin.Forms .NET Standard project</li>
<li>Fixed default build action for new HTML file</li>
<li>Fixed SDK version not being parsed from Sdk attribute</li>
<li>Fixed null reference on opening .NET Core project with sdk version</li>
<li>Fixed editor errors when .NET Standard assembly referenced in Xamarin.iOS project</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.6</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#whats-new-in-76">release notes</a>.</p>

<h2>NuGet SDK resolver now used to find NuGet SDK packages</h2>

<p>Visual Studio for Mac now has support for the
<a href="https://github.com/Microsoft/msbuild/issues/2803">NuGet SDK resolver</a>. The NuGet
SDK resolver will download and install SDKs for SDK style
projects if these SDKs are missing.</p>

<pre><code>&lt;Project Sdk="My.Custom.Sdk/2.3.4"&gt;
  ...
&lt;/Project&gt;
</code></pre>

<p>The SDK resolution is done in the background
when the project is opened and there is currently no visual indication that
this is happening.</p>

<p>The NuGet library assemblies are not available to the remote MSBuild host used by
Visual Studio for Mac so the NuGet SDK resolver was previously failing to load. The NuGet SDK
resolver supports a MSBUILD_NUGET_PATH environment variable which is now set by
Visual Studio for Mac to point to the directory containing the NuGet assemblies
that are included with the IDE.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed synchronous operation cancelled message on stopping debugging</strong></p>

<p>Stopping the .NET Core debugger would sometimes result in
a dialog being displayed indicating that the debugger operation failed.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-6/DebuggerOperationFailedMessage.png" title="&lsquo;Debugger operation failed &ndash; Synchronous operation cancelled &ndash; dialog&rsquo; &lsquo;Debugger operation failed &ndash; Synchronous operation cancelled &ndash; dialog&rsquo;" ></p>

<p><strong>Fixed debugger hanging when debugging unit tests</strong></p>

<p>The .NET Core debugger would sometimes hang Visual Studio for Mac when debugging unit tests.
The problem was that if the breakpoint was placed on an invalid line then the .NET Core debugger
would send back the adjusted breakpoint location. Visual Studio for Mac would then send back
an incorrect breakpoint line back to the .NET Core debugger, which again resulted in the debugger
sending back a corrected line. This would repeat resulting in the IDE and debugger
getting stuck in a loop.</p>

<p><strong>Fixed command line arguments not used with a new project</strong></p>

<p>Creating a new .NET Core console project, editing the project run
configuration to use extra command line arguments, or to not use the
external console, then building and running the project would result
in the project run configuration not being used. No extra
arguments would be passed to the console project, and the external
console would still be used. This could be fixed by closing and
re-opening the solution.</p>

<p>The problem was that when the project is re-evaluated, after it is
created, its run configurations are cleared. The solution&rsquo;s
startup run configuration would still be using
the original project run configuration that was no longer used.
Changes made to the project run configuration then had no affect. Closing and
re-opening the solution fixed this since
the run configuration defined in the .csproj.user file is re-used when the
project is re-evaluated on reloading so both the solution run configuration and
the project run configuration refer to the same configuration. To fix this,
on re-evaluating the project, if the solution&rsquo;s run configuration
refers to a project run configuration that has been removed then
the solution&rsquo;s startup configuration is refreshed.</p>

<p>Note that there is a similar problem with multiple solution run
configurations that can occur which is not addressed by this fix.</p>

<p><strong>Fixed hang when discovering unit tests</strong></p>

<p>Opening a solution containing a .NET Core test project would sometimes
result in the IDE hanging when discovering tests. On running <code>kill -QUIT pid</code>
the IDE log would show a background thread and the UI thread both
awaiting test discovery to complete:</p>

<pre><code>var discoveredTests = await VsTestDiscoveryAdapter.Instance.DiscoverTestsAsync (Project);

VsTestProjectTestSuite/&lt;OnCreateTests&gt;d__12.MoveNext
in MonoDevelop.UnitTesting.VsTest/VsTestProjectTestSuite.cs:95
</code></pre>

<p><strong>Allow loading of SDK style projects without a main PropertyGroup</strong></p>

<p>On loading an SDK style project that did not have a main PropertyGroup
Visual Studio for Mac would show the error message
&ldquo;Error while trying to load project:
Object reference not set to an instance of an object&rdquo;.</p>

<p>A project may define MSBuild properties in a Directory.Build.props file
instead of having this in the main project file. It is then
possible for the main project file to have no main property group.</p>

<p>Directory.Build.props:</p>

<pre><code>&lt;Project&gt;
  &lt;PropertyGroup&gt;
    &lt;OutputType&gt;Exe&lt;/OutputType&gt;
    &lt;TargetFramework&gt;netcoreapp2.1&lt;/TargetFramework&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
</code></pre>

<p>MainProject.csproj:</p>

<pre><code>&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
&lt;/Project&gt;
</code></pre>

<p>Visual Studio for Mac now handles the missing main PropertyGroup.</p>

<p><strong>Fixed TargetFramework not being updated in project</strong></p>

<p>Changing a .NET Core project&rsquo;s target framework to a different version in
Project Options, then re-opening Project Options and changing the
target framework version back again, would result in the target framework
not being updated in the project. The problem was the original target framework the
project had on opening was cached and the changing back to the same
target framework version was being ignored resulting in the project file not
being updated.</p>

<p><strong>Fixed .xaml.cs code completion in new Xamarin.Forms .NET Standard project</strong></p>

<p>Creating a new Xamarin.Forms .NET Standard project, then
modifing the .xaml to add new named UI items, would result in no
code completion in the .xaml.cs file for these new items
until the solution was closed and re-opened. The problem was that the
.xaml and .xaml.cs files
were being removed from the file information held in memory
when the project was re-evaluated. On re-evaluation, after
the NuGet restore is first run for the project, the old MSBuild items for the
.xaml and .xaml.cs file have the wrong metadata, so they need
to be removed, whilst new MSBuild items with the updated metadata
need to be added. The removal was done after adding the updated files
and, since they had the same filename, the new updated files were being
removed. The removal is now done before adding the updated files to
avoid the files being removed incorrectly.</p>

<p><strong>Fixed default build action for new HTML file</strong></p>

<p>Adding a new .html file to the wwwroot folder of an ASP.NET Core
project would add the file as a None item instead of a Content
item. This would result in the .html file not being used when
publishing the project. When &lsquo;dotnet publish&rsquo; was used the
publish directory would not contain the .html file.</p>

<p>ASP.NET Core projects have different build actions for files based on where they
are added. A .html file in the root directory would be a None item by default,
whilst a .html file in the wwwroot directory would be a Content item
by default. To fix this the default build action for a file is
determined by the file wildcard information available from the .NET
Core SDK.</p>

<p><strong>Fixed SDK version not being parsed from Sdk attribute</strong></p>

<p>The Sdk attribute would have its forward slash / replaced with a
backslash \ which meant Visual Studio for Mac was creating an
SdkReference with the wrong name, for example:</p>

<pre><code>Microsoft.NET.Sdk.Razor\2.1.0-preview2-final
</code></pre>

<p>Instead of having Microsoft.NET.Sdk.Razor as the name with the
version being separate.</p>

<p><strong>Fixed null reference on opening .NET Core project with SDK version</strong></p>

<p>Opening a SDK style project that used a Sdk attribute with a version
would show an error message &ldquo;Error while trying to load project:
Object reference not set to an instance of an object&rdquo;. The problem
was that an SdkResolver can return null from its Resolve method.
These null results were added to a list and then an attempt was made
to log the result warnings on a null result.</p>

<pre><code>&lt;Project Sdk="Microsoft.NET.Sdk.Razor/2.1.0-preview2-final"&gt;
</code></pre>

<p><strong>Fixed editor errors when .NET Standard assembly referenced in Xamarin.iOS project</strong></p>

<p>When a Xamarin.iOS project used an assembly that was compiled
for .NET Standard, such as the assembly in the
System.Collections.Immutable NuGet package, the netstandard assembly
was not made available for code completion. This then resulted in the text editor
showing errors even though the project could be compiled succesfully.
The errors displayed were similar to:</p>

<pre><code>  The type 'ValueType' is defined in an assembly that is not
  referenced. You must add a reference to assembly 'netstandard,
  Version=2.0.0.0, Culture=neutral, PublicKeytoken=cc7b1dffcd2ddd51'.
</code></pre>

<p>Now a check is made to determine
if an assembly is referencing netstandard and if so the facade assemblies,
which for Xamarin.iOS will include the netstandard.dll, are made available
for code completion. Previously only a check was made for the project having
an assembly referencing System.Runtime before including the facade assemblies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.6]]></title>
    <link href="http://lastexitcode.com/blog/2018/09/01/NuGetSupportInVisualStudioMac7-6/"/>
    <updated>2018-09-01T14:20:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2018/09/01/NuGetSupportInVisualStudioMac7-6</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Support no-op package restore on opening a solution</li>
<li> Added basic support for the NuGet SDK resolver</li>
<li> Fixed source code transformations not available in code completion</li>
<li> Fixed incorrect FSharp.Core NuGet package being restored</li>
<li> Fixed updating PackageReference removing metadata</li>
<li> Fixed build error after updating Xamarin.Forms PackageReference</li>
<li> Fixed build error after updating Xamarin.Forms NuGet package</li>
<li> Fixed editor errors when .NET Standard assembly referenced in Xamarin.iOS project</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.6</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#whats-new-in-76">release notes</a>.</p>

<h2>Support no-op package restore on opening a solution</h2>

<p>On opening a solution a NuGet package restore was always run for projects that use
PackageReferences. This resulted in the project.assets.json file being
re-generated and the projects being re-evaluated. Now if the package
references have not changed a no-op restore will occur. This makes the
restore faster on opening a solution. It also prevents Visual Studio for Mac
going online to fetch NuGet package information if a wildcard is used for
a PackageReference or if the package version cannot be found. In the Package
Console when a no-op restore occurs you will see the following
messages:</p>

<pre><code>Assets file has not changed. Skipping assets file writing.
No-Op restore. The cache will not be updated.
</code></pre>

<h2>Allow NuGet SDK resolver to find NuGet SDK packages</h2>

<p>Visual Studio for Mac now has basic support for the
<a href="https://github.com/Microsoft/msbuild/issues/2803">NuGet SDK resolver</a>. The NuGet
SDK resolver will download and install SDKs for SDK style
projects if these SDKs are missing.</p>

<pre><code>&lt;Project Sdk="My.Custom.Sdk/2.3.4"&gt;
  ...
&lt;/Project&gt;
</code></pre>

<p>The SDK resolution is done in the background
when the project is opened and there is currently no visual indication that
this is happening.</p>

<p>The NuGet library assemblies are not available to the remote MSBuild host used by
Visual Studio for Mac so the NuGet SDK resolver was previously failing to load. The NuGet SDK
resolver supports a MSBUILD_NUGET_PATH environment variable which is now set by
Visual Studio for Mac to point to the directory containing the NuGet assemblies
that are included with the IDE.</p>

<h2>Bug Fixes</h2>

<p><strong>Source code transformations not available in code completion</strong></p>

<p>Visual Studio for Mac now ensures that files generated by a NuGet
package are available for code completion. One example
NuGet package that generates files is the
<a href="https://www.nuget.org/packages/LibLog/">LibLog NuGet package</a>.</p>

<p>The LibLog NuGet package has contentFiles that are processed by
MSBuild and converted into .cs files. These .cs files are implicitly included
in the project. These files are generated in the obj folder. For example:</p>

<pre><code>obj/Debug/netstandard2.0/NuGet/SomeID/LibLog/5.0.0/ILog.cs
</code></pre>

<p>The types defined inside these generated files can be referenced by
code in the project. Whilst the project would compile without any errors
the text editor would show errors about the
types from the generated files being undefined.</p>

<p>These generated files are not created or returned by running the
CoreCompileDependsOn MSBuild target, which is currently used to find generated
files. Now when the CoreCompileDependsOn target is evaluated, Visual Studio for
Mac will also run NuGet specific
MSBuild targets to ensure any NuGet package files are generated and
made available for code completion.</p>

<p><strong>Fixed incorrect FSharp.Core NuGet package restored</strong></p>

<p>Installing the FSharp.Core
4.5.0 NuGet package into a F# .NET Core console project would result in
version 4.3.4 of the FSharp.Core NuGet
package being used and displayed in the Dependencies folder. FSharp.Core 4.3.4 is
the NuGet package implicitly added by the F# .NET Core SDK. This was being used by
the project instead of the PackageReference defined in the project.
PackageReferences in the project will now override any implicitly
added NuGet packages. This matches the behaviour of dotnet restore when
run from the command line.</p>

<p><strong>Fixed updating PackageReference removing metadata</strong></p>

<p>On updating a NuGet PackageReference the old PackageReference was
removed from the project file and then a new PackageReference was added.
This resulted in custom MSBuild properties associated with the
PackageReference being removed from the project file.</p>

<pre><code>&lt;PackageReference Include="NuGet.Versioning" Version="3.6.0"&gt;
  &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
&lt;/PackageReference&gt;  
</code></pre>

<p>Now on updating a NuGet package the version of the existing PackageReference element
is updated so any custom MSBuild properties are not removed.</p>

<p><strong>Fixed build error after updating Xamarin.Forms PackageReference</strong></p>

<p>A build error could occur after updating projects that had
a Xamarin.Forms PackageReference. One way to reproduce this was to
have a .NET Standard project that used an old Xamarin.Forms
version as a PackageReference, and another non .NET Core project,
that references the .NET Standard project, which used a newer
Xamarin.Forms NuGet package. On building an
error would be displayed:</p>

<pre><code>Error XF002: Xamarin.Forms tasks do not match targets
</code></pre>

<p>On updating the .NET Standard project to use the same Xamarin.Forms
NuGet package version the build error would still occur until the solution
was closed and re-opened. Now the remote MSBuild host is shutdown
to ensure the correct Xamarin.Forms MSBuild targets and assemblies
are used after the NuGet package is updated.</p>

<p><strong>Fixed build error after updating Xamarin.Forms NuGet package</strong></p>

<p>On updating the Xamarin.Forms NuGet package in a solution
the build would sometimes fail with errors similar to:</p>

<pre><code>Could not load file or assembly 'Xamarin.Forms.Xaml,
Version=2.0.0.0, Culture=neutral, PublicKeyToken=null' or one of
its dependencies.

Error XF002: Xamarin.Forms tasks do not match targets. Please
ensure that all projects reference the same version of
Xamarin.Forms, and if the error persists, please restart the IDE.
</code></pre>

<p>The problem was that the old MSBuild tasks and targets from the originally used
Xamarin.Forms NuGet package were
still being used. Now when an MSBuild import has changed in a project
the remote MSBuild host is shutdown to ensure the correct MSBuild tasks are
used.</p>

<p><strong>Fixed editor errors when .NET Standard assembly referenced in Xamarin.iOS project</strong></p>

<p>When a Xamarin.iOS project used an assembly that was compiled
for .NET Standard, such as the assembly in the
System.Collections.Immutable NuGet package, the netstandard assembly
was not made available for code completion. This then resulted in the text editor
showing errors even though the project could be compiled succesfully.
The errors displayed were similar to:</p>

<pre><code>  The type 'ValueType' is defined in an assembly that is not
  referenced. You must add a reference to assembly 'netstandard,
  Version=2.0.0.0, Culture=neutral, PublicKeytoken=cc7b1dffcd2ddd51'.
</code></pre>

<p>Now a check is made to determine
if an assembly is referencing netstandard and if so the facade assemblies,
which for Xamarin.iOS will include the netstandard.dll, are made available
for code completion. Previously only a check was made for the project having
an assembly referencing System.Runtime before including the facade assemblies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.5]]></title>
    <link href="http://lastexitcode.com/blog/2018/05/20/NetCoreSupportInVisualStudioMac7-5/"/>
    <updated>2018-05-20T09:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2018/05/20/NetCoreSupportInVisualStudioMac7-5</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li>.NET Core 2.1 SDK support

<ul>
<li>.NET Core 2.1 SDK project templates</li>
<li>HTTPS development certificate support</li>
<li>.NET Core global tools added to PATH on startup</li>
</ul>
</li>
<li>.NET Core location can now be configured</li>
<li>Xamarin.Forms project templates now use .NET Standard projects</li>
<li>Performance improvements when using projects with many files</li>
<li>.NET Core templating engine has been updated</li>
<li>Improved support for Xamarin.Forms</li>
<li>Item templates are now supported with the .NET Core templating engine</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.5</a> can be found in the
<a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#-visual-studio-2017-for-mac-version-75-release-notes">release notes</a>.</p>

<h2>.NET Core 2.1 SDK support</h2>

<p>Visual Studio for Mac 7.5 includes support for the .NET Core 2.1 SDK which is currently
available as a <a href="https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/">release candidate</a>. The following
sections will look into the support provided by Visual Studio for Mac 7.5 for the .NET Core 2.1 SDK.</p>

<h3>.NET Core 2.1 SDK project templates</h3>

<p>If .NET Core 2.1.300 SDK is installed then the .NET Core 2.1 project templates
will be available in the New Project dialog.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/NewProjectDialogNetCore21TargetFramework.png" title="&lsquo;New Project dialog &ndash; .NET Core 2.1 target framework option&rsquo; &lsquo;New Project dialog &ndash; .NET Core 2.1 target framework option&rsquo;" ></p>

<p>The .NET Core 2.1 project templates are not included with Visual Studio for Mac and
will be searched for in the 2.1.300 SDK templates directory.</p>

<pre><code>/usr/local/share/dotnet/sdk/2.1.300-rc1-008673/Templates/
</code></pre>

<p>The project templates for .NET Core 2.0 and 1.1 are currently still being shipped
with Visual Studio for Mac.</p>

<h3>HTTPS development certificate support</h3>

<p>ASP.NET Core 2.1 projects use HTTPS by default. In order to be able to run
ASP.NET Core 2.1 projects with HTTPS a development certificate needs to be installed.
Visual Studio for Mac will detect if the development certificate is missing
and offer to install it when you run an ASP.NET Core 2.1 project that uses
HTTPS.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/HttpsDevCertificateNotInstalledMessage.png" title="&lsquo;HTTPS development certificate not installed message&rsquo; &lsquo;HTTPS development certificate not installed message&rsquo;" ></p>

<p>Visual Studio for Mac will use the dotnet dev-certs tool to check if the
HTTPS development certificate is installed and trusted.</p>

<pre><code>dotnet dev-certs https --trust --check
</code></pre>

<p>Installing the HTTPS certificate requires administrator privileges so you may be
prompted for your username and password after clicking the Yes button. Currently
the prompt for credentials shows <strong>mono-sgen64 wants to make changes</strong>. In the future this will show a
custom message indicating that the credentials are required to install the HTTPS development certificate.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/MonoSGenAdminPrompt.png" title="&lsquo;Mono sgen administrator dialog prompt&rsquo; &lsquo;Mono sgen administrator dialog prompt&rsquo;" ></p>

<p>After entering your credentials the following command is run as administrator.</p>

<pre><code>dotnet dev-certs https --trust
</code></pre>

<p>After the certificate is installed the ASP.NET Core 2.1 project will be
opened in the default browser using HTTPS.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/AspNetCoreProjectInChromeUsingHttps.png" title="&lsquo;ASP.NET Core 2.1 project open in browser using HTTPS&rsquo; &lsquo;ASP.NET Core 2.1 project open in browser using HTTPS&rsquo;" ></p>

<p>Running <strong>dotnet dev-certs https &mdash;trust</strong> to install and trust the certificate needs to be
done with administrator privileges with the user id 0. To do this Visual Studio for Mac
does the following:</p>

<ol>
<li>Launches a separate custom console app.</li>
<li>The console app uses the AuthorizationExecuteWithPrivileges Mac
API provided by Xamarin.Mac to launch itself as again as administrator.
It is not possible to run dotnet as administrator initially since it requires the user id to be
set to 0, which is what happens when you use <strong>sudo dotnet</strong>, and this can only be done
when running with administrator privileges. So the console app is launched again but this
time with administrator privileges.</li>
<li>The console app, now being run with administrator privileges, will use setuid to set the
current user id to 0.</li>
<li>The console app then runs <strong>dotnet dev-certs https &mdash;trust</strong> which
will install and trust the HTTPS development certificate.</li>
</ol>


<p>The <strong>dotnet dev-certs https &mdash;trust</strong> command will add two localhost certificates. You
can see these by opening the Keychain Access application and searching for
localhost.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/LocalhostCertificateInKeychain.png" title="&lsquo;localhost certificate created by dotnet dev-certs in Keychain Access application&rsquo; &lsquo;localhost certificate created by dotnet dev-certs in Keychain Access application&rsquo;" ></p>

<p>If the HTTPS development certificate is found to be valid and
trusted then this will be remembered for the current Visual Studio for Mac
session and a check will not be run again during the current session.</p>

<h3>.NET Core global tools added to path on startup</h3>

<p>The .NET Core SDK 2.1 supports installing global tools. These tools are .NET Core console apps
that are available as NuGet packages and can be installed and used from the command line.
To be able to use these tools with the dotnet command line the <strong>~/.dotnet/tools</strong>
directory needs to be added to the PATH environment variable. The path to
these global tools is now added to Visual Studio&rsquo;s PATH environment variable
when it starts.</p>

<h3>Prompt to install .NET Core 2.1 SDK if not installed</h3>

<p>If a .NET Core 2.1 project is opened and .NET Core 2.1.300 SDK is not
installed then a dialog will be shown allowing the SDK to
be downloaded. The project in the Solution window will show an error
icon indicating that the .NET Core 2.1 SDK is not
installed.</p>

<h3>Launching a browser when running an ASP.NET Core 2.1 project</h3>

<p>The .NET Core SDK 2.1 project templates for ASP.NET Core
specify the https and http urls in the launchSettings.json file
by using the applicationUrl property.</p>

<pre><code>    "MyAspNetCore21Project": {
        "commandName": "Project",
        "launchBrowser": true,
        "applicationUrl": "https://localhost:5001;http://localhost:5000",
        "environmentVariables": {
            "ASPNETCORE_ENVIRONMENT": "Development"
        }
    }
</code></pre>

<p>With earlier .NET Core 2.1 preview SDKs this was defined in the
ASPNETCORE_URLS environment variable. The full applicationUrl
property was used unmodified when running the ASP.NET Core 2.1 project and
resulted in an invalid url being used causing the AspNetCoreExecutionHandler to log a warning
and not opening the browser. Now the first url in the applicationUrl
is used if there are multiple urls.</p>

<h3>Support ASPNETCORE_URLS when launching the browser</h3>

<p>If the launchSettings.json does not define an applicationUrl then
Visual Studio for Mac will fallback to checking the environment variable defined
for ASPNETCORE_URLS in the launchSettings.json file and will use the first url
found there. This url will be used to launch the browser when running the project.</p>

<p>An example launchSettings.json that was used in the .NET Core 2.1 preview SDKs
is shown below.</p>

<pre><code>"MyProject": {
  "commandName": "Project",
  "launchBrowser": true,
  "environmentVariables": {
    "ASPNETCORE_ENVIRONMENT": "Development",
    "ASPNETCORE_URLS": "https://localhost:5001;http://localhost:5000"
  }
}
</code></pre>

<p>Compared with the .NET Core SDK 2.0.</p>

<pre><code>"MyProject": {
  "commandName": "Project",
  "launchBrowser": true,
  "environmentVariables": {
    "ASPNETCORE_ENVIRONMENT": "Development"
  },
  "applicationUrl": "http://localhost:5000/"
}
</code></pre>

<h2>Allow .NET Core location to be configured</h2>

<p>In Preferences there is now a Projects &ndash; SDK Locations &ndash; .NET Core
section that can be used to configure the location of the .NET Core
command line tool (dotnet).</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/NetCoreLocationConfiguration.png" title="&lsquo;.NET Core location configured in preferences&rsquo; &lsquo;.NET Core location configured in preferneces&rsquo;" ></p>

<p>This can be used to configure Visual Studio for Mac to use a
.NET Core SDK that is not installed in the default location. After this is
changed the MSBuild engine hosts are recycled and all .NET Core projects
are re-evaluated to ensure the new locations of any MSBuild targets
are used.</p>

<p>If the location is invalid, or no runtimes or SDKs can be found at the configured
location, a Not found error will be displayed.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/NetCoreLocationInvalidPath.png" title="&lsquo;Invalid .NET Core location path specified in preferences&rsquo; &lsquo;Invalid .NET Core location path specified in preferences&rsquo;" ></p>

<h2>Xamarin.Forms Project Templates now include .NET Standard projects</h2>

<p>The Xamarin.Forms project templates, Blank Forms App and Forms App, will now
create a .NET Standard 2.0 project instead of a Portable Class Library (PCL) project
if .NET Standard is selected in the New Project dialog.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/NewProjectDialogFormsNetStandard.png" title="&lsquo;New Project dialog &ndash; Blank Forms &ndash; .NET Standard option&rsquo; &lsquo;New Project dialog &ndash; Blank Forms &ndash; .NET Standard option&rsquo;" ></p>

<p>The Xamarin.Forms Class Library project template now creates a .NET Standard 2.0 project instead of
a Portable Class Library project.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/NewProjectDialogXamarinFormsLibraryProject.png" title="&lsquo;New Project dialog &ndash; Xamarin.Forms Class Library project&rsquo; &lsquo;New Project dialog &ndash; Xamarin.Forms Class Library project&rsquo;" ></p>

<h2>Prevent .xaml.cs file from being renamed in a .NET Core project</h2>

<p>The Xamarin.Forms NuGet package has an MSBuild .targets file that is imported
after the project items are defined. This .targets file overrides
the DependentUpon property for all .xaml.cs files. This means that renaming the
.xaml.cs file to be different to the .xaml file is not supported.
To prevent this the Rename menu is now disabled in the Solution
window for .xaml.cs files if they depend on a .xaml file.</p>

<h2>Exclude None build action for XAML files in .NET Core projects</h2>

<p>Recent versions of Xamarin.Forms NuGet packages exclude all .xaml files from the
default None file wildcard defined by the .NET Core SDK. This exclusion is
done in a .targets file which is applied after the items in the project
file have been added. This means that a .NET Standard project should not use
None items for .xaml files since they will be removed. To avoid this problem
the None build action is excluded from the list of build actions for .xaml files.
This list of build actions is available when right
clicking the file in the Solution window and in the Properties window when
the file is selected.</p>

<h2>Dependent files now renamed on renaming parent file in the Solution window</h2>

<p>When a file is renamed in the Solution window the dependent files will
also be renamed if they start with the same name as the parent file.
This avoids problems with XAML files since a different name for the .xaml file
and the associated .xaml.cs file is not supported.</p>

<h2>Improve project load times for projects with many files</h2>

<p>Opening a .NET Core project that contained many files that
were not excluded, such as a .NET Core console project that has a
node_modules directory, could take a long time to load.</p>

<p>Some performance improvements have been made to speed up the
loading of .NET Core projects. For a .NET Core console project that had a node_modules
directory containing around 17000 files the initial project load time which
was taking around 70-80 seconds and now it takes around 20 seconds. Visual Studio 2017 on
Windows takes around 15-20 seconds to load the same project before
it is visible in the Solution Explorer window.</p>

<p>The performance improvements include:</p>

<ol>
<li>Adding a faster project item lookup used when finding an existing
project item on loading the project.</li>
<li>Updating the existing project items is now faster avoiding iterating
over the existing items.</li>
<li>Evaluating MSBuild items is now only done when evaluating properties.
Previously this was done when evaluating project configurations and run configurations.
This would result in
files and directories being searched multiple times when looking
wildcard matches on loading the project. Now the files
and directories are searched once during the initial project load.</li>
</ol>


<h2>.NET Core templating engine updated</h2>

<p>Updated the .NET Core templating to version 1.0.0-beta3-20171117-314. This new
version of the .NET Core templating engine fixes the following problems:</p>

<ol>
<li>Templates that use files with @ character in their names being generated with the
@ symbol encoded.</li>
<li>Templates that use the Guid macro and did not specify a format
would cause the template generation to fail. An exception was thrown
since the format was not defined. Now
if the format is not defined the default format is used.</li>
</ol>


<h2>Report template creation failures when using the .NET Core templating engine</h2>

<p>To help diagnose problems with project and item templates that use the
.NET Core templating engine more detailed information about the failure is now logged
in the IDE log.</p>

<h2>Support item templates with the new templating engine</h2>

<p>Item templates that use the .NET Core
templating engine can be defined through a new extension point.</p>

<pre><code>&lt;Extension path="/MonoDevelop/Ide/ItemTemplates"&gt;
        &lt;Template
                id="Azure.Function.CSharp.BlobTrigger"
                _overrideName="Blob Trigger"
                path="Templates/Azure.Functions.Templates.nupkg" /&gt;
&lt;/Extension&gt;
</code></pre>

<p>Item templates are not currently supported in the New File dialog however there
is an API that can be used by extensions to create files from these templates.
This is currently used when adding a new Azure Function to a project.</p>

<h2>Bug Fixes</h2>

<p><strong>Missing child package dependencies in Solution window</strong></p>

<p>After creating a new ASP.NET Core project sometimes the package dependencies
shown in the Solution window under the SDK folder and the NuGet folder
could not be expanded to view the child dependencies.</p>

<p>The problem was that if the call to get the package dependencies
using MSBuild was cancelled this would result an empty list of depenencies
being cached. Since no package dependencies were returned the Solution window
would fallback to showing the package dependencies that were listed in the
project and a default top level SDK package dependency.</p>

<p><strong>MSBuild wildcards being expanded on saving a project</strong></p>

<p>Saving a project with a file wildcard that had a Link with
MSBuild item metadata, as shown below, would result in the wildcard
being removed and replaced with MSBuild items for each file included
by the wildcard.</p>

<pre><code>&lt;Compile Include="**\*.cs" Exclude="obj\**"&gt;
  &lt;Link&gt;%(RecursiveDir)%(Filename).cs&lt;/Link&gt;
&lt;/Compile&gt;
</code></pre>

<p>The problem was that the evaluated Link property value was being
compared with the unevaluated value, which did not match, resulting
in the wildcard being replaced with individual MSBuild items for
each file. Now if the property value contains a % character a comparison is
made against the evaluated value when checking if the project item
has changed.</p>

<p><strong>MSBuild items added for wildcards with link metadata on saving project</strong></p>

<p>A project containing the following MSBuild file wildcards would have
extra MSBuild items added when the project file was saved.</p>

<pre><code>&lt;ItemGroup&gt;
  &lt;Compile Include="..\**\*.cs"&gt;
    &lt;Link&gt;%(RecursiveDir)%(Filename)%(Extension)&lt;/Link&gt;
  &lt;/Compile&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>On saving the project Compile update items would be added for each
file included by the file wildcard.</p>

<pre><code>&lt;ItemGroup&gt;
  &lt;Compile Update="..\Test\Class1.cs"&gt;
    &lt;Link&gt;Class1.cs&lt;/Link&gt;
  &lt;/Compile&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>This problem is similar to the previous problem where the evaluated Link value was being
compared with the unevaluated value, which did not match, resulting
MSBuild update items being added to the project when it was saved. Now if the property
value contains a % character a comparison is made against the evaluated value when checking if
the project item has changed.</p>

<p><strong>TargetFramework changed on saving project</strong></p>

<p>Adding a file to an SDK style project that targeted Tizen 4.0 would
result in the TargetFramework changing from <strong>tizen40</strong> to <strong>tizen4.0</strong>.
Now the original framework identifier name is not modified and if
the version of the framework changes then the version will be
dotted or contain only numbers based on the format that was originally used
in the project file.</p>

<p><strong>ASP.NET Core file templates modifying project file</strong></p>

<p>Adding a new .cshtml file from a file template to an ASP.NET Core
project would modify the project file when it should not have been
modified. The problem was the files were added as None items whilst
.cshtml are Content items. The project file would contain the
following after adding a new cshtml file from a template:</p>

<pre><code>&lt;ItemGroup&gt;
  &lt;Content Remove="Views\Index.cshtml" /&gt;
&lt;/ItemGroup&gt;
&lt;ItemGroup&gt;
  &lt;None Include="Views\Index.cshtml" /&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>Another problem was that the Razor Page with view model file
template specifies a DependentUpon property so this was added to the
project file. This would result in the .cshtml and .cs files being nested whilst
the other .cshtml and .cs files created with the initial ASP.NET
Core project template were not nested. The project file would include
the following:</p>

<pre><code>&lt;ItemGroup&gt;
  &lt;Compile Update="Views\Index.cshtml.cs"&gt;
    &lt;DependentUpon&gt;Index.cshtml&lt;/DependentUpon&gt;
  &lt;/Compile&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>The .NET Core SDK does not indicate that .cshtml and .cs
files are dependent on each other so they are not currently nested
in the Solution window. New .cshtml files created from these updated
file templates will now not be nested in Solution window.</p>

<p><strong>XAML files not nested after editing project file in editor</strong></p>

<p>Adding a new content page with xaml to a .NET Standard project,
then excluding the files from the project, but not deleting it,
then editing the project file and commenting out the MSBuild remove
items, would then result in the xaml files not being nested in the
Solution window. The problem was that the MSBuild update item
for the .xaml.cs file, defined by the Xamarin.Forms default msbuild
items, was being removed from the MSBuild project in
memory. This MSBuild update item had the DependsOn property defined
so this information was lost on reloading the project. Now a check
is to made to ensure only update items that exist in the original
project file are removed.</p>

<p><strong>MSBuild item added for XAML file copied to a .NET Standard project</strong></p>

<p>When copying a .xaml file from a Portable Class Library project to a .NET Standard project
an MSBuild include item for the file would be added if the .xaml file did
not have the default metadata properties defined by Xamarin.Forms.
Now .NET Core projects opt-in to supporting items not being excluded if they
are missing MSBuild item metadata
which prevents an MSBuild include item added for the .xaml file.</p>

<p><strong>Duplicate XAML file build error when copying file to a .NET Standard project</strong></p>

<p>Copying a .xaml file from a Portable Class Library project to a .NET Standard project
would result an MSBuild item for the .xaml file to the project causing it to not
build due to a duplicate .xaml file.</p>

<p>Now when a xaml file is copied into a .NET Standard project, and it is missing
properties that are included in by an update wildcard,
an MSBuild item will not be added to the project.</p>

<p><strong>MSBuild remove item not added for .xaml.cs file</strong></p>

<p>With a .NET Core project, containing a single .xaml file and a
dependent .xaml.cs file, removing but not deleting the .xaml file
from the Solution window would not add an MSBuild remove item for
the .xaml.cs file even though it was removed from the Solution window.</p>

<p>The problem was that the Xamarin.Forms NuGet package includes a
Compile update item and only this was being considered when saving
the project file. The default file wildcard, that includes all .cs files,
provided by the .NET Core SDK was not considered. Only the last MSBuild item
associated with the .xaml.cs file was being considered. If there was another .cs
file in the project then the MSBuild remove item was added correctly. To avoid this
all MSBuild items associated with a project item are now considered.</p>

<p><strong>MSBuild remove item not removed on adding XAML file to project</strong></p>

<p>When an .xaml file was removed but not deleted, and Xamarin.Forms 2.5
used, which has default MSBuild items defined, on adding the .xaml
file back again to the project the EmbeddedResource
remove item was not removed from the project.</p>

<p>The problem was that the .xaml file was being added as a None item
since by default there is no build action specified for .xaml files.</p>

<p>Another problem was that the MSBuild remove
items, defined by Xamarin.Forms that remove all .xaml files from the default None
included by the .NET Core SDK, were being ignored since the file wildcards were not
found.</p>

<p>Also an msbuild item is no longer added for an existing xaml file when it is
added to the project. The Xamarin.Forms default msbuild items
for .xaml files have extra metadata which were not being added to
the file when it was added to the project from the file system.</p>

<p><strong>Update item added on renaming xaml.cs file</strong></p>

<p>When the .xaml and .xaml.cs file were renamed at the same time an
MSBuild update item was added for the .xaml.cs file even though the Xamarin
Forms NuGet package has a default MSBuild item that was the same as
the generated MSBuild update item.</p>

<p><strong>Argument null exception logged on opening .NET Core project</strong></p>

<p>Opening a .NET Core project would sometimes log an unhandled
ArgumentNullException. A file created event was sometimes raised before
the project had finished loading and could result in
a null set of items being used when checking if the
new file should be added to the project. This is now handled. The files being
created on project load are typically in the obj folder and would be
ignored by the default file wildcards.</p>

<pre><code>An unhandled exception has occured. Terminating Visual Studio? False
System.ArgumentNullException: Value cannot be null.
Parameter name: source
  at System.Linq.Enumerable.Where[TSource]
  in corefx/src/System.Linq/src/System/Linq/Where.cs:42
  at MonoDevelop.Projects.Project.OnFileCreatedExternally
in src/core/MonoDevelop.Core/MonoDevelop.Projects/Project.cs:4041
</code></pre>
]]></content>
  </entry>
  
</feed>
