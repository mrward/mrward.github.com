<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: MonoDevelop | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/monodevelop/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2014-07-06T20:51:18+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.1]]></title>
    <link href="http://lastexitcode.com/blog/2014/07/06/NuGetSupportInXamarinStudio5-1/"/>
    <updated>2014-07-06T10:48:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/07/06/NuGetSupportInXamarinStudio5-1</id>
    <content type="html"><![CDATA[<p><a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.1/xamarin.studio_5.1/">Xamarin Studio 5.1</a> was released last week and it includes some new features for the NuGet addin.</p>

<h2>New Features</h2>

<ul>
<li> Searching and installing a specific version of a NuGet package.</li>
<li> Support for NuGet package sources defined in a solution specific NuGet.Config file.</li>
</ul>


<p>More details on all the new features and changes in Xamarin Studio 5.1 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.1/xamarin.studio_5.1/">release notes</a>. Now let us take a look at the new NuGet features.</p>

<h2>Searching and installing a specific version of a NuGet package</h2>

<p>The Add Packages dialog can now be used to search and install a specific version of a NuGet package. You can search for all versions, a range of versions, or a specific version of a NuGet package. To do this the following search syntax is used:</p>

<pre><code>PackageId version:VersionNumber
</code></pre>

<p>The packages are shown in the Add Packages dialog with the most recent version at the top. At the top right of each package in the package list you will see the package version instead of the download count allowing you to find the particular version you want to install.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-1/AddPackagesDialogAllAutoMapperPackageVersions.png" title="Add Packages dialog - all AutoMapper package versions" alt="Add Packages dialog - all AutoMapper package versions"></p>

<p>To search for all versions of the AutoMapper NuGet package you can use an asterisk or leave the version number blank.</p>

<pre><code>AutoMapper version:*
</code></pre>

<p>To search for all the 2.1 versions of the AutoMapper NuGet package you can use the search:</p>

<pre><code>AutoMapper version:2.1
</code></pre>

<p>This will return a range of versions from 2.1.0 up to but not including 2.2.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-1/AddPackagesDialogAutoMapperPackageVersions21.png" title="Add Packages dialog - AutoMapper 2.1 package versions" alt="Add Packages dialog - AutoMapper 2.1 package versions"></p>

<p>The package id used in the search must match the id of the NuGet package otherwise no results will be returned.</p>

<p>Searching for package versions is also supported in the universal search at the top right of Xamarin Studio.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-1/PackageVersionSearchInUniversalSearch.png" title="Package version search in universal search" alt="Package version search in universal search"></p>

<h2>Package sources defined in a solution specific NuGet.Config file</h2>

<p> If package sources are defined in the solution's NuGet.Config file then these will be available in the Add Packages dialog when this solution is opened. The NuGet.Config file can be in the solution directory or in the .nuget subdirectory. An example NuGet.Config file is shown below.</p>

<pre><code>&lt;configuration&gt;
  &lt;packageSources&gt;
    &lt;add key="ASP.NET vNext - MyGet" value="https://www.myget.org/F/aspnetvnext/" /&gt;
  &lt;/packageSources&gt;
&lt;/configuration&gt;
</code></pre>

<p>When the solution is opened the package sources defined in the NuGet.config file are available in the drop down list at the top left of the Add Packages dialog.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-1/AddPackagesWithPackageSourceFromSolutionLevelNuGetConfig.png" title="Add Packages dialog - package sources from solution NuGet.Config" alt="Add Packages dialog - package sources from solution NuGet.config"></p>

<h2>Bug Fixes</h2>

<p><strong>Proxy credentials not being requested for a https package source.</strong></p>

<p>   Added a workaround to NuGet to handle Mono returning a different http response when proxy authentication is required.</p>

<p><strong>Web.config transforms not being applied when installing NuGet packages such as Nancy.Hosting.Aspnet.</strong></p>

<p>   Projects were not being recognised as web projects so transforms were only being applied to app.config files.</p>

<p><strong>XDT remove transforms (Xml Document Transformations) failing on Mono.</strong></p>

<p>   Modified the XDT library that ships with Xamarin Studio to handle different behaviour on Mono compared with Microsoft's .NET Framework. These transforms are used in the Microsoft.AspNet.Mvc NuGet package.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet PowerShell Console for Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2014/06/22/NuGetPowerShellConsoleForXamarinStudio/"/>
    <updated>2014-06-22T21:05:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/06/22/NuGetPowerShellConsoleForXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 5.0 now has <a href="http://lastexitcode.com/blog/2014/06/01/NuGetSupportInXamarinStudio5-0/">NuGet support built in</a>. There are also some experimental NuGet features that are available for Xamarin Studio 5.0 and MonoDevelop 5.0 as part of a separate <a href="https://github.com/mrward/monodevelop-nuget-extensions">NuGet extensions addin</a>. One such experimental feature is a new PowerShell console window that provides Xamarin Studio with the standard NuGet commands and also works on the Mac, not just Windows.</p>

<p><img src="/images/blog/NuGetPowerShellConsoleForXamarinStudio/PackageConsoleExtensionWindow.png" title="NuGet PowerShell Console Window" alt="NuGet PowerShell Console Window"></p>

<p>The new console window is powered by Pash. Pash is a open source reimplementation of PowerShell that works with Mono and runs on Windows, Mac and Linux. It was created by <a href="https://twitter.com/igor_moochnick">Igor Moochnick</a> and more recently development has been restarted by <a href="https://twitter.com/jaybazuzi">Jay Bazuzi</a>.</p>

<h2>PowerShell Console Features</h2>

<ul>
<li> Standard NuGet PowerShell commands available - Install-Package, Update-Package, Uninstall-Package, Get-Project and Get-Package</li>
<li> Integrates with the existing NuGet addin that ships with Xamarin Studio.</li>
<li> Cross platform - works on Windows and Mac.</li>
<li> Powered by <a href="https://github.com/Pash-Project/Pash">Pash</a>.</li>
<li> Partial implementation of the <a href="http://msdn.microsoft.com/en-us/library/envdte.aspx">Visual Studio object model EnvDTE</a>.</li>
</ul>


<h2>Limitations</h2>

<ul>
<li> PowerShell support is not fully implemented in Pash so PowerShell scripts may not fully work.</li>
<li> Xamarin Studio needs to be closed and re-opened before the console can be used. Otherwise the Xamarin Studio will crash.</li>
<li> Some standard parameters are missing from the NuGet commands (e.g. -verbose).</li>
<li> The NuGet commands are not fully up to date compared with the commands available in Visual Studio. One example is <strong>Update-Package -Reinstall</strong> which is currently not supported.</li>
</ul>


<h2>Installation</h2>

<p>The NuGet extensions addin is available from the <a href="http://addins.monodevelop.com/Project/Index/121">MonoDevelop addin repository</a>. To install the addin:</p>

<ul>
<li>Open the <strong>Add-in Manager</strong> dialog.</li>
<li>Select the <strong>Gallery</strong> tab.</li>
<li>Select <strong>Xamarin Studio Add-in Repository (Alpha channel)</strong> from the drop down list.</li>
<li>Expand <strong>IDE extensions</strong>.</li>
<li>Select <strong>NuGet Package Management Extensions</strong>.</li>
<li>Click the <strong>Refresh</strong> button if the addin is not visible.</li>
<li>Click <strong>Install...</strong> to install the addin.</li>
</ul>


<p>Please close and re-open Xamarin Studio before trying to open the PowerShell Console window otherwise Xamarin Studio will crash.</p>

<h2>Using the PowerShell Console</h2>

<p>To open the console window, from the <strong>View</strong> menu select <strong>Pads</strong> and then select <strong>Package Console Extension</strong>.</p>

<p><img src="/images/blog/NuGetPowerShellConsoleForXamarinStudio/ViewPackageConsoleExtensionPadMenuItem.png" title="View - Package Console Extension menu item" alt="View - Package Console Extension menu item"></p>

<p>The top of the console window has drop downs allowing you to choose a different default package source or default project. At the top right there is a Clear Console button which will clear all the text from the console.</p>

<p><img src="/images/blog/NuGetPowerShellConsoleForXamarinStudio/PackageConsoleExtensionWindowInstallingJsonNet.png" title="PowerShell Console Window - Installing Json.NET" alt="PowerShell Console Window - Installing Json.NET"></p>

<p>The standard <a href="http://docs.nuget.org/docs/reference/package-manager-console-powershell-reference">NuGet PowerShell commands</a> are available from the console window:</p>

<ul>
<li>Install-Package</li>
<li>Uninstall-Package</li>
<li>Update-Package</li>
<li>Get-Package</li>
<li>Get-Project</li>
</ul>


<p>There is also a partial implementation of the <a href="http://msdn.microsoft.com/en-us/library/envdte.aspx">Visual Studio object model (EnvDTE)</a> which you can use from the console and from PowerShell scripts inside a NuGet package. Currently the Solution object and the CodeModel is not fully implemented when compared with SharpDevelop.</p>

<p><img src="/images/blog/NuGetPowerShellConsoleForXamarinStudio/PackageConsoleExtensionWindowUsingEnvDTEProjectModel.png" title="PowerShell Console Window - Using EnvDTE project model" alt="PowerShell Console Window - Using EnvDTE project model"></p>

<p>When you install a NuGet package from the console and the NuGet package has an <strong>init.ps1</strong> or an <strong>install.ps1</strong> PowerShell script then these scripts will be run. Similarly on uninstalling a NuGet package if it contains an <strong>uninstall.ps1</strong> script then this will be run in the console. However there are some areas of PowerShell that are not fully implemented in Pash so the script may well fail. The failure will be logged in the console window but it will not prevent the package from being installed or uninstalled.</p>

<p>That concludes the introduction to the experimental NuGet Package Console in Xamarin Studio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.0]]></title>
    <link href="http://lastexitcode.com/blog/2014/06/01/NuGetSupportInXamarinStudio5-0/"/>
    <updated>2014-06-01T18:25:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/06/01/NuGetSupportInXamarinStudio5-0</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 5.0 was released last week as part of the <a href="http://blog.xamarin.com/announcing-xamarin-3/">Xamarin 3.0 release</a> and it now has built-in support for NuGet. There is no need to install the NuGet addin separately into Xamarin Studio 5.0 or MonoDevelop 5.0 since it is now "in the box".</p>

<h2>New Features</h2>

<ul>
<li> Re-designed user interface.</li>
<li> More integrated with the Solution window.</li>
<li> Supports <a href="http://docs.nuget.org/docs/reference/search-syntax">NuGet's search syntax</a>.</li>
<li> Background package installation.</li>
<li> Integrates with Xamarin Studio's unified search.</li>
<li> Support for NuGet packages in project templates.</li>
<li> Package restore on opening a solution.</li>
<li> Integrates with Xamarin Studio's credential provider to provide proxy and package source authentication.</li>
</ul>


<p>So let us a look at these features in more detail by looking at how to use the NuGet addin in Xamarin Studio 5.0.</p>

<h2>Adding NuGet Packages</h2>

<p>To add a NuGet package we need to open the <strong>Add Packages</strong> dialog. This can be done in the following ways:</p>

<ul>
<li>From the <strong>Project</strong> menu select <strong>Add Packages</strong>. The project will need to be selected in the <strong>Solution</strong> window.</li>
<li>From the <strong>Solution</strong> window, right click the project and select <strong>Add - Add Packages</strong>.</li>
</ul>


<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesMenuOptionSolutionWindow.png" title="Solution Window right click Add Packages menu" alt="Solution Window right click Add Packages menu"></p>

<ul>
<li>From Xamarin Studio's unified search, available in the top right of the main window, enter the name of the package you would like to search for, then select <strong>Search Packages</strong>.</li>
</ul>


<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/SearchPackagesUsingUnifiedSearch.png" title="Search packages using unified search" alt="Search packages using unified search"></p>

<ul>
<li>Double clicking the <strong>Packages</strong> folder in the <strong>Solution</strong> window will also open the Add Packages dialog (note the Packages folder is only displayed if you have a NuGet package installed in your project).</li>
</ul>


<p>On opening the Add Packages dialog you will see a re-designed user interface.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesDialog.png" title="Add Packages dialog" alt="Add Packages dialog"></p>

<p>If a NuGet package has an associated image then it will now be displayed in the list of packages.</p>

<p>The search text box at the top right of the dialog will now search for packages as you type.</p>

<p>The package source combo box at the top left of the dialog now includes a new <strong>Configure Sources</strong> item which allows you to quickly switch to the configured package sources in preferences and back again to the Add Packages dialog.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesDialogConfigureSources.png" title="Configuring sources from Add Packages dialog" alt="Configuring sources from Add Packages dialog"></p>

<p>The list of packages now has infinite scroll support. As you scroll down the list new packages will be retrieved from the package source and displayed. Previously you had to click a button to move to the next page.</p>

<p>To install a NuGet package in the Add Packages dialog you can do one of the following:</p>

<ul>
<li>Select a package and double click it.</li>
<li>Select a package and press the enter key.</li>
<li>Select a package and press the <strong>Add Package</strong> button.</li>
</ul>


<p>To install two or more NuGet packages you can click the check box next to the package and then select the <strong>Add Packages</strong> button.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesDialogTwoPackagesChecked.png" title="Two packages checked in Add Packages dialog" alt="Two packages checked in Add Packages dialog"></p>

<p>On adding the NuGet package the Add Packages dialog will close and the package installation will complete in the background. You will see status messages appear in the status bar at top of the main window as the installation progresses. The screenshots below show the status messages that are displayed when the NUnit NuGet package is installed.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/AddNUnitPackageStatusBarMessage.png" title="Adding NUnit package status bar message" alt="Adding NUnit package status bar message"></p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/NUnitPackageAddedSuccessfullyStatusBarMessage.png" title="NUnit package added successfully status bar message" alt="NUnit package added successfully status bar message"></p>

<p>More detailed information about the installation can be seen in the <strong>Package Console</strong> window.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/NUnitPackageAddedPackageConsole.png" title="NUnit package added messages in Package Console" alt="NUnit package added messages in Package Console"></p>

<p>The Package Console can be opened by clicking on a package status message in the status bar or from the <strong>View</strong> menu by selecting <strong>Pads - Package Console</strong>. If there is an error when installing a NuGet package then the Package Console will automatically open to show more information about the error.</p>

<p>On adding the first NuGet package to a project a <strong>Packages</strong> folder will be displayed in the Solution window.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowPackagesFolder.png" title="Solution window - Packages folder" alt="Solution window - Packages folder"></p>

<p>Any assembly references that a NuGet package adds to your project will be displayed in
the <strong>From Packages</strong> folder inside <strong>References</strong>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowFromPackagesFolder.png" title="Solution window - From Packages folder" alt="Solution window - From Packages folder"></p>

<p>Whilst the NuGet package is being installed the package id text will be highlighted.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowPackagesBeingAdded.png" title="Solution window - packages being added" alt="Solution window - packages being added"></p>

<p>After the NuGet package is installed the text will be changed to black and a status message will be shown in the status bar.</p>

<h2>Searching for Packages</h2>

<p>The Add Packages dialog now supports the <a href="http://docs.nuget.org/docs/reference/search-syntax">extended NuGet search syntax</a>. Note that the NuGet package source will need to support this syntax. The main NuGet.org package source supports this search syntax.</p>

<p>So you can now make your search more specific by using one of the special tags, such as id, packageid, tags, author or owner. Some example searches are shown below:</p>

<pre><code>id:NUnit
packageid:Xamarin.Forms
tags:typescript
owner:xamarin
author:xamarin
</code></pre>

<h2>Removing NuGet Packages</h2>

<p>You can remove a NuGet package from the Solution window. Expand the <strong>Packages</strong> folder for your project, select the package, right click and select <strong>Remove</strong>, or press the delete key.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowPackageBeingRemoved.png" title="Solution window - remove package menu" alt="Solution window - package remove menu"></p>

<p>The package will then be uninstalled in the background. Status information will appear in the status bar and more detailed information will be shown in the Package Console window.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/RemovingNUnitPackageStatusBarMessage.png" title="Removing package status bar message" alt="Removing package status bar message"></p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/NUnitPackageRemovedSuccessfullyStatusBarMessage.png" title="Package removed status bar message" alt="Package removed status bar message"></p>

<h2>Updating NuGet Packages</h2>

<p>You can update an individual NuGet package by selecting it in the <strong>Solution</strong> window, right clicking and selecting <strong>Update</strong>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowUpdatePackageMenu.png" title="Solution window - update package menu" alt="Solution window update package menu"></p>

<p>You can update all the packages in a project by right clicking the <strong>Packages</strong> folder and selecting <strong>Update</strong>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowUpdateAllProjectPackagesMenu.png" title="Solution window - update all packages in project menu" alt="Solution window update all packages in project menu"></p>

<p>To update all the packages in the solution, either right click the solution in the <strong>Solution</strong> window and select <strong>Update Packages</strong>, or from the <strong>Project</strong> menu select <strong>Update Packages</strong>.</p>

<p>As with adding and removing a NuGet package you will see status bar messages as the update progresses and detailed information in the Package Console window.</p>

<h2>Restoring NuGet Packages</h2>

<p>By default NuGet packages will be automatically restored when a solution is opened.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/RestorePackagesStatusBarMessage.png" title="Packages being restored status bar message" alt="Packages being restored status bar message"></p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/PackagesRestoredSuccessfullyStatusBarMessage.png" title="Packages restored status bar message" alt="Packages restored status bar message"></p>

<p>You can disable this by going into preferences and unchecking <strong>Automatically restore packages when opening a solution</strong>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/PreferencesAutomaticPackageRestore.png" title="Preferences - automatic package restore" alt="Preferences - automatic package restore"></p>

<p>With automatic package restore disabled you can manually restore NuGet packages in the following ways:</p>

<ul>
<li>Right click the <strong>Packages</strong> folder in the Solution window and select <strong>Restore</strong>.</li>
<li>Right click the solution and select <strong>Restore Packages</strong>.</li>
<li>From the <strong>Project</strong> menu select <strong>Restore Packages</strong>.</li>
</ul>


<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowRestorePackagesMenu.png" title="Solution window - restore packages menu" alt="Solution window - restore packages menu"></p>

<p>The status bar will be updated with information on the progress of the restore. More detailed information can be seen in the Package Console window.</p>

<h2>NuGet Packages in Project Templates</h2>

<p>You can now have a project template that will install NuGet packages. To do this you add a <strong>Packages</strong> element inside the <strong>Project</strong> element of the project template.</p>

<pre><code>&lt;Packages&gt;
    &lt;Package id="NUnit" /&gt;
    &lt;Package id="jQuery" version="1.7.1" /&gt;
&lt;/Packages&gt;
</code></pre>

<p>You can specify an exact version for the NuGet package. If the version is not specified then the latest version of the NuGet package will be installed.</p>

<p>By default Xamarin Studio will look for the NuGet packages from the main NuGet.org package source. To use your own package source instead you can create an addin and define the package source in its .addin.xml file. Inside your .addin.xml file you can add an <em>*Extension</em> element which supports both online NuGet package sources and local directory package sources.</p>

<p>To define an online NuGet package source you can use the <strong>url</strong> attribute in your .addin.xml file:</p>

<pre><code>&lt;Extension path = "/MonoDevelop/Ide/ProjectTemplatePackageRepositories"&gt;
    &lt;PackageRepository url="https://mynugetfeed.nget/packages" /&gt;
&lt;/Extension&gt;
</code></pre>

<p>If you want your addin to work offline then you can include the NuGet packages with your addin in a subdirectory and use the following extension in your .addin.xml:</p>

<pre><code>&lt;Extension path = "/MonoDevelop/Ide/ProjectTemplatePackageRepositories"&gt;
    &lt;PackageRepository path="packages" /&gt;
&lt;/Extension&gt;
</code></pre>

<p>The <strong>path</strong> attribute here should contain the directory relative to where the addin is installed.</p>

<h2>Package Source and Proxy Authentication</h2>

<p>If a NuGet package source or a proxy needs authentication then Xamarin Studio will prompt for credentials.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/AddPackagesProxyCredentialPrompt.png" title="Proxy credentials dialog prompt" alt="Proxy credentials dialog prompt"></p>

<p>Please note that there is a bug that currently prevents proxy authentication with package sources that use https which will be fixed in the next release of Xamarin Studio.</p>

<h2>Configuring NuGet Package Sources</h2>

<p>NuGet package sources can be configured in preferences.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/PreferencesAddPackageSource.png" title="Preferences - adding package source" alt="Preferences - adding package source"></p>

<p>A new feature here is the ability to specify a username and password for a package source that requires authentication. The username and passwords are encrypted and stored in the NuGet.config file in the same way that NuGet.exe will if you use it on the command line.</p>

<p>That concludes our look at the new NuGet features in Xamarin Studio and MonoDevelop 5.0</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop NuGet Addin 0.9 Released]]></title>
    <link href="http://lastexitcode.com/blog/2014/04/13/MonoDevelopNuGetAddin0-9Released/"/>
    <updated>2014-04-13T14:51:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/04/13/MonoDevelopNuGetAddin0-9Released</id>
    <content type="html"><![CDATA[<p>A new version of the NuGet addin for Xamarin Studio and MonoDevelop has been released.</p>

<h2>New Features</h2>

<p>The main change is to include <a href="http://docs.nuget.org/docs/release-notes/nuget-2.8.1">NuGet 2.8.1</a> which adds support for Windows Phone 8.1 projects.
Also some of the newer NuGet packages, such as Microsoft.Bcl.Immutable 1.1.20-beta, which the <a href="https://www.nuget.org/packages/Microsoft.CodeAnalysis">Roslyn NuGet packages</a> depend on, will not install unless NuGet 2.8.1 is being used.</p>

<p>For a detailed look at the changes please read the <a href="/projects/MonoDevelopNuGetAddin/Releases/0.9/">release note</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MonoDevelop NuGet Addin 0.8 Released]]></title>
    <link href="http://lastexitcode.com/blog/2013/12/15/MonoDevelopNuGetAddin0-8Released/"/>
    <updated>2013-12-15T18:22:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2013/12/15/MonoDevelopNuGetAddin0-8Released</id>
    <content type="html"><![CDATA[<p>A new version of the NuGet addin for Xamarin Studio and MonoDevelop has been released.</p>

<h2>New Features</h2>

<p>The main change is support for <a href="http://docs.nuget.org/docs/release-notes/nuget-2.7.2">NuGet 2.7.2</a> so you can now add NuGet packages, that include Portable Class Libraries (PCLs), to projects that target MonoAndroid.</p>

<p>For a detailed look at the changes please read the <a href="/projects/MonoDevelopNuGetAddin/Releases/0.8/">release note</a>.</p>
]]></content>
  </entry>
  
</feed>
