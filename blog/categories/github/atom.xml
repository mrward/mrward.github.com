<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: github | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/github/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2013-08-26T13:29:56+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Cloning a CodePlex Repository over to GitHub]]></title>
    <link href="http://lastexitcode.com/blog/2012/09/26/CloneCodePlexRepositoryToGitHub/"/>
    <updated>2012-09-26T16:36:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2012/09/26/CloneCodePlexRepositoryToGitHub</id>
    <content type="html"><![CDATA[<p>How do you clone a CodePlex Git repository over to GitHub?</p>

<p>Here we take a look at how to clone the<a href="http://entityframework.codeplex.com/"> Entity Framework Git repository</a>, which is available on CodePlex, over to GitHub. The goal is to be able to take new commits from the original CodePlex Git repository and update the repository being hosted on GitHub.</p>

<ol>
<li><p>Create a repository on GitHub.</p>

<p> Do not initialise the repository with a readme file just create the repository. We are going to call this repository entityframework-sharpdevelop since this will be a port of the Entity Framework which will work with SharpDevelop.</p></li>
<li><p>Clone the CodePlex repository to your local machine.</p>

<p> Using your favourite Git client clone the Entity Framework repository at CodePlex to your local machine.</p>

<pre><code> git clone https://git01.codeplex.com/entityframework entityframework
</code></pre></li>
<li><p>Configure Git Remotes</p>

<p> Our goal is to have a setup similar to the following.</p>

<pre><code> git remote -v

 origin  git@github.com:mrward/entityframework-sharpdevelop.git (fetch)
 origin  git@github.com:mrward/entityframework-sharpdevelop.git (push)
 upstream        https://git01.codeplex.com/entityframework (fetch)
 upstream        https://git01.codeplex.com/entityframework (push)
</code></pre>

<p> We want an upstream remote that points to the original Entity Framework repository on CodePlex. We also want an origin remote that points our GitHub repository</p>

<p> First we create the upstream remote by renaming the origin remote. From inside the entityframework folder we run the following command.</p>

<pre><code> git remote rename origin upstream
</code></pre>

<p> Now we add the new origin remote.</p>

<pre><code> git remote add origin git@github.com:mrward/entityframework-sharpdevelop.git
</code></pre>

<p> Run <strong>git remote -v</strong> to check that the configuration is correct.</p></li>
<li><p>Push the code to GitHub</p>

<pre><code> git push -u origin master
</code></pre></li>
<li><p>Get the latest Entity Framework Commits into GitHub</p>

<p> Now when you want to get the latest Entity Framework commits from CodePlex you can run the following commands to merge these commits into your local master branch.</p>

<pre><code> git fetch upstream
 git merge upstream/master
</code></pre>

<p> Then you can push the changes up to GitHub.</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a GitHub hosted blog with Octopress]]></title>
    <link href="http://lastexitcode.com/blog/2012/09/26/CreatingAGitHubHostedBlogWithOctopress/"/>
    <updated>2012-09-26T13:55:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2012/09/26/CreatingAGitHubHostedBlogWithOctopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> is a blogging framework created by Brandon Mathis. Octopress has great documentation on how to setup Octopress on a <a href="http://pages.github.com/">GitHub hosted blog</a> which this guide is not trying to replace. The following guide is a simple overview of how to setup Octopress with Windows being used to create the blog posts and push them to GitHub.</p>

<h2>Prerequisites</h2>

<ol>
<li>You have GitHub account.</li>
<li>You have a Git client, such as Tortoise Git, installed.</li>
</ol>


<h2>Software Versions</h2>

<p>This guide is based on the using the following software:</p>

<ul>
<li>Octopress 2.0</li>
<li>Windows 7 (client machine)</li>
<li>Ruby 1.9.3</li>
</ul>


<h2>How to setup a GitHub based blog with Octopress</h2>

<ol>
<li>Download and install Ruby 1.9.3 from <a href="http://rubyinstaller.org/downloads/">http://rubyinstaller.org/downloads/</a></li>
<li><p>Add ruby to your path</p>

<pre><code> PATH=c:\ruby193\bin
</code></pre></li>
<li><p>Download the <a href="https://GitHub.com/oneclick/rubyinstaller/wiki/Development-Kit">Ruby devkit</a> from <a href="http://rubyinstaller.org/downloads/">http://rubyinstaller.org/downloads/</a></p>

<p> Extract to c:\RubyDevKit</p>

<p> Change into this folder and run</p>

<pre><code> ruby dk.rb init
 ruby dk.rb install
</code></pre>

<p> If you do not install the Ruby devkit then you will get an error when running setting up Octopress and running gem in step 5):</p>

<pre><code> Gem::InstallError: The 'posix-spawn' native gem requires installed build tools.
</code></pre></li>
<li><p>Clone octopress</p>

<pre><code> git://GitHub.com/imathis/octopress.git octopress
</code></pre></li>
<li><p>Setup Octopress</p>

<p> Open a command prompt in the octopress folder. Run the following commands</p>

<pre><code> gem install bundler
 bundle install
 rake install
 rake generate
 rake preview
</code></pre>

<p> Then open a browser and go to <a href="http://localhost:4000">http://localhost:4000</a> to view your blog.</p></li>
<li><p>Create a GitHub repository for your blog</p>

<p> See the <a href="http://octopress.org/docs/deploying/github/">Octopress guide</a>.</p>

<p> Create a new repository in GitHub that has your GitHub username followed by .github.com (e.g. mrward.github.com).</p></li>
<li><p>Deploy your blog to GitHub</p>

<p> From the octopress folder run</p>

<pre><code> rake setup_GitHub_pages
 rake generate
 rake deploy
</code></pre>

<p> The deploy command will cause your blog to be pushed to the master branch of your GitHub repository. Your blog will then be published and accessible via http://username.github.com (where username is replaced with your GitHub username).</p>

<p> Then you will need to commit your changes made in the source branch and push them to GitHub.</p>

<p> You now have a repository on GitHub containing your blog. It will have two branches master and source. The master branch contains your blog web pages. The source branch contains the octopress files and your original blog posts. On your local machine the master branch will exist in the _deploy folder. The octopress folder will be tracking the source branch.</p></li>
<li><p>Configure your blog</p>

<p> You will want to configure various settings, such as google analytics, for your blog. The <a href="http://octopress.org/docs/configuring/">documentation on the Octopress site</a> has the full details on how to configure everything.</p></li>
<li><p>Creating blog posts</p>

<p> From the Octopress folder run:</p>

<pre><code> rake new_post["Name of your post"]
</code></pre>

<p> This will generate a file in the source\_posts folder which you can edit.</p>

<p> To generate your blog and preview it in the browser run</p>

<pre><code> rake generate
 rake preview
</code></pre>

<p> The generate command will regenerate your blog web pages in the public folder. You will need to copy these files to the _deploy folder. The final step is then to commit and push your changes to GitHub. You will want to commit the changes made in the Octopress folder (i.e. the source branch) and also your blog pages in the _deploy folder (i.e. the master branch). You can use the rake deploy command to automate this copying of pages, committing and pushing your blog web pages to GitHub but if you want more control over the commit message then you can do this final set of steps yourself and commit the pages using your favourite Git client.</p></li>
</ol>

]]></content>
  </entry>
  
</feed>
