<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: xamarin | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/xamarin/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2015-01-18T13:53:02+00:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.7]]></title>
    <link href="http://lastexitcode.com/blog/2015/01/18/NuGetSupportInXamarinStudio5-7/"/>
    <updated>2015-01-18T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2015/01/18/NuGetSupportInXamarinStudio5-7</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet menus renamed to make them easier to discover</li>
<li> Solution window icons made consistent</li>
<li> Fix build errors after MSBuild target restored for package</li>
<li> Fix types imported by MSBuild target not recognised after NuGet package installed</li>
<li> Fix Solution window cannot be opened when access to NuGet.Config is denied</li>
<li> Fix updating all packages not updating dependencies</li>
<li> Fix pre-release NuGet package being downgraded on update</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.7 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.7/xamarin.studio_5.7/">release notes</a>.</p>

<h2>NuGet menus renamed</h2>

<p>The menus have been changed so they now include the word NuGet to make them easier to discover.</p>

<h3>Project menu</h3>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/ProjectMenuNuGetMenuItems.png" title="&lsquo;NuGet menu items in the main Project menu&rsquo; &lsquo;NuGet menu items in the main Project menu&rsquo; &lsquo;&rsquo;" ></p>

<h3>Solution context menu</h3>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/SolutionContextMenuNuGetMenuItems.png" title="&lsquo;NuGet menu items in the Solution context menu&rsquo; &lsquo;NuGet menu items in the Solution context menu&rsquo; &lsquo;&rsquo;" ></p>

<h3>Project context menu</h3>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/ProjectContextMenuNuGetMenuItems.png" title="&lsquo;NuGet menu items in the Project context menu&rsquo; &lsquo;NuGet menu items in the Project context menu&rsquo; &lsquo;&rsquo;" ></p>

<h2>Solution Window</h2>

<p>The warning icon used in the Solution window has been changed so it is consistent with other Solution window items.</p>

<h3>Package not restored</h3>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/SolutionWindowNuGetPackageMissing.png" title="&lsquo;Solution Window &ndash; NuGet package not restored&rsquo; &lsquo;Solution Window &ndash; NuGet package not restored&rsquo;" ></p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/SolutionWindowNuGetPackageMissingWithTooltip.png" title="&lsquo;Solution Window &ndash; NuGet package not restored with tooltip&rsquo; &lsquo;Solution Window &ndash; NuGet package not restored with tooltip&rsquo;" ></p>

<p>A new warning icon is used for packages that are not restored, the text is greyed out and hovering over the warning icon shows information about the warning.</p>

<h3>Package installing</h3>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/SolutionWindowNuGetPackageInstalling.png" title="&lsquo;Solution Window &ndash; NuGet package installing&rsquo; &lsquo;Solution Window &ndash; NuGet package installing&rsquo;" ></p>

<p>When a package is being installed the text is greyed out to indicate that the package is not currently available in the project and the text shows (installing) to distinguish between a package being installed and a package that is not restored.</p>

<h3>Package needs retargeting</h3>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-7/SolutionWindowNuGetPackageNeedsRetargetingWithTooltip.png" title="&lsquo;Solution Window &ndash; NuGet package needs retargeting&rsquo; &lsquo;Solution Window &ndash; NuGet package needs retargeting&rsquo;" ></p>

<p>A new warning icon is used for packages that need retargeting. The package id text has changed to black text instead of orange. Hovering over warning icon shows a message that the package needs retargeting.</p>

<h2>Bug Fixes</h2>

<p><strong>Build errors after MSBuild target restored for package</strong></p>

<p>If a NuGet package had an MSBuild target that added extra references to the project then on restoring the
NuGet package those references were still unavailable and the build would still fail.</p>

<p>This problem occurs with the MonoGame.Binaries NuGet package. The MonoGame.Binaries NuGet package has a custom MSBuild .targets file that adds extra references:</p>

<pre><code>&lt;Project ToolsVersion="4.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;
  &lt;ItemGroup&gt;
    &lt;Reference Include="MonoGame.Framework"&gt;
      &lt;HintPath&gt;$(MSBuildThisFileDirectory)\MonoGame.Framework.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="Tao.Sdl"&gt;
      &lt;HintPath&gt;$(MSBuildThisFileDirectory)\Tao.Sdl.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
    &lt;Reference Include="OpenTK"&gt;
      &lt;HintPath&gt;$(MSBuildThisFileDirectory)\OpenTK.dll&lt;/HintPath&gt;
    &lt;/Reference&gt;
  &lt;/ItemGroup&gt;
&lt;/Project&gt;
</code></pre>

<p>If the MonoGame.Binaries NuGet package is not available on opening the
project in Xamarin Studio the project will fail to build after
restoring the NuGet package since the references in the MSBuild targets file were not being refreshed.</p>

<p>Now after a NuGet package restore the MSBuild host used by Xamarin Studio is
refreshed which allows the references in the MSBuild targets file to be found and the project to compile without any build errors.</p>

<p><strong>Types imported by MSBuild target not recognised after NuGet package installed</strong></p>

<p>If a NuGet package had an MSBuild target that added extra references to the project then on installing the
NuGet package the types from those references were still unavailable to Xamarin Studio and would be highlighted in red
in the text editor. To fix this the solution had to be closed and re-opened. This problem occurs with the MonoGame.Binaries NuGet package.</p>

<p>Now after a NuGet package is installed and it contains a MSBuild targets
file then Xamarin Studio&rsquo;s type system will be refreshed for that project. The
types will then be known by Xamarin Studio and no longer be highlighted in red in the text editor.</p>

<p><strong>Solution window cannot be opened when access to NuGet.Config is denied</strong></p>

<p>If the NuGet directory containing the NuGet.Config file cannot be created or read by NuGet then an exception is thrown. This exception was not being handled by Xamarin Studio and would prevent the
solution window from opening.</p>

<p>Now if there is any error creating this
directory, or trying to load the NuGet.Config file, then the exception is caught which allows the Solution window to open. If the NuGet directory containing the NuGet.Config file cannot be created then it will not be possible to use NuGet in Xamarin Studio but it will not prevent the solution pad from being used.</p>

<p><strong>Updating all packages not updating dependencies</strong></p>

<p>Updating NuGet packages for the entire solution would not install the Xamarin.Android.Support.v13 NuGet package which was added as a new dependency to the Xamarin.Android.Support.v4 NuGet package.</p>

<p>The problem was that the NuGet package update was not configured to update any
NuGet package dependencies when updating all packages in the solution.
Updating all packages in the project or the NuGet package individually
would update package dependencies correctly.</p>

<p>Note that this fix has introduced a bug where Xamarin Studio will show updates as available even though the updates have just been installed for the solution. This new bug should be fixed in Xamarin Studio 5.8.</p>

<p><strong>Pre-release NuGet package being downgraded on update</strong></p>

<p>When a pre-release NuGet package was installed that was newer than the latest stable NuGet package available then updating the package would install the stable version even though it was a lower version. Now an explicit check is made to ensure that an older NuGet package is not being installed.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Portable Class Libraries for Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2014/11/16/InstallingPortableClassLibrariesForXamarinStudio/"/>
    <updated>2014-11-16T10:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2014/11/16/InstallingPortableClassLibrariesForXamarinStudio</id>
    <content type="html"><![CDATA[<p>In order to use Portable Class Libraries (PCLs) with Xamarin Studio you need to have the following installed:</p>

<ul>
<li>Portable Class Library Reference Assemblies.</li>
<li>Portable Class Library MSBuild targets.</li>
<li>Xamarin&rsquo;s Portable Class Library Profiles.</li>
</ul>


<p>If you do not all of the above installed then you may run into the following problems when using Xamarin Studio.</p>

<ol>
<li>Unable to create a Portable Library project since the project template is not available.</li>
<li><p>Unable to install a NuGet package, such as Json.NET, that contains PCL assemblies into an Android or iOS project. Example error message below:</p>

<p>Could not install package &lsquo;Newtonsoft.Json 6.0.6&rsquo;. You are trying to install this package into a project that targets &lsquo;MonoAndroid,Version=v4.4&rsquo;, but the package does not contain any assembly references or content files that are compatible with that framework. For more information, contact the package author.</p></li>
</ol>


<p>On the Mac the Portable Class Libraries for Mono 3.10.0 are installed into the directory:</p>

<pre><code>/Library/Frameworks/Mono.framework/Versions/3.10.0/lib/mono/xbuild-frameworks/.NETPortable
</code></pre>

<p>On Windows the Portable Class Libraries are installed into the directory:</p>

<pre><code>C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETPortable
</code></pre>

<p>So let us take a look at how to install everything required to get PCLs fully supported within Xamarin Studio.</p>

<h2>Mac &ndash; Installing Portable Class Libraries</h2>

<p>The Portable Class Libraries are included with the <a href="http://www.mono-project.com/download/">Mono Development Kit (MDK)</a> but not with the Mono Runtime Environment (MRE). If you are installing Mono yourself instead of using Xamarin&rsquo;s Universal Installer then you will want to install the MDK instead of the MRE. The MDK includes the MRE as well as extra tools, libraries and the .NET Portable Class Library profiles.</p>

<p>If Mono is updated from within Xamarin Studio using <strong>Check for updates</strong> then the MDK should be installed.</p>

<h2>Windows &ndash; Installing Portable Class Libraries</h2>

<p>Xamarin Studio on Windows uses Microsoft&rsquo;s .NET Framework instead of Mono so the Portable Class Libraries need to be installed separately. To install the Portable Class Libraries on Windows you have three options:</p>

<ol>
<li> Install Visual Studio 2013 (full or <a href="http://www.microsoft.com/en-us/download/details.aspx?id=43733">Express version</a>). Update 2 or above is required.</li>
<li> Install the <a href="https://visualstudiogallery.msdn.microsoft.com/b0e0b5e9-e138-410b-ad10-00cb3caf4981/">Portable Library Tools</a> and the <a href="http://www.microsoft.com/en-us/download/details.aspx?id=40727">Portable Library Reference Assemblies 4.6</a>.</li>
<li> Install the <a href="https://visualstudiogallery.msdn.microsoft.com/b0e0b5e9-e138-410b-ad10-00cb3caf4981/">Portable Library Tools</a> and copy the .NETPortable directory from Mono over to Windows.</li>
</ol>


<p>If you do not want to install Visual Studio 2013 then you should look at options 2 or 3.</p>

<p>One problem with option 2 is that not all the .NET Portable profiles, such as Profile 259, will be installed. The full list of what .NET Portable profiles are installed by each of the installers listed above is available from the <a href="/projects/NuGet/PortableProfiles/">.NET Portable Profiles page</a></p>

<p>Let us take a look in more detail at the option 2 since this has a few manual steps.</p>

<p><strong>Windows &ndash; Installing the Portable Library Tools and the Portable Library Reference Assemblies 4.6</strong></p>

<p>Before you start make sure Xamarin Studio is not running.</p>

<p>Download the <a href="https://visualstudiogallery.msdn.microsoft.com/b0e0b5e9-e138-410b-ad10-00cb3caf4981/">Portable Library Tools</a>.</p>

<p>To install the Portable Library Tools open a command prompt where PortableLibraryTools.exe was downloaded and run:</p>

<pre><code>PortableLibraryTools /buildmachine
</code></pre>

<p>Download the <a href="http://www.microsoft.com/en-us/download/details.aspx?id=40727">Portable Library Reference Assemblies 4.6</a> and run the NetFx_PortableLibraryReferenceAssemblies46.msi installer. This will install a PortableReferenceAssemblies.zip file into the directory:</p>

<pre><code>C:\Program Files (x86)\Microsoft .NET Portable Library Reference Assemblies 4.6
</code></pre>

<p>This PortableReferenceAssemblies.zip file contains three directories (4.0, 4.5 and 4.6) which need to be extracted and copied into the PCLs directory:</p>

<pre><code> C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETPortable
</code></pre>

<p>The PortableReferenceAssemblies.zip file contains files which already exist in the above folder and you should replace the existing files with the new versions from the .zip file.</p>

<p>If you installed Xamarin Studio before you installed the Portable Class Libraries you will now need to reinstall the Xamarin PCL profiles. The Xamarin PCL profiles will only be installed if the Portable Class Libraries were already installed. The simplest way to do this is to find <strong>Xamarin</strong> in the Control Panel&rsquo;s <strong>Programs and Features</strong>, right click it and select <strong>Repair</strong>.</p>

<p><img src="/images/blog/InstallingPortableClassLibrariesForXamarinStudio/AddRemoveProgramsRepairXamarinInstall.png" title="&lsquo;Repairing Xamarin in Programs and Features&rsquo; &lsquo;Repairing Xamarin in Programs and Features&rsquo;" ></p>

<p>This will add a set of Xamarin .xml files into the profiles that are compatible with the Xamarin frameworks. For example looking at the Profile78 directory we see:</p>

<pre><code>C:\Program Files (x86)\Reference Assemblies\Microsoft\Framework\.NETPortable\v4.5\Profile\Profile78\SupportedFrameworks
</code></pre>

<ul>
<li>.NET Framework 4.5.xml</li>
<li>Windows 8.xml</li>
<li>Windows Phone Silverlight 8.xml</li>
<li>Xamarin.Android.xml</li>
<li>Xamarin.iOS.xml</li>
</ul>


<p>Now you should have full support for Portable Class Libraries in Xamarin Studio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xamarin Components and NuGet]]></title>
    <link href="http://lastexitcode.com/blog/2014/10/26/XamarinComponentsAndNuGet/"/>
    <updated>2014-10-26T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2014/10/26/XamarinComponentsAndNuGet</id>
    <content type="html"><![CDATA[<p><a href="http://lastexitcode.com/blog/2014/10/19/NuGetSupportInXamarinStudio5-5/">Xamarin Studio 5.5</a> and <a href="http://developer.xamarin.com/releases/vs/xamarin.vs_3/xamarin.vs_3.7/">Xamarin for Visual Studio 3.7</a> have support for <a href="https://components.xamarin.com/">Xamarin Components</a> with NuGet package dependencies. So you can now have Xamarin Studio or Visual Studio add NuGet packages to a project when a Component is installed from <a href="https://components.xamarin.com/">Xamarin&rsquo;s Component Store</a>.</p>

<p>The <a href="http://lastexitcode.com/blog/2014/10/19/NuGetSupportInXamarinStudio5-5/">NuGet Support in Xamarin Studio 5.5 post</a> looked at installing a Component with a NuGet package dependency into a project but did not cover how to create one of these Components. So let us take a look at how to modify an existing Component so it has NuGet package dependencies.</p>

<h2>Adding a NuGet Package Dependency to a Component</h2>

<p>In this section we will look at modifying a Component so when it is installed it adds NuGet packages to the project as well as referencing the assemblies that are included in the Component.</p>

<p>First download the latest version of the <a href="https://components.xamarin.com/submit/xpkg">xamarin-component command line application</a> which has been updated to support Component&rsquo;s with NuGet packages dependencies.</p>

<p>The downloaded xpkg file is a zip file containing xamarin-component.exe. So rename the file to have a .zip file extension and then extract the executable.</p>

<p>Now let us see how to add a single NuGet package dependency to the Component. If you are using a component.yaml file to generate your Component you can add the NuGet package dependency by adding the following to your component.yaml:</p>

<pre><code>packages:
  "": Newtonsoft.Json, Version=5.0.8
</code></pre>

<p>With the above defined in your component.yaml file you can run the xamarin-component.exe <strong>package</strong> command to generate your Component&rsquo;s .xam file.</p>

<p>Windows:</p>

<pre><code>xamarin-component.exe package path\to\directory-with-component-yaml
</code></pre>

<p>Mac:</p>

<pre><code>mono xamarin-component.exe package path/to/directory-with-component-yaml
</code></pre>

<p>If you then look inside your generated Component file (.xam), which you can do by renaming its file extension to .zip, you will see the package defined in the component/Manifest.xml file:</p>

<pre><code>&lt;packages&gt;
  &lt;package id="Newtonsoft.Json" version="5.0.8" /&gt;
&lt;/packages&gt;
</code></pre>

<p>If you are using the xamarin-component.exe <strong>create-manually</strong> command line you can add the same NuGet package dependency by adding the following command line argument:</p>

<pre><code>--package="":"Newtonsoft.Json, Version=5.0.8"
</code></pre>

<p>This packaged Component will install the Newtonsoft.Json NuGet package into any Android, iOS or Windows Phone project. If you need to install a particular NuGet package for a particular project type you can specify the target project type for the NuGet package dependency. Shown below is a more complicated example from a component.yaml file where NUnit and Newtonsoft.Json are configured so they will only be installed into Android projects, whilst log4net is only installed into iOS projects, and finally Ninject will be installed into all project types.</p>

<pre><code>packages:
  android:
    - NUnit, Version=2.6.2
    - Newtonsoft.Json, Version=5.0.8
  mobile: Ninject, Version=3.2.0
  ios: log4net, Version=2.0.0
</code></pre>

<p>Note that <strong>mobile</strong> used here is equivalent to the empty double quoted string &ldquo;&rdquo; which was used in the previous example with the single NuGet package.</p>

<p>If you then generate the Component again using the xamarin-component.exe package command you will see the Component&rsquo;s manifest file now contains the following:</p>

<pre><code>  &lt;packages&gt;
    &lt;package id="NUnit" version="2.6.2" framework="android" /&gt;
    &lt;package id="Newtonsoft.Json" version="5.0.8" framework="android" /&gt;
    &lt;package id="log4net" version="2.0.0" framework="ios" /&gt;
    &lt;package id="Ninject" version="3.2.0" framework="mobile" /&gt;
  &lt;/packages&gt;
</code></pre>

<p>If you are using the xamarin-component.exe create-manually command line you can add the same NuGet package dependencies to your Component by adding the following command line arguments:</p>

<pre><code>--package="android":"NUnit, Version=2.6.2"
--package="android":"Newtonsoft.Json, Version=5.0.8"
--package="mobile":"Ninject, Version=3.2.0"
--package="ios":"log4net, Version=2.0.0"
</code></pre>

<p>With the NuGet package dependencies defined as shown in the previous examples when you install the Component into a project the NuGet package will be installed and a reference will be added to the assemblies in the <strong>lib</strong> directory of the Component. If you want to only add the NuGet package to the project and not the assemblies in the lib directory then you can create a Shell Component which we will look at in the following section.</p>

<h2>Creating a Shell Component</h2>

<p>A Shell Component is special type Component that is basically a wrapper around one or more NuGet packages. It will only install the NuGet package into the project and not add references to any assemblies in the Component&rsquo;s <strong>lib</strong> directory.</p>

<p>To configure a component to be a Shell Component you can add the following to your component.yaml file:</p>

<pre><code>is_shell: true
</code></pre>

<p>When you generate your Component&rsquo;s .xam file you will see that the Component&rsquo;s Manifest.xml file now contains the <strong>is-shell</strong> attribute in the component element:</p>

<pre><code>&lt;component format="1" id="mycomponent" is-shell="true"&gt;
</code></pre>

<p>If you are using the xamarin-component.exe create-manually command line argument you can do the same thing by passing the following argument:</p>

<pre><code>--is-shell
</code></pre>

<p>Backwards compatibility is something to consider if you decide to create a Shell Component. If you need a Shell Component to work with older versions of Xamarin Studio and Xamarin for Visual Studio that do not support Component&rsquo;s with NuGet package dependencies then you should also include the assemblies in the lib directory of the Component. The <a href="https://components.xamarin.com/view/xamandroidsupportv13-18">Android Support Library v13 Component</a> is one example that has a NuGet package dependency and also includes an assembly in its lib/android directory. When installing the Android Support Library v13 Component into an older version of Xamarin Studio the NuGet package will not be installed and instead the assembly will be referenced from the Component&rsquo;s lib/android directory. If the Android Support Library v13 Component is installed with Xamarin Studio 5.5 or above then the NuGet package will be installed but the assembly from the lib/android directory will not be referenced.</p>

<h2>NuGet Package Sources</h2>

<p>The NuGet package dependencies that a Component has must be available from the <a href="https://nuget.org">official NuGet Gallery</a> before your Component is submitted to the Component Store.</p>

<p>If you are testing a NuGet package that is not currently available from the <a href="https://nuget.org">official NuGet Gallery</a> then you can copy it into the <a href="http://lastexitcode.com/projects/NuGet/FileLocations/">local machine&rsquo;s NuGet cache directory</a>. Xamarin Studio and Xamarin for Visual Studio should find the NuGet package in the local NuGet cache instead of trying to download it from the NuGet Gallery.</p>

<h2>Creating a Component</h2>

<p>There are some example Component&rsquo;s that have NuGet package dependencies available on my <a href="https://github.com/mrward/xamarin-test-components">GitHub page</a>. The <a href="https://github.com/mrward/xamarin-test-components/tree/master/AwesomeComponent">Awesome Component example</a> is a Shell Component that uses a rakefile and the xamarin-component create-manually command line to generate the Component. The <a href="https://github.com/mrward/xamarin-test-components/tree/master/MyComponent">My Component example</a> is another Shell Component that uses a component.yaml file that defines NuGet package dependencies.</p>

<p>For more detailed information on how to create a Component please see the <a href="http://developer.xamarin.com/guides/cross-platform/advanced/submitting_components/">Submitting Components</a> page.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.5]]></title>
    <link href="http://lastexitcode.com/blog/2014/10/19/NuGetSupportInXamarinStudio5-5/"/>
    <updated>2014-10-19T14:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/10/19/NuGetSupportInXamarinStudio5-5</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> Package version constraints in packages.config files are now supported</li>
<li> <a href="https://components.xamarin.com/">Xamarin Components</a> can now have NuGet package dependencies</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.5 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.5/xamarin.studio_5.5/">release notes</a>.</p>

<h2>NuGet Package Version Constraints</h2>

<p>NuGet allows you to <a href="http://docs.nuget.org/docs/reference/versioning">define a range of package versions that are allowed in your project</a> using the <strong>allowedVersions</strong> attribute in the packages.config file.</p>

<pre><code>&lt;packages&gt;
  &lt;package id="Newtonsoft.Json" version="5.0.1" allowedVersions="[5.0,6.0)" targetFramework="MonoAndroid44" /&gt;
&lt;/packages&gt;
</code></pre>

<p>In the above packages.config file the project has Json.NET 5.0.1 installed and will only allow updates to versions of Json.NET that are below 6.0.</p>

<p>When you open the solution in Xamarin Studio, and check for updates is enabled in preferences, you will see updates in the Solution window that are valid given the constraint defined in the packages.config file. In the screenshot below an update is shown for Json.NET 5.0.8 in the Solution window even though Json.NET currently has version 6.0.5 available.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/JsonNet508PackageUpdateAvailableInSolutionWindow.png" title="&lsquo;Json.NET 5.0.8 package update available shown in Solution window&rsquo; &lsquo;Json.NET 5.0.8 package update available shown in Solution window&rsquo;" ></p>

<p>When you update the NuGet packages from the Solution window Xamarin Studio will now update to a NuGet package that meets the version constraints defined in the packages.config. In the Package Console screenshot below the Json.NET package was updated, with the constraint in place, and Json.NET 5.0.8 was installed.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/JsonNet508PackageInstalledInPackageConsole.png" title="&lsquo;Json.NET package updated to 5.0.8 &ndash; Package Console output&rsquo; &lsquo;Json.NET package updated to 5.0.8 &ndash; Package Console output&rsquo;" ></p>

<p>Note that if you install a NuGet package from the Add Packages dialog you can override the constraint and install a NuGet package with a version outside of the range of the constraint.</p>

<h2>Components with NuGet Packages</h2>

<p>A Component from <a href="https://components.xamarin.com/">Xamarin&rsquo;s Component Store</a> can now declare a dependency on one or more NuGet packages which will be installed into the project when the Component is installed. The <a href="https://components.xamarin.com/view/xamandroidsupportv13-18">Android Support Library v13 Component</a> is one example that has a NuGet package dependency.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentInStore.png" title="&lsquo;Android Support Library v13 Component in Component Store&rsquo; &lsquo;Android Support Library v13 Component in Component Store&rsquo;" ></p>

<p>When you install this Component you will see that it installs the <a href="https://www.nuget.org/packages/Xamarin.Android.Support.v13/">Xamarin.Android.Support.v13 NuGet package</a>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentInstalledInSolutionWindow.png" title="&lsquo;Android Support Library v13 Component in Solution window&rsquo; &lsquo;Android Support Library v13 Component in Solution window&rsquo;" ></p>

<p>In older versions of Xamarin Studio the NuGet package will not be installed and instead the project will reference the Xamarin.Android.Support.v13.dll which is included with the Component.</p>

<p>The NuGet packages a Component depends on are displayed in the <strong>Packages</strong> tab on the Component Details page, which you can open by double clicking the Component in the Solution window, or by right clicking the Component and selecting <strong>Details</strong>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentDetailsWithPackagesTab.png" title="&lsquo;Android Support Library v13 Packages in Component Details page&rsquo; &lsquo;Android Support Library v13 Packages in Component Details page&rsquo;" ></p>

<p>From the <strong>Packages</strong> tab you can also install a NuGet package that a Component depends on if it was removed from the project. So if the Xamarin.Android.Support.v13 NuGet package is removed from the project the Component will be highlighted in red to indicate that there is a problem.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentErrorInSolutionWindow.png" title="&lsquo;Android Support Library v13 Component error in Solution window&rsquo; &lsquo;Android Support Library v13 Component error in Solution window&rsquo;" ></p>

<p>If you then open the Component Details page you will see in the <strong>Packages</strong> tab that the NuGet package is missing.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentDetailsWithMissingNuGetPackage.png" title="&lsquo;Android Support Library v13 Component Details page with missing NuGet Package&rsquo; &lsquo;Android Support Library v13 CComponent Details page with missing NuGet Package&rsquo;" ></p>

<p>To add the NuGet package back to the project you can hover the mouse over the warning icon and click the Add Package button that appears in the pop-up window.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentDetailsWithAddPackagePopUpWindow.png" title="&lsquo;Android Support Library v13 Component Details page with Add Package pop-up window&rsquo; &lsquo;Android Support Library v13 CComponent Details page with Add Package pop-up window&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.4]]></title>
    <link href="http://lastexitcode.com/blog/2014/09/29/NuGetSupportInXamarinStudio5-4/"/>
    <updated>2014-09-29T19:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/09/29/NuGetSupportInXamarinStudio5-4</id>
    <content type="html"><![CDATA[<h2>New Feature</h2>

<ul>
<li> Added support for the new Unified target frameworks for iOS and Mac

<ul>
<li>Xamarin.iOS</li>
<li>Xamarin.Mac</li>
</ul>
</li>
</ul>


<p>More details on all the new features and changes in Xamarin Studio 5.4 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.4/xamarin.studio_5.4/">release notes</a>.</p>

<h2>New Unified iOS and Mac Target Frameworks</h2>

<p>Xamarin recently announced <a href="http://blog.xamarin.com/unified-api-with-64-bit-support-for-ios-and-mac/">a new Unified API for its iOS and Mac products</a>. This new Unified API makes it easier to share code between Mac and iOS as well as allowing you to support 32 and 64 bit applications with the same binary.</p>

<p>To use this new Unified API you can create a new Unified project for iOS, or for Mac, using one of the project templates available from Xamarin Studio&rsquo;s New Project Dialog.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-4/UnifiedMacAndIOSProjectsInNewProjectDialog.png" title="&lsquo;Unified iOS and Mac Projects in New Project Dialog&rsquo; &lsquo;Unified iOS and Mac Projects in New Project Dialog&rsquo;" ></p>

<p>These Unified projects now support MSBuild and use the following target frameworks:</p>

<ul>
<li>Xamarin.iOS</li>
<li>Xamarin.Mac</li>
</ul>


<h2>NuGet Support for the New Unified Target Frameworks</h2>

<p>In order to support these two new frameworks the following changes were made to NuGet.</p>

<ul>
<li>Add Xamarin.iOS and Xamarin.Mac as known frameworks.</li>
<li>Make frameworks that have a name that starts with <strong>Xamarin</strong> optional when checking the compatibility of Portable Class Libraries (PCLs) inside a NuGet package with a Portable Class Library project.</li>
</ul>


<p>With these new Unified frameworks being recognised by NuGet you can now create a NuGet package with assemblies that specifically target these frameworks.  The following shows part of a .nuspec file with framework specific assemblies for iOS and Mac being copied into the appropriate target lib folder inside the NuGet package.</p>

<pre><code>&lt;files&gt;
    &lt;file src="lib\Xamarin.iOS\*.dll" target="lib\Xamarin.iOS10" /&gt;
    &lt;file src="lib\Xamarin.Mac\*.dll" target="lib\Xamarin.Mac20" /&gt;
&lt;/files&gt;
</code></pre>

<p>The <a href="https://www.nuget.org/packages/Splat/">Splat NuGet package</a>, created by Paul Betts, is one NuGet package available from the main NuGet gallery that explicitly targets both of the new Unified frameworks.</p>

<p>Having the Xamarin frameworks treated as optional by NuGet allows you to install a NuGet package containing PCL assemblies into a Portable Class Library project, on a machine with the Xamarin PCL profiles registered. Without the Xamarin frameworks being treated as optional the NuGet package would fail to be installed since NuGet would find them incompatible unless the NuGet package explicitly included the Xamarin frameworks as part of its PCL profile.</p>

<p>Support for the new Xamarin frameworks will be available in the official NuGet from Microsoft in version 2.8.3. <a href="https://nuget.codeplex.com/releases/view/133091">NuGet 2.8.3</a> is currently available as alpha release. Xamarin Studio 5.4 includes its own build of NuGet which has support for the new Xamarin frameworks.</p>

<h2>Portable Class Libraries</h2>

<p>In order to be able to install a NuGet package containing PCL assemblies, such as Json.NET, into a Unified iOS or Unified Mac project you will need to have the PCL profile XML files for Unified iOS and Mac installed on your machine.</p>

<p>On the Mac you can get these new PCL profile XML files by installing Mono 3.10.0, which is currently available from Xamarin Studio on the alpha and beta channels.</p>

<p>On Windows, since NuGet 2.8.3 is currently only available as an alpha release, there is a <a href="http://xvs.xamarin.com/Xamarin.iOS.PortableNuGet.msi">separate installer</a> which will register the Unified iOS framework with the PCL profiles on your machine and will also install an alpha version of Microsoft&rsquo;s NuGet Package Manager 2.8.3 into Visual Studio.</p>
]]></content>
  </entry>
  
</feed>
