<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: netcore | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/netcore/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2017-11-12T18:03:40+00:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.2]]></title>
    <link href="http://lastexitcode.com/blog/2017/11/08/NetCoreSupportInVisualStudioMac7-2/"/>
    <updated>2017-11-08T15:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2017/11/08/NetCoreSupportInVisualStudioMac7-2</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Support NuGet package fallback folders</li>
<li> Support AssetTargetFallback</li>
<li> Xamarin.Forms 2.4 support (VS for Mac 7.2.2)</li>
<li> Fixed transitive types from references not being available</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.2</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-october-9-2017---visual-studio-2017-for-mac-720636">release notes</a>.</p>

<h2>NuGet package fallback folders support</h2>

<p>The .NET Core SDK 2.0 defines a NuGet package fallback folder <code>/usr/local/share/dotnet/sdk/NuGetFallbackFolder</code> that can be used when looking
for NuGet packages whilst restoring. This fallback folder is now supported by
Visual Studio for Mac 7.2 so that on restoring a .NET Core 2.0 project the NuGet
packages from the fallback folder will be found and do not need to be downloaded from nuget.org into the
local machine NuGet package cache <code>~/.nuget/packages</code>. This should speed up NuGet package restore for .NET Core 2.0 and .NET Standard 2.0 projects the first time it occurs.</p>

<p>As well as the NuGet fallback folders Visual Studio for Mac will now add the following items to the generated project.assets.json
if they are available:</p>

<ul>
<li>configFilePaths</li>
<li>sources</li>
<li>warningProperties</li>
</ul>


<h2>AssetTargetFallback support</h2>

<p>The .NET Core 2.0 SDK uses an AssetTargetFallback MSBuild property
defined in an imported SDK MSBuild files. This is used instead
of the PackageTargetFallback property when determining if a NuGet
package is compatible. Currently the AssetTargetFallback property
is set to net461 by the .NET Core 2.0 SDK which allows .NET Core projects to use NuGet
packages that include assemblies that target the full .NET Framework.
The supported fallback frameworks are now added to the generated
project.assets.json file by Visual Studio for Mac when a .NET Core 2.0 project is restored.</p>

<h2>NuGet package restore now fails if package and asset target fallbacks are defined by a project</h2>

<p>If both AssetTargetFallback and PackageTargetFallback are defined by a project then the
NuGet restore will fail with an error indicating that they cannot
be used together. This mirrors the behaviour of the .NET Core command
line restore.</p>

<h2>Mark implicit PackageReferences as auto referenced</h2>

<p>PackageReference items that have IsImplicitlyDefined set to true
in their metadata now have autoRefererenced set to true in the project.assets.json file.</p>

<h2>Support parsing MSBuild conditions with unquoted properties</h2>

<p>The .NET Core 2.0 SDK uses conditions that pass properties to the
Exists function without using single quotes around the MSBuild property.
This is now supported by Visual Studio for Mac.</p>

<pre><code>&lt;PropertyGroup Condition="Exists($(FileName))"&gt;
</code></pre>

<h2>Xamarin.Forms 2.4 support</h2>

<p>The following sections cover bug fixes made in Visual Studio for Mac 7.2.2
to improve support for <a href="https://developer.xamarin.com/releases/xamarin-forms/xamarin-forms-2.4/2.4.0-stable/">Xamarin.Forms 2.4</a> and later versions. Xamarin.Forms 2.4 includes .NET Standard support as well as defining default MSBuild items for
.NET Core and .NET Standard projects. These default MSBuild items were not
handled by Visual Studio for Mac 7.2.0 and earlier versions. The main symptoms of Visual Studio for Mac not supporting Xamarin.Forms 2.4 were:</p>

<ul>
<li>Duplicate .xaml files in the Solution window.</li>
<li>Nesting of .xaml and .xaml.cs files not working in Solution window.</li>
<li>MSBuild items incorrectly added to SDK style projects.</li>
</ul>


<h3>Generated NuGet files being imported twice</h3>

<p>The generated NuGet files, .nuget.g.targets and .nuget.g.props,
that are created for .NET Core projects were being imported twice.
Once by Microsoft.Common.props, that is provided with Mono, and once
by Visual Studio for Mac.</p>

<p>This double import was causing a duplicate file
to be added to the
project when Xamarin.Forms 2.4
was used in a .NET Standard project and the .NET Core SDK was not
installed. This would result in the .xaml file and associated
.xaml.cs file not being nested in the solution window.</p>

<h3>MSBuild items added when new xaml file added to project</h3>

<p>Adding a new Xamarin.Forms content page with XAML would incorrectly add an
update item to the project for the .xaml.cs file when an SDK style project
was used.</p>

<p>When a new .xaml file was added to an SDK style project a None item as well as an EmbeddedResource item would incorrectly be added to the project file.</p>

<p>```
<None Remove="MyView.xaml" /></p>

<p><EmbeddedResource Include="MyView.xaml">
  <Generator>MSBuild:UpdateDesignTimeXaml"</Generator>
</EmbeddedResource>
```</p>

<h3>Compile item added with DependentUpon metadata</h3>

<p>Xamarin.Forms 2.4 defines a wildcard update similar to:</p>

<pre><code>&lt;Compile Update="**\*.xaml.cs" DependentUpon="%(Filename)" /&gt;
</code></pre>

<p>When a project was saved in Visual Studio for Mac a Compile item was
incorrectly added to the main project with the evaluated value stored in the
DependentUpon element.</p>

<h3>DependentUpon being evaluated incorrectly</h3>

<p>Metadata defined for wildcard MSBuild items were being evaluated using
the wildcard item instead of the expanded item. This
was causing .xaml.cs files to not be nested in the Solution window
for Xamarin.Forms 2.4.</p>

<p>Xamarin.Forms 2.4 defines an update item similar to:</p>

<pre><code>&lt;Compile Update="**\*.xaml.cs" DependentUpon="%(Filename)" /&gt;
</code></pre>

<p>The DependentUpon property was evaluated using the wildcard item
which resulted in the DependentUpon property being
evaluated as &lsquo;*.xaml.cs&rsquo; instead of the filename of the item that was
updated by the wildcard.</p>

<h3>Define MSBuildSDKsPath for MSBuild engine host</h3>

<p>MSBuild when run on the command line defines the MSBuildSDKsPath in
its MSBuild.dll.config file. The MSBuild engine host that is used
when building with Visual Studio for Mac now also defines the MSBuildSDKsPath property. Previously this was not being defined.</p>

<p>This fixes a build error when using Xamarin.Forms 2.4.0 in an SDK style
project that targets .NET Standard. Xamarin.Forms 2.4.0 uses default
item imports which were not being included since they are conditionally
imported based on the MSBuildSDKsPath property value:</p>

<pre><code>&lt;Import Project="$(MSBuildThisFileDirectory)Xamarin.Forms.DefaultItems.props" 
    Condition="'$(MSBuildSDKsPath)'!=''" /&gt;
</code></pre>

<p>If the SDK style project had a .xaml file and a .xaml.cs file then
the .xaml.g.cs file was not being generated when the project had no files
explicitly defined in the project file. This
then caused a build error about the InitializeComponent method not
being defined.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed transitive assembly references not available until restart</strong></p>

<p>Given a solution that contains three .NET Standard projects: LibC
references LibB which references LibA. If the Newtonsoft.Json NuGet
package was installed into LibA the types from this NuGet package
were not available in LibB or LibC until the solution was closed and
re-opened again. Closing and re-opening the solution refreshes the
reference information used by the type system. Now when a NuGet
package is installed into a .NET Core project the projects that
reference this project have their reference information refreshed. Types from
the installed NuGet packages are then available in projects that
reference this updated project either directly or indirectly.</p>

<p><strong>Fixed transitive project references after editing a project file</strong></p>

<p>Given a solution that contains three .NET Standard projects: LibC references
LibB which references LibA. If a NuGet package is added to LibA by
editing its project file in the text editor the types from this NuGet
package were not available to LibB or LibC without restarting Visual Studio
for Mac or until the packages were restored for the solution. Now when the project file
is saved the projects that directly or indirectly reference the project
will be restored.</p>

<p><strong>Ignore project references with ReferenceOutputAssembly set to false when restoring</strong></p>

<p>Project references that have ReferenceOutputAssembly are now not
added to the project.assets.json file. This was causing
the NuGet package restore to fail in some cases. For example, if a .NET Standard
project has a project reference to a .NET Core App project, but has the
ReferenceOutputAssembly set to false, then running dotnet restore from the
command line would work, but the restore would fail in Visual Studio for Mac.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.1]]></title>
    <link href="http://lastexitcode.com/blog/2017/08/23/NetCoreSupportInVisualStudioMac7-1/"/>
    <updated>2017-08-23T21:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/08/23/NetCoreSupportInVisualStudioMac7-1</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> .NET Core 2.0 support</li>
<li> Target framework selection for new projects</li>
<li> New project templates</li>
<li> .NET Core Runtimes and SDKs displayed in About Dialog</li>
<li> Improved support for multi target framework projects</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.1</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-august-14-2017---visual-studio-for-mac-7101297">release notes</a>.</p>

<h2>.NET Core 2.0 Support</h2>

<p>Visual Studio for Mac 7.1 adds support for <a href="https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/">.NET Core 2.0</a> and .NET Standard 2.0.</p>

<p>The .NET Core 2.0 SDK needs to be <a href="https://www.microsoft.com/net/download/core">installed</a> separately.</p>

<h2>Target Framework Selection for New Projects</h2>

<p>If a project template supports multiple target frameworks, and the corresponding framework is available, then the New Project dialog will allow the framework to be selected before the project is created.</p>

<p><img src="/images/blog/DotNetCoreSupportInVisualStudioMac7-1/NewNetCoreProjectTargetFrameworkSelection.png" title="&lsquo;New .NET Core target framework selection&rsquo; &lsquo;New .NET Core target framework selection&rsquo;" ></p>

<p>Visual Studio for Mac includes project templates for .NET Core 1.0, 1.1 and 2.0 as well as for .NET Standard versions 1.0 through to 2.0.</p>

<p>To be able to create projects that target .NET Core 2.0 or .NET Standard 2.0 the .NET Core 2.0 SDK needs to be installed.</p>

<h2>New Project Templates</h2>

<p>The following project templates have been added:</p>

<ul>
<li>ASP.NET Core Web App (Razor Pages)

<ul>
<li>Available if .NET Core 2.0 SDK is installed.</li>
</ul>
</li>
<li>Class Library

<ul>
<li>Targets .NET Core instead of .NET Standard.</li>
</ul>
</li>
<li>MSTest</li>
</ul>


<p>Some project templates do not support all the target framework versions.
For example, the ASP.NET Core Web App (Razor Pages) only supports
.NET Core 2.0, so this template will only be displayed if .NET Core 2.0 SDK
is installed.</p>

<p>The F# project templates have some restrictions on what target frameworks
they support. The F# .NET Standard project templates do not
support selecting .NET Standard versions below 1.6. The F# Class Library project
only supports .NET Core 2.0.</p>

<h2>.NET Core Runtime and SDKs displayed in About Dialog</h2>

<p>The About dialog will now display the .NET Core runtimes and SDKs that are installed on
the local machine.</p>

<p><img src="/images/blog/DotNetCoreSupportInVisualStudioMac7-1/NetCoreInformationAboutDialog.png" title="&lsquo;.NET Core runtime and SDK information in About dialog&rsquo; &lsquo;.NET Core runtime and SDK information in About dialog&rsquo;" ></p>

<h2>Improved Support for Multi Target Framework Projects</h2>

<p>SDK style projects that target multiple frameworks can now be opened in Visual Studio for
Mac 7.1 and will show source files as well as NuGet package dependencies.</p>

<p>The project will be treated as though it only has
one target framework which is the first one specified in the
TargetFrameworks property in the project file.</p>

<p>Please note that currently the support for multiple target frameworks is limited in
comparison with Visual Studio on Windows.</p>

<h2>Bug Fixes</h2>

<p><strong>ASP.NET Core Web API project does not open API url on launching browser</strong></p>

<p>When an ASP.NET Core Web API project was run it would open a blank web
page in the browser instead of a page that showed the api values. Now when a new ASP.NET
Core Web API project is run the <code>http://localhost:&lt;port&gt;/api/values</code> url is launched in
the browser so the API values will be displayed.</p>

<p><strong>Unable to run or debug ASP.NET Core project with empty SDK directory</strong></p>

<p>If there was an empty directory inside the .NET Core SDK directory <code>/usr/local/share/dotnet/sdk</code> then it was
not possible to run or debug an ASP.NET Core web project</p>

<p>If the .NET Core SDK MSBuild files were not found in the SDK directory then the
project&rsquo;s OutputType was not read and would result in the project being treated
as a library project. This could also occur if only
the .NET Core runtime is installed.</p>

<p><strong>Shared project files shown for .NET Core project in Solution window</strong></p>

<p>When a .NET Core project referenced a shared assets project the files
from the shared project were incorrectly being displayed in the .NET Core project in
the Solution window.</p>

<p><strong>Fix generated code for resource files in .NET Core projects</strong></p>

<p>Adding a resx file to a .NET Core 1.x or .NET Standard 1.x project would result in
code being generated that could not be compiled.</p>

<p>Projects that target .NET Core App 1.0, 1.1, or .NET Standard below version 2.0
cannot compile code that uses <code>typeof(Resources).Assembly</code> which was
being generated by the ResXFileCodeGenerator. If these target frameworks
are used by the project then the code generated by Visual Studio for Mac
will now use <code>typeof(Resources).GetTypeInfo().Assembly</code> which is supported.</p>

<p>.NET Core 2.0 and .NET Standard 2.0 do not need to use GetTypeInfo so the
code generated for these frameworks has not been changed.</p>

<p><strong>Fix new resource file not added as Update item in Sdk projects</strong></p>

<p>Adding a new resource file to a .NET Core project would add the
.resx file and the .Designer.cs file as Include items instead of an
Update items.</p>

<pre><code>&lt;ItemGroup&gt;
  &lt;EmbeddedResource Include="Resources.resx"&gt;
    &lt;Generator&gt;ResXFileCodeGenerator&lt;/Generator&gt;
    &lt;LastGenOutput&gt;Resources.Designer.cs&lt;/LastGenOutput&gt;
  &lt;/EmbeddedResource&gt;
&lt;/ItemGroup&gt;
&lt;ItemGroup&gt;
  &lt;Compile Include="Resources.Designer.cs"&gt;
    &lt;DependentUpon&gt;Resources.resx&lt;/DependentUpon&gt;
  &lt;/Compile&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>This then caused the build to fail since these files are already included by
the .NET Core SDK.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Test Runner Support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/07/09/NetCoreTestRunnerSupportInXamarinStudio/"/>
    <updated>2016-07-09T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/07/09/NetCoreTestRunnerSupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>The latest version of the .NET Core addin for Xamarin Studio and MonoDevelop now supports <a href="https://docs.microsoft.com/en-us/dotnet/articles/core/testing/unit-testing-with-dotnet-test">.NET Core Test Runners</a>.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreTestRunnerSupportInXamarinStudio.png" title="&lsquo;.NET Core Test Runner in Xamarin Studio&rsquo; &lsquo;.NET Core Test Runner in Xamarin Studio&rsquo;" ></p>

<p>Xamarin Studio uses the <a href="https://docs.microsoft.com/en-us/dotnet/articles/core/tools/test-protocol">.NET Core test communication protocol</a> to support .NET Core test runners. This protocol provides a way to discover and run the unit tests provided by a .NET Core test runner.</p>

<p>When Xamarin Studio finds a testRunner in the project.json file it will attempt to discover the unit tests for that project.</p>

<pre><code>{
    "version": "1.1.0-*",

    "testRunner": "nunit",

    "dependencies": {,
        "NUnit": "3.4.0",
        "dotnet-test-nunit": "3.4.0-beta-1"
    },

    "frameworks": {
        "netcoreapp1.0": {
            "imports": [
                "netcoreapp1.0",
                "portable-net45+win8"
            ],
            "dependencies": {
                "Microsoft.NETCore.App": {
                    "version": "1.0.0-*",
                    "type": "platform"
                }
            }
        }
    }
}
</code></pre>

<p>The discovered tests are then shown in the Unit Tests window.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreDiscoveredUnitTestsInUnitTestsWindow.png" title="&lsquo;Discovered NET Core unit tests in Unit Tests window&rsquo; &lsquo;Discovered NET Core unit tests in Unit Tests window&rsquo;" ></p>

<p>After building the project the Unit Tests window will discover any new tests that have been added.</p>

<p>Tests can be run by clicking Run All or by right clicking a test in the Unit Tests window and selecting Run Test.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/RunDotNetCoreTestsContextMenu.png" title="&lsquo;Run NET Core unit tests in Unit Tests window&rsquo; &lsquo;Run NET Core unit tests in Unit Tests window&rsquo;" ></p>

<p>The test results are shown in the Test Results window.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreTestResultsWindow.png" title="&lsquo;.NET Core test results  in Test Results window&rsquo; &lsquo;.NET Core test results  in Test Results window&rsquo;" ></p>

<p>Console output from the test runner is shown in the Application Output window.</p>

<p><img src="/images/blog/NetCoreTestRunnerSupportInXamarinStudio/DotNetCoreTestRunnerApplicationOutput.png" title="&lsquo;.NET Core Test Runner in Xamarin Studio&rsquo; &lsquo;.NET Core Test Runner in Xamarin Studio&rsquo;" ></p>

<p>Debugging the unit tests is not yet supported.</p>

<p><a href="https://xunit.github.io/">xUnit</a> and <a href="http://nunit.org/">NUnit</a> provide .NET Core test runners and both of these are supported in Xamarin Studio. More information can be found in existing tutorials on how to use these test runners:</p>

<ul>
<li> <a href="http://www.alteridem.net/2016/06/18/nunit-3-testing-net-core-rc2/">NUnit 3 Tests for .NET Core RC2 and ASP.NET Core RC2</a></li>
<li> <a href="http://xunit.github.io/docs/getting-started-dotnet-core.html">Getting started with xUnit.net (.NET Core / ASP.NET Core)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ASP.NET Core 1.0 RC2 support in Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/06/05/AspNetCoreRC2SupportInXamarinStudio/"/>
    <updated>2016-06-05T19:02:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/06/05/AspNetCoreRC2SupportInXamarinStudio</id>
    <content type="html"><![CDATA[<p>Xamarin Studio and MonoDevelop now have support for <a href="https://blogs.msdn.microsoft.com/webdev/2016/05/16/announcing-asp-net-core-rc2/">ASP.NET Core 1.0 RC2</a> with an alpha release of the <a href="https://github.com/mrward/monodevelop-dnx-addin">.NET Core addin</a>.</p>

<p><img src="/images/blog/AspNetCoreRC2SupportInXamarinStudio/WebProjectInSolutionWindow.png" title="&lsquo;ASP.NET Core web project in Solution window&rsquo; &lsquo;ASP.NET Core web project in Solution window&rsquo;" ></p>

<p>This is an update of the original <a href="/blog/2016/01/01/DNXSupportInXamarinStudio/">DNX addin</a> which adds support for .NET Core RC2 and also, thanks to <a href="https://twitter.com/davidkarlas">David Karlaš</a>, adds support for debugging .NET Core applications on the Mac.</p>

<h2>Features</h2>

<ul>
<li> Debugging .NET Core applications with the .NET Core CLR on Mac.</li>
<li> Project templates for console, library and web applications</li>
<li> Code completion</li>
<li> NuGet integration</li>
<li> Solution window integration</li>
</ul>


<h2>Supports</h2>

<ul>
<li> MonoDevelop and Xamarin Studio 6.0 (build 5166). (Note that 6.1 is not yet supported)</li>
<li> <a href="https://www.microsoft.com/net/core">.NET Core 1.0 RC2</a>.</li>
</ul>


<h2>Installing .NET Core SDK</h2>

<p>The <a href="https://www.microsoft.com/net/core">.NET Core SDK</a> needs to be installed separately before using the .NET Core addin. Detailed installation instructions can be found on <a href="https://www.microsoft.com/net/core">Microsoft&rsquo;s .NET Core web site</a>.</p>

<h2>Installing the addin</h2>

<p>The addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> in the alpha channel. In Xamarin Studio open the Add-in Manager and select the Gallery tab. Click the repository drop down and if <strong>Xamarin Studio Add-in Repository (Alpha Channel)</strong> is not displayed then click Manage Repositories. In the window that opens tick the check box next to Xamarin Studio Add-in Repository (Alpha Channel) and then click the Close button.</p>

<p><img src="/images/blog/AspNetCoreRC2SupportInXamarinStudio/AddinManagerNetCoreAddin.png" title="&lsquo;.NET Core addin selected in Addin Manager dialog&rsquo; &lsquo;.NET Core addin selected in Addin Manager dialog&rsquo;" ></p>

<p>Select the .NET Core addin and then click the Install button.</p>

<p>After installing the .NET Core addin you will need to restart Xamarin Studio before the project templates are available in the New Project dialog.</p>

<h2>Creating a .NET Core project</h2>

<p>There are three project templates available for .NET Core in the New Project dialog.</p>

<p><img src="/images/blog/AspNetCoreRC2SupportInXamarinStudio/NewProjectDialogNetCoreProjectTemplates.png" title="&lsquo;New ASP.NET 5 project templates&rsquo; &lsquo;New ASP.NET 5 project templates&rsquo;" ></p>

<h2>Debugging</h2>

<p>Thanks to <a href="https://twitter.com/davidkarlas">David Karlaš</a> there is a support for debugging .NET Core applications when running on the .NET Core CLR if you have the <a href="http://addins.monodevelop.com/Project/Index/228">VSCode Debugger addin</a> installed.</p>

<p><img src="/images/blog/AspNetCoreRC2SupportInXamarinStudio/DebuggingNetCoreApplication.png" title="&lsquo;Debugging a .NET Core application&rsquo; &lsquo;Debugging a .NET Core application&rsquo;" ></p>

<p>The VSCode Debugger addin is currently available from <a href="http://addins.monodevelop.com/">MonoDevelop&rsquo;s Add-in Repository</a> on the alpha channel.</p>

<p>Debugging .NET Core console and web projects that target the full .NET framework is supported on all platforms. The .NET Core command line tool (dotnet.exe) will create an executable when targeting the full .NET Framework which can be debugged in Xamarin Studio. On Windows the x86 version of the .NET Core SDK needs be installed since Xamarin Studio currently cannot debug x64 applications on Windows.</p>

<h2>Source Code</h2>

<p>The source code for the addin is available on GitHub.</p>

<ul>
<li><a href="https://github.com/mrward/monodevelop-dnx-addin">.NET Core addin source code</a>.</li>
</ul>

]]></content>
  </entry>
  
</feed>
