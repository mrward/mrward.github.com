<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: netcore | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/netcore/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2018-05-20T15:19:09+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.5]]></title>
    <link href="http://lastexitcode.com/blog/2018/05/20/NetCoreSupportInVisualStudioMac7-5/"/>
    <updated>2018-05-20T09:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2018/05/20/NetCoreSupportInVisualStudioMac7-5</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li>.NET Core 2.1 SDK support

<ul>
<li>.NET Core 2.1 SDK project templates</li>
<li>HTTPS development certificate support</li>
<li>.NET Core global tools added to PATH on startup</li>
</ul>
</li>
<li>.NET Core location can now be configured</li>
<li>Xamarin.Forms project templates now use .NET Standard projects</li>
<li>Performance improvements when using projects with many files</li>
<li>.NET Core templating engine has been updated</li>
<li>Improved support for Xamarin.Forms</li>
<li>Item templates are now supported with the .NET Core templating engine</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.5</a> can be found in the
<a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#-visual-studio-2017-for-mac-version-75-release-notes">release notes</a>.</p>

<h2>.NET Core 2.1 SDK support</h2>

<p>Visual Studio for Mac 7.5 includes support for the .NET Core 2.1 SDK which is currently
available as a <a href="https://blogs.msdn.microsoft.com/dotnet/2018/05/07/announcing-net-core-2-1-rc-1/">release candidate</a>. The following
sections will look into the support provided by Visual Studio for Mac 7.5 for the .NET Core 2.1 SDK.</p>

<h3>.NET Core 2.1 SDK project templates</h3>

<p>If .NET Core 2.1.300 SDK is installed then the .NET Core 2.1 project templates
will be available in the New Project dialog.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/NewProjectDialogNetCore21TargetFramework.png" title="&lsquo;New Project dialog &ndash; .NET Core 2.1 target framework option&rsquo; &lsquo;New Project dialog &ndash; .NET Core 2.1 target framework option&rsquo;" ></p>

<p>The .NET Core 2.1 project templates are not included with Visual Studio for Mac and
will be searched for in the 2.1.300 SDK templates directory.</p>

<pre><code>/usr/local/share/dotnet/sdk/2.1.300-rc1-008673/Templates/
</code></pre>

<p>The project templates for .NET Core 2.0 and 1.1 are currently still being shipped
with Visual Studio for Mac.</p>

<h3>HTTPS development certificate support</h3>

<p>ASP.NET Core 2.1 projects use HTTPS by default. In order to be able to run
ASP.NET Core 2.1 projects with HTTPS a development certificate needs to be installed.
Visual Studio for Mac will detect if the development certificate is missing
and offer to install it when you run an ASP.NET Core 2.1 project that uses
HTTPS.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/HttpsDevCertificateNotInstalledMessage.png" title="&lsquo;HTTPS development certificate not installed message&rsquo; &lsquo;HTTPS development certificate not installed message&rsquo;" ></p>

<p>Visual Studio for Mac will use the dotnet dev-certs tool to check if the
HTTPS development certificate is installed and trusted.</p>

<pre><code>dotnet dev-certs https --trust --check
</code></pre>

<p>Installing the HTTPS certificate requires administrator privileges so you may be
prompted for your username and password after clicking the Yes button. Currently
the prompt for credentials shows <strong>mono-sgen64 wants to make changes</strong>. In the future this will show a
custom message indicating that the credentials are required to install the HTTPS development certificate.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/MonoSGenAdminPrompt.png" title="&lsquo;Mono sgen administrator dialog prompt&rsquo; &lsquo;Mono sgen administrator dialog prompt&rsquo;" ></p>

<p>After entering your credentials the following command is run as administrator.</p>

<pre><code>dotnet dev-certs https --trust
</code></pre>

<p>After the certificate is installed the ASP.NET Core 2.1 project will be
opened in the default browser using HTTPS.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/AspNetCoreProjectInChromeUsingHttps.png" title="&lsquo;ASP.NET Core 2.1 project open in browser using HTTPS&rsquo; &lsquo;ASP.NET Core 2.1 project open in browser using HTTPS&rsquo;" ></p>

<p>Running <strong>dotnet dev-certs https &mdash;trust</strong> to install and trust the certificate needs to be
done with administrator privileges with the user id 0. To do this Visual Studio for Mac
does the following:</p>

<ol>
<li>Launches a separate custom console app.</li>
<li>The console app uses the AuthorizationExecuteWithPrivileges Mac
API provided by Xamarin.Mac to launch itself as again as administrator.
It is not possible to run dotnet as administrator initially since it requires the user id to be
set to 0, which is what happens when you use <strong>sudo dotnet</strong>, and this can only be done
when running with administrator privileges. So the console app is launched again but this
time with administrator privileges.</li>
<li>The console app, now being run with administrator privileges, will use setuid to set the
current user id to 0.</li>
<li>The console app then runs <strong>dotnet dev-certs https &mdash;trust</strong> which
will install and trust the HTTPS development certificate.</li>
</ol>


<p>The <strong>dotnet dev-certs https &mdash;trust</strong> command will add two localhost certificates. You
can see these by opening the Keychain Access application and searching for
localhost.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/LocalhostCertificateInKeychain.png" title="&lsquo;localhost certificate created by dotnet dev-certs in Keychain Access application&rsquo; &lsquo;localhost certificate created by dotnet dev-certs in Keychain Access application&rsquo;" ></p>

<p>If the HTTPS development certificate is found to be valid and
trusted then this will be remembered for the current Visual Studio for Mac
session and a check will not be run again during the current session.</p>

<h3>.NET Core global tools added to path on startup</h3>

<p>The .NET Core SDK 2.1 supports installing global tools. These tools are .NET Core console apps
that are available as NuGet packages and can be installed and used from the command line.
To be able to use these tools with the dotnet command line the <strong>~/.dotnet/tools</strong>
directory needs to be added to the PATH environment variable. The path to
these global tools is now added to Visual Studio&rsquo;s PATH environment variable
when it starts.</p>

<h3>Prompt to install .NET Core 2.1 SDK if not installed</h3>

<p>If a .NET Core 2.1 project is opened and .NET Core 2.1.300 SDK is not
installed then a dialog will be shown allowing the SDK to
be downloaded. The project in the Solution window will show an error
icon indicating that the .NET Core 2.1 SDK is not
installed.</p>

<h3>Launching a browser when running an ASP.NET Core 2.1 project</h3>

<p>The .NET Core SDK 2.1 project templates for ASP.NET Core
specify the https and http urls in the launchSettings.json file
by using the applicationUrl property.</p>

<pre><code>    "MyAspNetCore21Project": {
        "commandName": "Project",
        "launchBrowser": true,
        "applicationUrl": "https://localhost:5001;http://localhost:5000",
        "environmentVariables": {
            "ASPNETCORE_ENVIRONMENT": "Development"
        }
    }
</code></pre>

<p>With earlier .NET Core 2.1 preview SDKs this was defined in the
ASPNETCORE_URLS environment variable. The full applicationUrl
property was used unmodified when running the ASP.NET Core 2.1 project and
resulted in an invalid url being used causing the AspNetCoreExecutionHandler to log a warning
and not opening the browser. Now the first url in the applicationUrl
is used if there are multiple urls.</p>

<h3>Support ASPNETCORE_URLS when launching the browser</h3>

<p>If the launchSettings.json does not define an applicationUrl then
Visual Studio for Mac will fallback to checking the environment variable defined
for ASPNETCORE_URLS in the launchSettings.json file and will use the first url
found there. This url will be used to launch the browser when running the project.</p>

<p>An example launchSettings.json that was used in the .NET Core 2.1 preview SDKs
is shown below.</p>

<pre><code>"MyProject": {
  "commandName": "Project",
  "launchBrowser": true,
  "environmentVariables": {
    "ASPNETCORE_ENVIRONMENT": "Development",
    "ASPNETCORE_URLS": "https://localhost:5001;http://localhost:5000"
  }
}
</code></pre>

<p>Compared with the .NET Core SDK 2.0.</p>

<pre><code>"MyProject": {
  "commandName": "Project",
  "launchBrowser": true,
  "environmentVariables": {
    "ASPNETCORE_ENVIRONMENT": "Development"
  },
  "applicationUrl": "http://localhost:5000/"
}
</code></pre>

<h2>Allow .NET Core location to be configured</h2>

<p>In Preferences there is now a Projects &ndash; SDK Locations &ndash; .NET Core
section that can be used to configure the location of the .NET Core
command line tool (dotnet).</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/NetCoreLocationConfiguration.png" title="&lsquo;.NET Core location configured in preferences&rsquo; &lsquo;.NET Core location configured in preferneces&rsquo;" ></p>

<p>This can be used to configure Visual Studio for Mac to use a
.NET Core SDK that is not installed in the default location. After this is
changed the MSBuild engine hosts are recycled and all .NET Core projects
are re-evaluated to ensure the new locations of any MSBuild targets
are used.</p>

<p>If the location is invalid, or no runtimes or SDKs can be found at the configured
location, a Not found error will be displayed.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/NetCoreLocationInvalidPath.png" title="&lsquo;Invalid .NET Core location path specified in preferences&rsquo; &lsquo;Invalid .NET Core location path specified in preferences&rsquo;" ></p>

<h2>Xamarin.Forms Project Templates now include .NET Standard projects</h2>

<p>The Xamarin.Forms project templates, Blank Forms App and Forms App, will now
create a .NET Standard 2.0 project instead of a Portable Class Library (PCL) project
if .NET Standard is selected in the New Project dialog.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/NewProjectDialogFormsNetStandard.png" title="&lsquo;New Project dialog &ndash; Blank Forms &ndash; .NET Standard option&rsquo; &lsquo;New Project dialog &ndash; Blank Forms &ndash; .NET Standard option&rsquo;" ></p>

<p>The Xamarin.Forms Class Library project template now creates a .NET Standard 2.0 project instead of
a Portable Class Library project.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-5/NewProjectDialogXamarinFormsLibraryProject.png" title="&lsquo;New Project dialog &ndash; Xamarin.Forms Class Library project&rsquo; &lsquo;New Project dialog &ndash; Xamarin.Forms Class Library project&rsquo;" ></p>

<h2>Prevent .xaml.cs file from being renamed in a .NET Core project</h2>

<p>The Xamarin.Forms NuGet package has an MSBuild .targets file that is imported
after the project items are defined. This .targets file overrides
the DependentUpon property for all .xaml.cs files. This means that renaming the
.xaml.cs file to be different to the .xaml file is not supported.
To prevent this the Rename menu is now disabled in the Solution
window for .xaml.cs files if they depend on a .xaml file.</p>

<h2>Exclude None build action for XAML files in .NET Core projects</h2>

<p>Recent versions of Xamarin.Forms NuGet packages exclude all .xaml files from the
default None file wildcard defined by the .NET Core SDK. This exclusion is
done in a .targets file which is applied after the items in the project
file have been added. This means that a .NET Standard project should not use
None items for .xaml files since they will be removed. To avoid this problem
the None build action is excluded from the list of build actions for .xaml files.
This list of build actions is available when right
clicking the file in the Solution window and in the Properties window when
the file is selected.</p>

<h2>Dependent files now renamed on renaming parent file in the Solution window</h2>

<p>When a file is renamed in the Solution window the dependent files will
also be renamed if they start with the same name as the parent file.
This avoids problems with XAML files since a different name for the .xaml file
and the associated .xaml.cs file is not supported.</p>

<h2>Improve project load times for projects with many files</h2>

<p>Opening a .NET Core project that contained many files that
were not excluded, such as a .NET Core console project that has a
node_modules directory, could take a long time to load.</p>

<p>Some performance improvements have been made to speed up the
loading of .NET Core projects. For a .NET Core console project that had a node_modules
directory containing around 17000 files the initial project load time which
was taking around 70-80 seconds and now it takes around 20 seconds. Visual Studio 2017 on
Windows takes around 15-20 seconds to load the same project before
it is visible in the Solution Explorer window.</p>

<p>The performance improvements include:</p>

<ol>
<li>Adding a faster project item lookup used when finding an existing
project item on loading the project.</li>
<li>Updating the existing project items is now faster avoiding iterating
over the existing items.</li>
<li>Evaluating MSBuild items is now only done when evaluating properties.
Previously this was done when evaluating project configurations and run configurations.
This would result in
files and directories being searched multiple times when looking
wildcard matches on loading the project. Now the files
and directories are searched once during the initial project load.</li>
</ol>


<h2>.NET Core templating engine updated</h2>

<p>Updated the .NET Core templating to version 1.0.0-beta3-20171117-314. This new
version of the .NET Core templating engine fixes the following problems:</p>

<ol>
<li>Templates that use files with @ character in their names being generated with the
@ symbol encoded.</li>
<li>Templates that use the Guid macro and did not specify a format
would cause the template generation to fail. An exception was thrown
since the format was not defined. Now
if the format is not defined the default format is used.</li>
</ol>


<h2>Report template creation failures when using the .NET Core templating engine</h2>

<p>To help diagnose problems with project and item templates that use the
.NET Core templating engine more detailed information about the failure is now logged
in the IDE log.</p>

<h2>Support item templates with the new templating engine</h2>

<p>Item templates that use the .NET Core
templating engine can be defined through a new extension point.</p>

<pre><code>&lt;Extension path="/MonoDevelop/Ide/ItemTemplates"&gt;
        &lt;Template
                id="Azure.Function.CSharp.BlobTrigger"
                _overrideName="Blob Trigger"
                path="Templates/Azure.Functions.Templates.nupkg" /&gt;
&lt;/Extension&gt;
</code></pre>

<p>Item templates are not currently supported in the New File dialog however there
is an API that can be used by extensions to create files from these templates.
This is currently used when adding a new Azure Function to a project.</p>

<h2>Bug Fixes</h2>

<p><strong>Missing child package dependencies in Solution window</strong></p>

<p>After creating a new ASP.NET Core project sometimes the package dependencies
shown in the Solution window under the SDK folder and the NuGet folder
could not be expanded to view the child dependencies.</p>

<p>The problem was that if the call to get the package dependencies
using MSBuild was cancelled this would result an empty list of depenencies
being cached. Since no package dependencies were returned the Solution window
would fallback to showing the package dependencies that were listed in the
project and a default top level SDK package dependency.</p>

<p><strong>MSBuild wildcards being expanded on saving a project</strong></p>

<p>Saving a project with a file wildcard that had a Link with
MSBuild item metadata, as shown below, would result in the wildcard
being removed and replaced with MSBuild items for each file included
by the wildcard.</p>

<pre><code>&lt;Compile Include="**\*.cs" Exclude="obj\**"&gt;
  &lt;Link&gt;%(RecursiveDir)%(Filename).cs&lt;/Link&gt;
&lt;/Compile&gt;
</code></pre>

<p>The problem was that the evaluated Link property value was being
compared with the unevaluated value, which did not match, resulting
in the wildcard being replaced with individual MSBuild items for
each file. Now if the property value contains a % character a comparison is
made against the evaluated value when checking if the project item
has changed.</p>

<p><strong>MSBuild items added for wildcards with link metadata on saving project</strong></p>

<p>A project containing the following MSBuild file wildcards would have
extra MSBuild items added when the project file was saved.</p>

<pre><code>&lt;ItemGroup&gt;
  &lt;Compile Include="..\**\*.cs"&gt;
    &lt;Link&gt;%(RecursiveDir)%(Filename)%(Extension)&lt;/Link&gt;
  &lt;/Compile&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>On saving the project Compile update items would be added for each
file included by the file wildcard.</p>

<pre><code>&lt;ItemGroup&gt;
  &lt;Compile Update="..\Test\Class1.cs"&gt;
    &lt;Link&gt;Class1.cs&lt;/Link&gt;
  &lt;/Compile&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>This problem is similar to the previous problem where the evaluated Link value was being
compared with the unevaluated value, which did not match, resulting
MSBuild update items being added to the project when it was saved. Now if the property
value contains a % character a comparison is made against the evaluated value when checking if
the project item has changed.</p>

<p><strong>TargetFramework changed on saving project</strong></p>

<p>Adding a file to an SDK style project that targeted Tizen 4.0 would
result in the TargetFramework changing from <strong>tizen40</strong> to <strong>tizen4.0</strong>.
Now the original framework identifier name is not modified and if
the version of the framework changes then the version will be
dotted or contain only numbers based on the format that was originally used
in the project file.</p>

<p><strong>ASP.NET Core file templates modifying project file</strong></p>

<p>Adding a new .cshtml file from a file template to an ASP.NET Core
project would modify the project file when it should not have been
modified. The problem was the files were added as None items whilst
.cshtml are Content items. The project file would contain the
following after adding a new cshtml file from a template:</p>

<pre><code>&lt;ItemGroup&gt;
  &lt;Content Remove="Views\Index.cshtml" /&gt;
&lt;/ItemGroup&gt;
&lt;ItemGroup&gt;
  &lt;None Include="Views\Index.cshtml" /&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>Another problem was that the Razor Page with view model file
template specifies a DependentUpon property so this was added to the
project file. This would result in the .cshtml and .cs files being nested whilst
the other .cshtml and .cs files created with the initial ASP.NET
Core project template were not nested. The project file would include
the following:</p>

<pre><code>&lt;ItemGroup&gt;
  &lt;Compile Update="Views\Index.cshtml.cs"&gt;
    &lt;DependentUpon&gt;Index.cshtml&lt;/DependentUpon&gt;
  &lt;/Compile&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>The .NET Core SDK does not indicate that .cshtml and .cs
files are dependent on each other so they are not currently nested
in the Solution window. New .cshtml files created from these updated
file templates will now not be nested in Solution window.</p>

<p><strong>XAML files not nested after editing project file in editor</strong></p>

<p>Adding a new content page with xaml to a .NET Standard project,
then excluding the files from the project, but not deleting it,
then editing the project file and commenting out the MSBuild remove
items, would then result in the xaml files not being nested in the
Solution window. The problem was that the MSBuild update item
for the .xaml.cs file, defined by the Xamarin.Forms default msbuild
items, was being removed from the MSBuild project in
memory. This MSBuild update item had the DependsOn property defined
so this information was lost on reloading the project. Now a check
is to made to ensure only update items that exist in the original
project file are removed.</p>

<p><strong>MSBuild item added for XAML file copied to a .NET Standard project</strong></p>

<p>When copying a .xaml file from a Portable Class Library project to a .NET Standard project
an MSBuild include item for the file would be added if the .xaml file did
not have the default metadata properties defined by Xamarin.Forms.
Now .NET Core projects opt-in to supporting items not being excluded if they
are missing MSBuild item metadata
which prevents an MSBuild include item added for the .xaml file.</p>

<p><strong>Duplicate XAML file build error when copying file to a .NET Standard project</strong></p>

<p>Copying a .xaml file from a Portable Class Library project to a .NET Standard project
would result an MSBuild item for the .xaml file to the project causing it to not
build due to a duplicate .xaml file.</p>

<p>Now when a xaml file is copied into a .NET Standard project, and it is missing
properties that are included in by an update wildcard,
an MSBuild item will not be added to the project.</p>

<p><strong>MSBuild remove item not added for .xaml.cs file</strong></p>

<p>With a .NET Core project, containing a single .xaml file and a
dependent .xaml.cs file, removing but not deleting the .xaml file
from the Solution window would not add an MSBuild remove item for
the .xaml.cs file even though it was removed from the Solution window.</p>

<p>The problem was that the Xamarin.Forms NuGet package includes a
Compile update item and only this was being considered when saving
the project file. The default file wildcard, that includes all .cs files,
provided by the .NET Core SDK was not considered. Only the last MSBuild item
associated with the .xaml.cs file was being considered. If there was another .cs
file in the project then the MSBuild remove item was added correctly. To avoid this
all MSBuild items associated with a project item are now considered.</p>

<p><strong>MSBuild remove item not removed on adding XAML file to project</strong></p>

<p>When an .xaml file was removed but not deleted, and Xamarin.Forms 2.5
used, which has default MSBuild items defined, on adding the .xaml
file back again to the project the EmbeddedResource
remove item was not removed from the project.</p>

<p>The problem was that the .xaml file was being added as a None item
since by default there is no build action specified for .xaml files.</p>

<p>Another problem was that the MSBuild remove
items, defined by Xamarin.Forms that remove all .xaml files from the default None
included by the .NET Core SDK, were being ignored since the file wildcards were not
found.</p>

<p>Also an msbuild item is no longer added for an existing xaml file when it is
added to the project. The Xamarin.Forms default msbuild items
for .xaml files have extra metadata which were not being added to
the file when it was added to the project from the file system.</p>

<p><strong>Update item added on renaming xaml.cs file</strong></p>

<p>When the .xaml and .xaml.cs file were renamed at the same time an
MSBuild update item was added for the .xaml.cs file even though the Xamarin
Forms NuGet package has a default MSBuild item that was the same as
the generated MSBuild update item.</p>

<p><strong>Argument null exception logged on opening .NET Core project</strong></p>

<p>Opening a .NET Core project would sometimes log an unhandled
ArgumentNullException. A file created event was sometimes raised before
the project had finished loading and could result in
a null set of items being used when checking if the
new file should be added to the project. This is now handled. The files being
created on project load are typically in the obj folder and would be
ignored by the default file wildcards.</p>

<pre><code>An unhandled exception has occured. Terminating Visual Studio? False
System.ArgumentNullException: Value cannot be null.
Parameter name: source
  at System.Linq.Enumerable.Where[TSource]
  in corefx/src/System.Linq/src/System/Linq/Where.cs:42
  at MonoDevelop.Projects.Project.OnFileCreatedExternally
in src/core/MonoDevelop.Core/MonoDevelop.Projects/Project.cs:4041
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.4]]></title>
    <link href="http://lastexitcode.com/blog/2018/03/11/NetCoreSupportInVisualStudioMac7-4/"/>
    <updated>2018-03-11T11:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2018/03/11/NetCoreSupportInVisualStudioMac7-4</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Solution window detects file system changes outside Visual Studio for Mac</li>
<li> Projects with unknown target frameworks can now be loaded

<ul>
<li><a href="https://oren.codes/2017/08/29/use-all-tfms-with-sdk-style-projects-in-visual-studio-for-mac/">MSBuild SDK Extras</a> is now supported without requiring an extra extension to be installed</li>
<li>Tizen.NET projects are now supported</li>
</ul>
</li>
<li> Fixed xUnit test messages not being displayed</li>
<li> ASP.NET Core minified files are no longer formatted</li>
<li> Support target framework defined in another MSBuild property</li>
<li> Show SDK information before dependencies are restored</li>
<li> Fixed failure to add new file when the default project namespace contains only numbers</li>
<li> Fixed remove item not added for .xaml.cs file</li>
<li> Fixed incorrect project updates when moving a file</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.4</a> can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#15.6">release notes</a>.</p>

<h2>Solution window detects file system changes</h2>

<p>Files created in the project directory, or a subdirectory,
outside Visual Studio for Mac are now added to the project and
appear in the Solution window automatically.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-4/DotNetCoreProjectFileWatcher.gif" title="&lsquo;File added and removed from command line &ndash; Solution window updated&rsquo; &lsquo;File added and removed from command line &ndash; Solution window updated&rsquo;" ></p>

<p>Deleting project files and directories will remove the files from
the Solution window. The Solution window will also update after
a file or a directory is renamed outside Visual Studio for Mac.</p>

<h2>Allow unknown target framework projects to be loaded</h2>

<p>The target framework of an SDK style project is no longer restricted.
Previously Visual Studio for Mac would fail to load an SDK style
project unless its target framework was .NET Standard, .NET Core App
or .NET Framework.</p>

<p>This allows Tizen projects to be loaded without the error message
&ldquo;Project does not support framework &lsquo;Tizen,Version=v4.0&rsquo;&rdquo; being
displayed. Tizen projects have a Tizen.NET package reference which
imports an MSBuild .props file that defines the Tizen target framework.</p>

<p>The <a href="https://github.com/onovotny/MSBuildSdkExtras">MSBuild.Sdk.Extras</a> NuGet
package is now supported so SDK style projects can use target frameworks
that this NuGet package
supports, such as Xamarin.iOS and MonoAndroid.</p>

<p>On building a project with an unknown target framework, that is
not defined by any used NuGet package references, a build error
that indicates the framework is not supported will occur:</p>

<pre><code>The TargetFramework value 'test1.0' was not recognized.
</code></pre>

<p>NuGet restore will also fail for an unknown target framework with
a message indicating the framework is invalid.</p>

<h2>Bug Fixes</h2>

<p><strong>Fix xUnit test messages not displayed</strong></p>

<p>xUnit tests support an ITestOutputHelper interface which can be
passed to the constructor of the test. This has a WriteLine method
which can be used to output messages whilst running the test. When
this was used the text displayed in Visual Studio for Mac&rsquo;s Test Results
window was:</p>

<pre><code>Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage
</code></pre>

<p>Now the text from the message is shown in the Tests Results window.</p>

<p><strong>Support target framework defined in another MSBuild property</strong></p>

<p>An SDK style project that defined the <TargetFrameworks> element to
be another MSBuild property would fail to restore.</p>

<p>In the example below the property TheFramework is defined in the
Frameworks.props file.</p>

<pre><code>&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;Import Project="Frameworks.props" /&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetFrameworks&gt;$(TheFramework)&lt;/TargetFrameworks&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
</code></pre>

<p>The unevaluated MSBuild property value was used and would result in the
NuGet package restore failing.</p>

<p>Now the evaluated property value is used when restoring dependencies.</p>

<p><strong>ASP.NET Core minified files and map files are no longer formatted</strong></p>

<p>On creating a new ASP.NET Core project the minified files were being
re-formatted and were no longer minified. Now the .min.css, .min.js and
.map files are excluded from being re-formatted when a new ASP.NET Core
project is created.</p>

<p><strong>Fixed failure to add a new file when the default project namespace contains only numbers</strong></p>

<p>If a project has a default namespace of &lsquo;1&rsquo; then adding a new C#
file from a template would throw a null reference
exception. The problem was that the sanitized namespace for the project&rsquo;s
default namespace was null.</p>

<p><strong>Show SDK information before dependencies are restored</strong></p>

<p>When a new .NET Core project is created the Dependencies &ndash; SDK folder
would show no items until the NuGet package restore completed. Now
the SDK dependency is shown whilst the dependencies are being restored.</p>

<p><strong>Fixed remove item not added for .xaml.cs file</strong></p>

<p>When a new content page with xaml file was
added and then removed, but not deleted,
a remove item was not added for the .xaml.cs file.</p>

<p><strong>Fixed incorrect project updates when moving a file</strong></p>

<p>Moving a Resource file from one folder to another would not update
the project file correctly. Either the project file would not be
modified or the file would be removed.</p>

<p>One problem was that on moving a clone is taken of the original item
and the associated MSBuild item was copied but was still referring
back to the original location. Another problem was that an incorrect
match was being made when looking for remove items resulting in the
wrong files being removed from the project.</p>

<p><strong>Fixed being unable to use NUnit in a .NET Core test project</strong></p>

<p>The problem was that the NUnit test provider, which supports running NUnit tests
for non .NET Core projects, was finding a PackageReference for NUnit, and then
trying to load the tests for the .NET Core project and failing. To fix this the
NUnit test provider now ignores .NET Core projects so the VS Test provider will
load the tests for the project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.3]]></title>
    <link href="http://lastexitcode.com/blog/2017/12/18/NetCoreSupportInVisualStudioMac7-3/"/>
    <updated>2017-12-18T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2017/12/18/NetCoreSupportInVisualStudioMac7-3</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> <a href="https://github.com/Microsoft/vstest">VSTest</a> Console Runner now included with Visual Studio for Mac

<ul>
<li>Allows <a href="https://xunit.github.io">xUnit</a> tests to be supported for non .NET Core projects</li>
</ul>
</li>
<li> Renamed ASP.NET Core Project Templates</li>
<li> New ASP.NET Core F# Project Templates Added</li>
<li> Support Backslash in Project Template Primary Output Path</li>
<li> Support <a href="https://github.com/NuGet/Home/wiki/%5BSpec%5D-NuGet-settings-in-MSBuild">NuGet Restore MSBuild Properties</a>

<ul>
<li>RestoreAdditionalProjectFallbackFolders</li>
<li>RestoreAdditionalProjectSources</li>
<li>RestoreFallbackFolders</li>
<li>RestorePackagesPath</li>
<li>RestoreSources</li>
</ul>
</li>
<li> Fixed transitive project references not supported</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.3</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-december-4-2017---visual-studio-2017-version-73-730797">release notes</a></p>

<h2>VSTest Console Runner</h2>

<p>Previous versions of Visual Studio for Mac would use <strong>dotnet vstest</strong>,
included with the .NET Core SDK,
to run unit tests for .NET Core projects. Now Visual Studio for Mac includes
the <a href="https://github.com/Microsoft/vstest">VSTest</a> Console runner and uses that instead of using the .NET Core SDK.</p>

<p>The standalone VSTest Console runner allows other project types, not just .NET Core projects, to
be supported. Visual Studio for Mac can now run <a href="https://xunit.github.io">xUnit</a> tests
for .NET Framework projects. Previously only NUnit was supported.</p>

<p>Let us take a look at using xUnit in a .NET Framework project.</p>

<p>First create a .NET Framework Library project by opening the New Project dialog and selecting
Library from the Other &ndash; .NET &ndash; General category.</p>

<p>Install the following NuGet packages into the project.</p>

<ul>
<li>xunit</li>
<li>xunit.runner.visualstudio</li>
</ul>


<p>Edit MyClass.cs and add some xUnit tests, as shown below:</p>

<p>```</p>

<p>using Xunit;</p>

<p>namespace xUnitTests
{</p>

<pre><code>public class MyClass
{
    [Fact]
    public void PassingTest()
    {
        Assert.True(true);
    }

    [Fact]
    public void FailingTest()
    {
        Assert.False(true);
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Building the project should then show the xUnit tests in the Unit Tests window.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-3/xUnitTestsInUnitTestsWindow.png" title="&lsquo;xUnit tests in Unit Tests window&rsquo; &lsquo;xUnit tests in Unit Tests window&rsquo;" ></p>

<p>Note that, due to a bug in Visual Studio for Mac, the tests may not appear in the
Unit Tests window if the
xunit.runner.visualstudio was not available in the local machine&rsquo;s NuGet
package cache when it was added to the project. Closing and re-opening the
solution should allow the tests to be discovered.</p>

<p>The tests can then be run or debugged in the usual way.</p>

<p>Currently MSTest is not yet supported in .NET Framework projects. The tests are discovered
but they fail to run with an access denied error message:</p>

<pre><code>An exception occurred while invoking executor 'executor://mstestadapter/v2': 
Access to the path "/TestResults" is denied.
</code></pre>

<h2>Renamed ASP.NET Core Project Templates</h2>

<p>The ASP.NET Core template names displayed in the New Project dialog
have been changed to be more consistent with Visual Studio on Windows.</p>

<ul>
<li>&lsquo;ASP.NET Core Web App (Razor Pages)&rsquo; renamed to &lsquo;ASP.NET Core Web App&rsquo;</li>
<li>&lsquo;ASP.NET Core Web App&rsquo; renamed to &lsquo;ASP.NET Core Web App (MVC)&rsquo;</li>
</ul>


<p>Visual Studio uses (Model-View-Controller) but the shorter
MVC is used by Visual Studio for Mac.</p>

<h2>New ASP.NET Core F# Project Templates Added</h2>

<p>The following ASP.NET Core F# project templates are now available from the
New Project dialog.</p>

<ul>
<li>ASP.NET Core Empty

<ul>
<li>.NET Core 1.x and 2.0</li>
</ul>
</li>
<li>ASP.NET Core Web API

<ul>
<li>.NET Core 2.0 only</li>
</ul>
</li>
</ul>


<h2>Support Backslash in Project Template Primary Output Path</h2>

<p>The template.json file used by the new templating engine uses a
primaryOutputs property for projects and files. If the paths used
contained backslashes then the project was not added to the
solution.</p>

<p><code>
"primaryOutputs": [
  { "path": "Library1\\Library1.csproj" },
  { "path": "Library2\\Library2.csproj" }
]
</code></p>

<p>Now the paths have the backslashes replaced with forward slashes if
the current platform does not support backslash as a path
separator.</p>

<h2>Support RestoreAdditionalProjectFallbackFolders MSBuild Property</h2>

<p>The RestoreAdditionalProjectFallbackFolders MSBuild property is
read and appended to the list of fallback folders stored in the
project.assets.json file. The .NET Core 2.0 SDK will set this
MSBuild property to point to the NuGet package fallback folder
that is installed with the SDK. This will be used
to resolve NuGet packages first before downloading them to the
~/.nuget/packages folder.</p>

<h2>Support RestoreAdditionalProjectSources MSBuild Property</h2>

<p>The RestoreAdditionalProjectSources MSBuild property can be used
to add additional package sources to the existing list of sources
used to resolve packages.</p>

<h2>Support RestoreFallbackFolders MSBuild Property</h2>

<p>The RestoreFallbackFolders MSBuild property can be used by project that uses
PackageReferences to define a set of package fallback folders that
will override any specified in the NuGet.Config file. It can also
be used to clear any pre-defined fallback folders by specifying
&lsquo;clear&rsquo; as its value. Note that this value does not affect any
folders defined by RestoreAdditionalProjectFallbackFolders which
will be appended even if RestoreFallbackFolders is set to &lsquo;clear&rsquo;.</p>

<h2>Support RestorePackagesPath MSBuild Property</h2>

<p>The RestorePackagesPath MSBuild property can be used to override the global packages
folder location when a project uses a PackageReference.</p>

<h2>Support RestoreSources MSBuild property</h2>

<p>The RestoreSources MSBuild property can be used to override
the sources defined by any NuGet.Config file. Any sources defined in the
RestoreAdditionalProjectSources MSBuild property will still be appended to the
list of sources if RestoreSources is defined.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed Transitive Project References not supported</strong></p>

<p>With three .NET Core projects, LibC referencing LibB referencing LibA,
the types defined by LibA were not available to LibC unless it was
directly referencing LibA. In Visual Studio for Mac 7.3 the types
defined by LibA are available to LibC without LibC directly
referencing LibA.</p>

<p><strong>Portable Class Library projects can now be referenced by .NET Core projects</strong></p>

<p>Portable Class Library (PCL) projects could not be referenced by .NET Core
projects or .NET Standard projects. The Edit References dialog would show
&ldquo;Incompatible target framework&rdquo; for the PCL project when trying to add the
reference.</p>

<p>Visual Studio for Mac now has the same behaviour as Visual Studio on Windows where
a .NET Standard project can reference any PCL project.</p>

<p><strong>Fixed MSBuild Update item not removed from project</strong></p>

<p>If a file was deleted from a project, or removed without deleting,
and the file was the last file for a particular wildcard include, the
Update item for the file was not being removed from the project.</p>

<p><strong>Fixed MSBuild Remove item not added when Update item exists</strong></p>

<p>With a project that contained a single .cs file, and that file had
an Update item defined, when the file was removed from the project,
without deleting it, a Remove item was not being added to the project for the file.</p>

<p><strong>Fixed Remove item not being added when file excluded from project</strong></p>

<p>When the last file was removed from the project, but not deleted, an
MSBuild Remove item was not added to the project for the file.</p>

<ol>
<li>Create a .NET Standard 2.0 project.</li>
<li>Right click Class1.cs and select Remove.</li>
<li>Select Remove from Project in the dialog that opens.</li>
<li>Close and re-open solution.</li>
</ol>


<p>The Class1.cs file was still shown in the Solution window when it should have been
removed. The project file did not have a Compile remove item for Class1.cs when it should
have been added:</p>

<pre><code>&lt;Compile Remove="Class1.cs" /&gt;
</code></pre>

<p><strong>Deleting a XAML file left an MSBuild Remove item in project file</strong></p>

<p>When a .xaml file in a project was deleted the associated
Remove MSBuild item, if it was present, was not being removed from the
project file.</p>

<ol>
<li> Create a new .NET Standard 2.0 project.</li>
<li> Add Xamarin.Forms 2.3 NuGet package.</li>
<li> Add a new Content Page with Xaml file using the New File dialog.</li>
<li> In the Solution window select the .xaml file and delete it.</li>
</ol>


<p>All MSBuild items associated with the .xaml file should have been
removed from the project file but instead a None item would remain.</p>

<pre><code>&lt;None Remove="MyPage.xaml" /&gt;
</code></pre>

<p><strong>Fix MSBuild remove item not added when adding a XAML file</strong></p>

<p>Adding a new .xaml file to a project was not adding a None Remove
item for the .xaml file to remove it from the default wildcard include for all
files.</p>

<pre><code>&lt;None Remove="MyNewPage.xaml" /&gt;
</code></pre>

<p>On reloading the solution the Solution window would show two .xaml
files &ndash; one EmbeddedResource item and one None item.</p>

<p><strong>Fixed MSBuild condition evaluation when using Czech locale</strong></p>

<p>With the primary operating system language set to Czech, creating a new .NET
Core project would result in the project having a target framework of net461.</p>

<p>The problem was that Single.TryParse was returing true for an empty string
when the machine&rsquo;s culture was &lsquo;cs-CZ&rsquo;. This was causing the MSBuild condition
evaluation to be treated as a boolean comparison incorrectly in some cases.
The condition below would return false even though the property was
not defined and both sides of the condition were empty strings:</p>

<pre><code>&lt;PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == ''"&gt;
</code></pre>

<p>This was causing the TargetFrameworkIdentifier to not be set for
.NET Core projects so the default of .NETFramework was being used.</p>

<p><strong>Re-evaluate AppliesTo condition on capability change</strong></p>

<p>Fixed the AppliesTo attribute not attaching a project extension to
a project after a NuGet package restore enabled a project capability.
The AppliesTo attribute allows a project extension to be associated
to a project based on its capabilities.</p>

<p>If the project extension uses an AppliesTo attribute which is
initially false and then a new project capability is added, and the
project is re-evaluated, the AppliesTo attribute is now
re-evaluated. This will then cause the project extension to be
attached to the project. If the project extension was attached to the
project and the project capability is removed then the project
extension will now be removed when the project is re-evaluated.</p>

<p><strong>Fixed being unable to run a new Azure Functions project</strong></p>

<p>Creating a new Azure Functions project would result in
being unable to run the project until the solution was closed
and re-opened again. After the NuGet packages are restored the
project can be run but this information was not updated in Visual Studio
for Mac.</p>

<p>Now after a NuGet package restore, when re-evaluating the project,
the solution startup item is updated if there is no startup item
already defined.</p>

<p>When the project capability is removed, due to a NuGet package
being uninstalled, and the
project can no longer be run the startup item will be updated if
it was previously set to be this project.</p>

<p><strong>Fix generated NuGet files being imported twice</strong></p>

<p>The ProjectName.nuget.g.targets and ProjectName.nuget.g.props,
that are generated for .NET Core projects in the base intermediate
directory, were being imported twice.
Once by Microsoft.Common.props, that is provided with Mono, and once
again by Visual Studio for Mac.</p>

<p>Importing these files twice was causing a duplicate file to be added to
the project information held in memory by Visual Studio for Mac
when Xamarin.Forms 2.4 was used and no .NET Core SDK was installed.
This would result in the content page xaml and associated C# file not
being nested in the solution window.</p>

<p><strong>Fixed items added to project when a new content page with XAML was created</strong></p>

<p>Adding a new Xamarin.Forms content page with XAML would add an
update item for the .xaml.cs file, a remove item for the xaml file,
and an include item for the xaml file.</p>

<p>An example is Xamarin.Forms 2.4 which defines wildcard includes:</p>

<pre><code>&lt;None Remove="**\*.xaml" /&gt;
&lt;EmbeddedResource Include="**\*.xaml" SubType="Designer" Generator="MSBuild:UpdateDesignTimeXaml" /&gt;
</code></pre>

<p>Which would cause a new .xaml file added to the project and saved
in the project file as well as a remove for the None item even though
the .xaml file was already removed from the None items.</p>

<pre><code>&lt;None Remove="MyView.xaml" /&gt;

&lt;EmbeddedResource Include="MyView.xaml"&gt;
  &lt;Generator&gt;MSBuild:UpdateDesignTimeXaml"&lt;/Generator&gt;
&lt;/EmbeddedResource&gt;
</code></pre>

<p><strong>Fix DependentUpon property being saved in project</strong></p>

<p>Xamarin.Forms 2.4 defines an update item similar to:</p>

<pre><code>&lt;Compile Update="**\*.xaml.cs" DependentUpon="%(Filename)" /&gt;
</code></pre>

<p>When a project was saved a Compile item was added to the main project
with the filename stored in the DependentUpon element. Now
the evaluated DependentUpon value is treated as being the default
value so it is not added to the project file.</p>

<p><strong>Fix xaml.cs files not being nested</strong></p>

<p>Xamarin.Forms 2.4 defines an update item similar to:</p>

<pre><code>&lt;Compile Update="**\*.xaml.cs" DependentUpon="%(Filename)" /&gt;
</code></pre>

<p>The DependentUpon property was being evaluated as &lsquo;*.xaml.cs&rsquo;.
This was causing .xaml.cs files to not be nested in the Solution window.</p>

<p><strong>Fixed build error when Xamarin.Forms 2.4 used in a .NET Standard project</strong></p>

<p>If a Xamarin.Forms .NET Standard project had a
.xaml file and a .xaml.cs file then the xaml.g.cs file would not be
generated when the project file contained no files. The
default items defined by the Xamarin.Forms NuGet package were not
being imported. This then caused a build error about the
InitializeComponent method not being defined.</p>

<p>Xamarin.Forms 2.4.0 uses default
item imports which were not being included since they are conditionally
imported and the MSBuildSDKsPath was not defined:</p>

<pre><code>&lt;Import Project="$(MSBuildThisFileDirectory)Xamarin.Forms.DefaultItems.props" Condition="'$(MSBuildSDKsPath)'!=''" /&gt;
</code></pre>

<p>MSBuild on the command line defines the MSBuildSDKsPath globally in
its MSBuild.dll.config file. The MSBuild engine host, used when
building a project in Visual Studio for Mac, now also defines the
MSBuildSDKsPath property.</p>

<p><strong>Fixed remove item added when removing a linked file</strong></p>

<p>Deleting a file link in a .NET Core project would add a remove item
for the file instead of removing the link from the project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.2]]></title>
    <link href="http://lastexitcode.com/blog/2017/11/08/NetCoreSupportInVisualStudioMac7-2/"/>
    <updated>2017-11-08T15:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2017/11/08/NetCoreSupportInVisualStudioMac7-2</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Support NuGet package fallback folders</li>
<li> Support AssetTargetFallback</li>
<li> Xamarin.Forms 2.4 support (VS for Mac 7.2.2)</li>
<li> Fixed transitive types from references not being available</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.2</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-october-9-2017---visual-studio-2017-for-mac-720636">release notes</a>.</p>

<h2>NuGet package fallback folders support</h2>

<p>The .NET Core SDK 2.0 defines a NuGet package fallback folder <code>/usr/local/share/dotnet/sdk/NuGetFallbackFolder</code> that can be used when looking
for NuGet packages whilst restoring. This fallback folder is now supported by
Visual Studio for Mac 7.2 so that on restoring a .NET Core 2.0 project the NuGet
packages from the fallback folder will be found and do not need to be downloaded from nuget.org into the
local machine NuGet package cache <code>~/.nuget/packages</code>. This should speed up NuGet package restore for .NET Core 2.0 and .NET Standard 2.0 projects the first time it occurs.</p>

<p>As well as the NuGet fallback folders Visual Studio for Mac will now add the following items to the generated project.assets.json
if they are available:</p>

<ul>
<li>configFilePaths</li>
<li>sources</li>
<li>warningProperties</li>
</ul>


<h2>AssetTargetFallback support</h2>

<p>The .NET Core 2.0 SDK uses an AssetTargetFallback MSBuild property
defined in an imported SDK MSBuild files. This is used instead
of the PackageTargetFallback property when determining if a NuGet
package is compatible. Currently the AssetTargetFallback property
is set to net461 by the .NET Core 2.0 SDK which allows .NET Core projects to use NuGet
packages that include assemblies that target the full .NET Framework.
The supported fallback frameworks are now added to the generated
project.assets.json file by Visual Studio for Mac when a .NET Core 2.0 project is restored.</p>

<h2>NuGet package restore now fails if package and asset target fallbacks are defined by a project</h2>

<p>If both AssetTargetFallback and PackageTargetFallback are defined by a project then the
NuGet restore will fail with an error indicating that they cannot
be used together. This mirrors the behaviour of the .NET Core command
line restore.</p>

<h2>Mark implicit PackageReferences as auto referenced</h2>

<p>PackageReference items that have IsImplicitlyDefined set to true
in their metadata now have autoRefererenced set to true in the project.assets.json file.</p>

<h2>Support parsing MSBuild conditions with unquoted properties</h2>

<p>The .NET Core 2.0 SDK uses conditions that pass properties to the
Exists function without using single quotes around the MSBuild property.
This is now supported by Visual Studio for Mac.</p>

<pre><code>&lt;PropertyGroup Condition="Exists($(FileName))"&gt;
</code></pre>

<h2>Xamarin.Forms 2.4 support</h2>

<p>The following sections cover bug fixes made in Visual Studio for Mac 7.2.2
to improve support for <a href="https://developer.xamarin.com/releases/xamarin-forms/xamarin-forms-2.4/2.4.0-stable/">Xamarin.Forms 2.4</a> and later versions. Xamarin.Forms 2.4 includes .NET Standard support as well as defining default MSBuild items for
.NET Core and .NET Standard projects. These default MSBuild items were not
handled by Visual Studio for Mac 7.2.0 and earlier versions. The main symptoms of Visual Studio for Mac not supporting Xamarin.Forms 2.4 were:</p>

<ul>
<li>Duplicate .xaml files in the Solution window.</li>
<li>Nesting of .xaml and .xaml.cs files not working in Solution window.</li>
<li>MSBuild items incorrectly added to SDK style projects.</li>
</ul>


<h3>Generated NuGet files being imported twice</h3>

<p>The generated NuGet files, .nuget.g.targets and .nuget.g.props,
that are created for .NET Core projects were being imported twice.
Once by Microsoft.Common.props, that is provided with Mono, and once
by Visual Studio for Mac.</p>

<p>This double import was causing a duplicate file
to be added to the
project when Xamarin.Forms 2.4
was used in a .NET Standard project and the .NET Core SDK was not
installed. This would result in the .xaml file and associated
.xaml.cs file not being nested in the solution window.</p>

<h3>MSBuild items added when new xaml file added to project</h3>

<p>Adding a new Xamarin.Forms content page with XAML would incorrectly add an
update item to the project for the .xaml.cs file when an SDK style project
was used.</p>

<p>When a new .xaml file was added to an SDK style project a None item as well as an EmbeddedResource item would incorrectly be added to the project file.</p>

<p>```
<None Remove="MyView.xaml" /></p>

<p><EmbeddedResource Include="MyView.xaml">
  <Generator>MSBuild:UpdateDesignTimeXaml"</Generator>
</EmbeddedResource>
```</p>

<h3>Compile item added with DependentUpon metadata</h3>

<p>Xamarin.Forms 2.4 defines a wildcard update similar to:</p>

<pre><code>&lt;Compile Update="**\*.xaml.cs" DependentUpon="%(Filename)" /&gt;
</code></pre>

<p>When a project was saved in Visual Studio for Mac a Compile item was
incorrectly added to the main project with the evaluated value stored in the
DependentUpon element.</p>

<h3>DependentUpon being evaluated incorrectly</h3>

<p>Metadata defined for wildcard MSBuild items were being evaluated using
the wildcard item instead of the expanded item. This
was causing .xaml.cs files to not be nested in the Solution window
for Xamarin.Forms 2.4.</p>

<p>Xamarin.Forms 2.4 defines an update item similar to:</p>

<pre><code>&lt;Compile Update="**\*.xaml.cs" DependentUpon="%(Filename)" /&gt;
</code></pre>

<p>The DependentUpon property was evaluated using the wildcard item
which resulted in the DependentUpon property being
evaluated as &lsquo;*.xaml.cs&rsquo; instead of the filename of the item that was
updated by the wildcard.</p>

<h3>Define MSBuildSDKsPath for MSBuild engine host</h3>

<p>MSBuild when run on the command line defines the MSBuildSDKsPath in
its MSBuild.dll.config file. The MSBuild engine host that is used
when building with Visual Studio for Mac now also defines the MSBuildSDKsPath property. Previously this was not being defined.</p>

<p>This fixes a build error when using Xamarin.Forms 2.4.0 in an SDK style
project that targets .NET Standard. Xamarin.Forms 2.4.0 uses default
item imports which were not being included since they are conditionally
imported based on the MSBuildSDKsPath property value:</p>

<pre><code>&lt;Import Project="$(MSBuildThisFileDirectory)Xamarin.Forms.DefaultItems.props" 
    Condition="'$(MSBuildSDKsPath)'!=''" /&gt;
</code></pre>

<p>If the SDK style project had a .xaml file and a .xaml.cs file then
the .xaml.g.cs file was not being generated when the project had no files
explicitly defined in the project file. This
then caused a build error about the InitializeComponent method not
being defined.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed transitive assembly references not available until restart</strong></p>

<p>Given a solution that contains three .NET Standard projects: LibC
references LibB which references LibA. If the Newtonsoft.Json NuGet
package was installed into LibA the types from this NuGet package
were not available in LibB or LibC until the solution was closed and
re-opened again. Closing and re-opening the solution refreshes the
reference information used by the type system. Now when a NuGet
package is installed into a .NET Core project the projects that
reference this project have their reference information refreshed. Types from
the installed NuGet packages are then available in projects that
reference this updated project either directly or indirectly.</p>

<p><strong>Fixed transitive project references after editing a project file</strong></p>

<p>Given a solution that contains three .NET Standard projects: LibC references
LibB which references LibA. If a NuGet package is added to LibA by
editing its project file in the text editor the types from this NuGet
package were not available to LibB or LibC without restarting Visual Studio
for Mac or until the packages were restored for the solution. Now when the project file
is saved the projects that directly or indirectly reference the project
will be restored.</p>

<p><strong>Ignore project references with ReferenceOutputAssembly set to false when restoring</strong></p>

<p>Project references that have ReferenceOutputAssembly are now not
added to the project.assets.json file. This was causing
the NuGet package restore to fail in some cases. For example, if a .NET Standard
project has a project reference to a .NET Core App project, but has the
ReferenceOutputAssembly set to false, then running dotnet restore from the
command line would work, but the restore would fail in Visual Studio for Mac.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.1]]></title>
    <link href="http://lastexitcode.com/blog/2017/08/23/NetCoreSupportInVisualStudioMac7-1/"/>
    <updated>2017-08-23T21:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/08/23/NetCoreSupportInVisualStudioMac7-1</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> .NET Core 2.0 support</li>
<li> Target framework selection for new projects</li>
<li> New project templates</li>
<li> .NET Core Runtimes and SDKs displayed in About Dialog</li>
<li> Improved support for multi target framework projects</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.1</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-august-14-2017---visual-studio-for-mac-7101297">release notes</a>.</p>

<h2>.NET Core 2.0 Support</h2>

<p>Visual Studio for Mac 7.1 adds support for <a href="https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/">.NET Core 2.0</a> and .NET Standard 2.0.</p>

<p>The .NET Core 2.0 SDK needs to be <a href="https://www.microsoft.com/net/download/core">installed</a> separately.</p>

<h2>Target Framework Selection for New Projects</h2>

<p>If a project template supports multiple target frameworks, and the corresponding framework is available, then the New Project dialog will allow the framework to be selected before the project is created.</p>

<p><img src="/images/blog/DotNetCoreSupportInVisualStudioMac7-1/NewNetCoreProjectTargetFrameworkSelection.png" title="&lsquo;New .NET Core target framework selection&rsquo; &lsquo;New .NET Core target framework selection&rsquo;" ></p>

<p>Visual Studio for Mac includes project templates for .NET Core 1.0, 1.1 and 2.0 as well as for .NET Standard versions 1.0 through to 2.0.</p>

<p>To be able to create projects that target .NET Core 2.0 or .NET Standard 2.0 the .NET Core 2.0 SDK needs to be installed.</p>

<h2>New Project Templates</h2>

<p>The following project templates have been added:</p>

<ul>
<li>ASP.NET Core Web App (Razor Pages)

<ul>
<li>Available if .NET Core 2.0 SDK is installed.</li>
</ul>
</li>
<li>Class Library

<ul>
<li>Targets .NET Core instead of .NET Standard.</li>
</ul>
</li>
<li>MSTest</li>
</ul>


<p>Some project templates do not support all the target framework versions.
For example, the ASP.NET Core Web App (Razor Pages) only supports
.NET Core 2.0, so this template will only be displayed if .NET Core 2.0 SDK
is installed.</p>

<p>The F# project templates have some restrictions on what target frameworks
they support. The F# .NET Standard project templates do not
support selecting .NET Standard versions below 1.6. The F# Class Library project
only supports .NET Core 2.0.</p>

<h2>.NET Core Runtime and SDKs displayed in About Dialog</h2>

<p>The About dialog will now display the .NET Core runtimes and SDKs that are installed on
the local machine.</p>

<p><img src="/images/blog/DotNetCoreSupportInVisualStudioMac7-1/NetCoreInformationAboutDialog.png" title="&lsquo;.NET Core runtime and SDK information in About dialog&rsquo; &lsquo;.NET Core runtime and SDK information in About dialog&rsquo;" ></p>

<h2>Improved Support for Multi Target Framework Projects</h2>

<p>SDK style projects that target multiple frameworks can now be opened in Visual Studio for
Mac 7.1 and will show source files as well as NuGet package dependencies.</p>

<p>The project will be treated as though it only has
one target framework which is the first one specified in the
TargetFrameworks property in the project file.</p>

<p>Please note that currently the support for multiple target frameworks is limited in
comparison with Visual Studio on Windows.</p>

<h2>Bug Fixes</h2>

<p><strong>ASP.NET Core Web API project does not open API url on launching browser</strong></p>

<p>When an ASP.NET Core Web API project was run it would open a blank web
page in the browser instead of a page that showed the api values. Now when a new ASP.NET
Core Web API project is run the <code>http://localhost:&lt;port&gt;/api/values</code> url is launched in
the browser so the API values will be displayed.</p>

<p><strong>Unable to run or debug ASP.NET Core project with empty SDK directory</strong></p>

<p>If there was an empty directory inside the .NET Core SDK directory <code>/usr/local/share/dotnet/sdk</code> then it was
not possible to run or debug an ASP.NET Core web project</p>

<p>If the .NET Core SDK MSBuild files were not found in the SDK directory then the
project&rsquo;s OutputType was not read and would result in the project being treated
as a library project. This could also occur if only
the .NET Core runtime is installed.</p>

<p><strong>Shared project files shown for .NET Core project in Solution window</strong></p>

<p>When a .NET Core project referenced a shared assets project the files
from the shared project were incorrectly being displayed in the .NET Core project in
the Solution window.</p>

<p><strong>Fix generated code for resource files in .NET Core projects</strong></p>

<p>Adding a resx file to a .NET Core 1.x or .NET Standard 1.x project would result in
code being generated that could not be compiled.</p>

<p>Projects that target .NET Core App 1.0, 1.1, or .NET Standard below version 2.0
cannot compile code that uses <code>typeof(Resources).Assembly</code> which was
being generated by the ResXFileCodeGenerator. If these target frameworks
are used by the project then the code generated by Visual Studio for Mac
will now use <code>typeof(Resources).GetTypeInfo().Assembly</code> which is supported.</p>

<p>.NET Core 2.0 and .NET Standard 2.0 do not need to use GetTypeInfo so the
code generated for these frameworks has not been changed.</p>

<p><strong>Fix new resource file not added as Update item in Sdk projects</strong></p>

<p>Adding a new resource file to a .NET Core project would add the
.resx file and the .Designer.cs file as Include items instead of an
Update items.</p>

<pre><code>&lt;ItemGroup&gt;
  &lt;EmbeddedResource Include="Resources.resx"&gt;
    &lt;Generator&gt;ResXFileCodeGenerator&lt;/Generator&gt;
    &lt;LastGenOutput&gt;Resources.Designer.cs&lt;/LastGenOutput&gt;
  &lt;/EmbeddedResource&gt;
&lt;/ItemGroup&gt;
&lt;ItemGroup&gt;
  &lt;Compile Include="Resources.Designer.cs"&gt;
    &lt;DependentUpon&gt;Resources.resx&lt;/DependentUpon&gt;
  &lt;/Compile&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>This then caused the build to fail since these files are already included by
the .NET Core SDK.</p>
]]></content>
  </entry>
  
</feed>
