<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vsmac | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/vsmac/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2017-08-06T15:00:04+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Configuring Open With in Visual Studio for Mac 7.0]]></title>
    <link href="http://lastexitcode.com/blog/2017/08/06/ConfiguringOpenWithInVisualStudioMac7-0/"/>
    <updated>2017-08-06T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/08/06/ConfiguringOpenWithInVisualStudioMac7-0</id>
    <content type="html"><![CDATA[<p>Visual Studio on Windows can be <a href="https://msdn.microsoft.com/en-us/library/hy2sthf1.aspx">configured to use a different editor to open a file</a>. With Visual Studio for Mac, whilst you can open a file with a selection of editors and applications, it is not currently possible to change the default editor or add a custom application.</p>

<p>The <a href="https://github.com/mrward/monodevelop-open-with-addin">Open With addin</a> provides an Open With dialog that allows you to change the default editor or application used to open a file in a similar way to how this is done in Visual Studio on Windows.</p>

<h2>Features</h2>

<ul>
<li>Supports changing the default editor used to open a file.</li>
<li>Supports adding a custom application to open a file.</li>
<li>Editor configuration is saved and will be available on restarting Visual Studio for Mac.</li>
</ul>


<h2>Supports</h2>

<ul>
<li>Visual Studio Mac 7.0 or later.</li>
</ul>


<h2>Configuring the Default Editor or Application</h2>

<p>To configure the application or editor used to open file you can right click the file in the Solution window and select Open With &ndash; Preferences&hellip;</p>

<p><img src="/images/blog/ConfiguringOpenWithInVisualStudioMac7-0/OpenWithPreferencesMenu.png" title="&lsquo;Open With &ndash; Preferences context menu&rsquo; &lsquo;Open With &ndash; Preferences context menu&rsquo;" ></p>

<p>This will open the Open With dialog.</p>

<p><img src="/images/blog/ConfiguringOpenWithInVisualStudioMac7-0/OpenWithDialog.png" title="&lsquo;Open With dialog&rsquo; &lsquo;Open With dialog&rsquo;" ></p>

<p>The editors and applications that support opening the file are displayed. The default application is indicated by having (Default) next to its name.</p>

<p>To change the default application or editor used to open the file select it and then click the Set as Default button. Click OK to close the dialog and save the configuration.</p>

<p>If a file is currently open then it will need to be closed before it is opened in the new default editor or application.</p>

<h2>Adding a Custom Application</h2>

<p>A custom application can be added to the list of applications shown in the Open With menu. First open the Open With dialog by selecting Open With &ndash; Preferences. Then click the Add button to open the Add Application dialog.</p>

<p><img src="/images/blog/ConfiguringOpenWithInVisualStudioMac7-0/AddApplicationDialog.png" title="&lsquo;Add Application dialog&rsquo; &lsquo;Add Application dialog&rsquo;" ></p>

<p>The Browse button can be used to find an application.</p>

<p>The Friendly Name is the name that will be displayed in the Open With menu for the custom application.</p>

<p>Arguments cannot be specified if a Mac application (.app) is used. However if the application is not a Mac application, for example, it is a C# program, then arguments can be passed. To pass the filename to the program you can use {0} in the Arguments text box. This placeholder will be expanded to be the full filename path when the program is run.</p>

<h2>Removing a Custom Application</h2>

<p>To remove a custom application for a file first open the Open With dialog by selecting Open With &ndash; Preferences. Select the application you want to remove. Then click the Remove button.</p>

<p>The Remove button is only enabled for custom applications that you have added. The built-in editors and applications cannot be removed.</p>

<h2>Installation</h2>

<p>The Open With addin is available to download from <a href="https://github.com/mrward/monodevelop-open-with-addin/releases/download/0.1/MonoDevelop.OpenWith_0.1.mpack">GitHub</a>.</p>

<p>To install the addin open the Extensions Manager by selecting Extensions&hellip; from the main menu. Click the Install from file button. Select the .mpack file and then click the Open button.</p>

<p>The addin is also available from a <a href="https://github.com/mrward/monodevelop-addins">custom MonoDevelop 7.0 addin server</a>. It is not currently published to the main MonoDevelop addin server.</p>

<h2>Source Code</h2>

<ul>
<li><a href="https://github.com/mrward/monodevelop-open-with-addin">Open With addin for Visual Studio for Mac</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.0]]></title>
    <link href="http://lastexitcode.com/blog/2017/06/04/NuGetSupportInVisualStudioMac7-0/"/>
    <updated>2017-06-04T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/06/04/NuGetSupportInVisualStudioMac7-0</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> .NET Core support</li>
<li> NuGet 4.0 support</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.0</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes">release notes</a>.</p>

<h2>.NET Core Support</h2>

<p>.NET Core projects do not show a Packages folder in the Solution window. Instead the NuGet packages are displayed in a NuGet folder, which is inside a Dependencies folder.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-0/NetCoreProjectJsonNetPackageInSolutionWindow.png" title="&lsquo;Newtonsoft.Json NuGet package in Solution window &ndash; .NET Core project&rsquo; &lsquo;Newtonsoft.Json NuGet package in Solution window &ndash; .NET Core project&rsquo;" ></p>

<p>The version of the NuGet package is displayed directly in the Solution window. For other project types you need to right click the package to see the version.</p>

<p>If the NuGet package depends on other packages then these can be seen by clicking on the arrow to expand the dependencies.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-0/NetCoreProjectJsonNetPackageExpandedInSolutionWindow.png" title="&lsquo;Newtonsoft.Json NuGet package expanded in Solution window &ndash; .NET Core project&rsquo; &lsquo;Newtonsoft.Json NuGet package expanded in Solution window &ndash; .NET Core project&rsquo;" ></p>

<h3>Restoring Packages</h3>

<p>NuGet packages will be restored automatically on opening a .NET Core project. This can be disabled in preferences by unchecking <strong>Automatically restore packages when opening a solution</strong> in the NuGet &ndash; General section.</p>

<p>You can manually restore NuGet packages for .NET Core projects by:</p>

<ul>
<li>Right clicking the Dependencies folder and selecting Restore.</li>
<li>Right clicking the NuGet folder and selecting Restore.</li>
<li>Selecting Restore NuGet Packages from the Project menu.</li>
</ul>


<p>Selecting Restore NuGet Packages from the Project menu will restore packages for the project or the solution depending on what is currently selected in the Solution window.</p>

<p>Restoring NuGet packages for a .NET Core project works differently compared with a project that uses a packages.config file. The NuGet packages themselves will be downloaded into the NuGet package cache folder ~/.nuget/packages if they do not exist, as before, but the NuGet packages will not be copied into a packages directory inside the solution&rsquo;s directory. The project file will not contain have any Reference items added when a NuGet package is installed.</p>

<p>When a NuGet restore is run for a .NET Core project three files in the obj directory are created.</p>

<ul>
<li>project.assets.json</li>
<li>ProjectName.csproj.nuget.g.props</li>
<li>ProjectName.csproj.nuget.g.targets</li>
</ul>


<p>The project.assets.json file contains the dependencies for your project.</p>

<p>The nuget.g.props and nuget.g.targets files will contain any MSBuild imports that your NuGet package requires and they also define some properties, such as the path to the NuGet package cache on your machine.</p>

<p>These three files are used when building your project to resolve the assemblies to be referenced now that they are no longer explicitly stored in your project file.</p>

<h3>Updating Packages</h3>

<p>NuGet packages can be updated by:</p>

<ul>
<li>Right clicking the package inside the NuGet folder and selecting Update.</li>
<li>Right clicking the NuGet folder and selecting Update.</li>
<li>Right clicking the Dependencies folder and selecting Update.</li>
<li>Selecting Update NuGet Packages from the Project menu.</li>
</ul>


<p>Selecting Update NuGet Packages from the Project menu will update all packages in the project or in the solution depending on what is currently selected in the Solution window.</p>

<h3>Removing Multiple NuGet Packages in One Step</h3>

<p>You can remove multiple NuGet packages in one step from a .NET Core project by selecting the packages in the Solution window, right clicking and selecting Remove.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-0/NetCoreProjectRemoveMultipleNuGetPackagesInSolutionWindow.png" title="&lsquo;Removing multiple NuGet packages in Solution window &ndash; .NET Core project&rsquo; &lsquo;Removing multiple NuGet packages in Solution window &ndash; .NET Core project&rsquo;" ></p>

<p>Projects that use a packages.config file do not support removing multiple NuGet packages in one step.</p>

<h3>Installing NuGet Packages</h3>

<p>NuGet packages are installed by using the Add Packages dialog in the same way as with other project types. To open the Add Packages dialog for a .NET Core project:</p>

<ul>
<li>Right click the NuGet folder and select Add Packages&hellip;</li>
<li>Right click the Dependencies folder and select Add Packages&hellip;</li>
<li>Right click the project and select Add &ndash; Add NuGet Packages&hellip;</li>
<li>From the Project menu select Add NuGet Packages&hellip;</li>
</ul>


<p>When the first NuGet package is installed into a .NET Core project a packages.config file will not be created. Instead the NuGet package will be added as a <a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files">PackageReference</a> that is saved in the project file.</p>

<h3>Package Reference</h3>

<p>.NET Core projects do not use a packages.config file to record their NuGet dependencies. Instead the .NET Core project file will contain a <a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files">PackageReference</a> after the NuGet package is installed into the project.</p>

<p>```
<Project Sdk="Microsoft.NET.Sdk"></p>

<p>  <PropertyGroup></p>

<pre><code>&lt;OutputType&gt;Exe&lt;/OutputType&gt;
&lt;TargetFramework&gt;netcoreapp1.1&lt;/TargetFramework&gt;
</code></pre>

<p>  </PropertyGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;PackageReference Include="Newtonsoft.Json" Version="10.0.2" /&gt;
</code></pre>

<p>  </ItemGroup>
</Project>
```</p>

<p>Please note that Visual Studio for Mac currently only supports package references with the new SDK style projects which are used by .NET Core. If you use package references in other project types then the Solution window will not show the packages and a packages.config file will be created if you install a NuGet package.</p>

<h3>Updated Packages Available</h3>

<p>For other project types the Solution window will check for updated packages and show this information in the Packages folder. This is not currently supported with .NET Core projects.</p>

<h2>NuGet 4.0 Support</h2>

<p>Visual Studio for Mac now includes <a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.0-rtm">NuGet 4.0</a>.</p>

<p>More information on the new features provided by NuGet 4.&ndash; can be found in the <a href="http://blog.nuget.org/20170308/Announcing-NuGet-4.0-RTM.html">Announcing NuGet 4.0 RTM blog post</a> and the <a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.0-rtm">NuGet 4.0 release notes</a>.</p>
]]></content>
  </entry>
  
</feed>
