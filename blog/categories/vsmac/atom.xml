<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vsmac | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/vsmac/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2018-03-11T14:37:25+00:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.4]]></title>
    <link href="http://lastexitcode.com/blog/2018/03/11/NetCoreSupportInVisualStudioMac7-4/"/>
    <updated>2018-03-11T11:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2018/03/11/NetCoreSupportInVisualStudioMac7-4</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Solution window detects file system changes outside Visual Studio for Mac</li>
<li> Projects with unknown target frameworks can now be loaded

<ul>
<li><a href="https://oren.codes/2017/08/29/use-all-tfms-with-sdk-style-projects-in-visual-studio-for-mac/">MSBuild SDK Extras</a> is now supported without requiring an extra extension to be installed</li>
<li>Tizen.NET projects are now supported</li>
</ul>
</li>
<li> Fixed xUnit test messages not being displayed</li>
<li> ASP.NET Core minified files are no longer formatted</li>
<li> Support target framework defined in another MSBuild property</li>
<li> Show SDK information before dependencies are restored</li>
<li> Fixed failure to add new file when the default project namespace contains only numbers</li>
<li> Fixed remove item not added for .xaml.cs file</li>
<li> Fixed incorrect project updates when moving a file</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.4</a> can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#15.6">release notes</a>.</p>

<h2>Solution window detects file system changes</h2>

<p>Files created in the project directory, or a subdirectory,
outside Visual Studio for Mac are now added to the project and
appear in the Solution window automatically.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-4/DotNetCoreProjectFileWatcher.gif" title="&lsquo;File added and removed from command line &ndash; Solution window updated&rsquo; &lsquo;File added and removed from command line &ndash; Solution window updated&rsquo;" ></p>

<p>Deleting project files and directories will remove the files from
the Solution window. The Solution window will also update after
a file or a directory is renamed outside Visual Studio for Mac.</p>

<p><strong>Allow unknown target framework projects to be loaded</strong></p>

<p>The target framework of an SDK style project is no longer restricted.
Previously Visual Studio for Mac would fail to load an SDK style
project unless its target framework was .NET Standard, .NET Core App
or .NET Framework.</p>

<p>This allows Tizen projects to be loaded without the error message
&ldquo;Project does not support framework &lsquo;Tizen,Version=v4.0&rsquo;&rdquo; being
displayed. Tizen projects have a Tizen.NET package reference which
imports an MSBuild .props file that defines the Tizen target framework.</p>

<p>The <a href="https://github.com/onovotny/MSBuildSdkExtras">MSBuild.Sdk.Extras</a> NuGet
package is now supported so SDK style projects can use target frameworks
that this NuGet package
supports, such as Xamarin.iOS and MonoAndroid.</p>

<p>On building a project with an unknown target framework, that is
not defined by any used NuGet package references, a build error
that indicates the framework is not supported will occur:</p>

<pre><code>The TargetFramework value 'test1.0' was not recognized.
</code></pre>

<p>NuGet restore will also fail for an unknown target framework with
a message indicating the framework is invalid.</p>

<h2>Bug Fixes</h2>

<p><strong>Fix xUnit test messages not displayed</strong></p>

<p>xUnit tests support an ITestOutputHelper interface which can be
passed to the constructor of the test. This has a WriteLine method
which can be used to output messages whilst running the test. When
this was used the text displayed in Visual Studio for Mac&rsquo;s Test Results
window was:</p>

<pre><code>Microsoft.VisualStudio.TestPlatform.ObjectModel.TestResultMessage
</code></pre>

<p>Now the text from the message is shown in the Tests Results window.</p>

<p><strong>Support target framework defined in another MSBuild property</strong></p>

<p>An SDK style project that defined the <TargetFrameworks> element to
be another MSBuild property would fail to restore.</p>

<p>In the example below the property TheFramework is defined in the
Frameworks.props file.</p>

<pre><code>&lt;Project Sdk="Microsoft.NET.Sdk"&gt;
  &lt;Import Project="Frameworks.props" /&gt;
  &lt;PropertyGroup&gt;
    &lt;TargetFrameworks&gt;$(TheFramework)&lt;/TargetFrameworks&gt;
  &lt;/PropertyGroup&gt;
&lt;/Project&gt;
</code></pre>

<p>The unevaluated MSBuild property value was used and would result in the
NuGet package restore failing.</p>

<p>Now the evaluated property value is used when restoring dependencies.</p>

<p><strong>ASP.NET Core minified files and map files are no longer formatted</strong></p>

<p>On creating a new ASP.NET Core project the minified files were being
re-formatted and were no longer minified. Now the .min.css, .min.js and
.map files are excluded from being re-formatted when a new ASP.NET Core
project is created.</p>

<p><strong>Fixed failure to add a new file when the default project namespace contains only numbers</strong></p>

<p>If a project has a default namespace of &lsquo;1&rsquo; then adding a new C#
file from a template would throw a null reference
exception. The problem was that the sanitized namespace for the project&rsquo;s
default namespace was null.</p>

<p><strong>Show SDK information before dependencies are restored</strong></p>

<p>When a new .NET Core project is created the Dependencies &ndash; SDK folder
would show no items until the NuGet package restore completed. Now
the SDK dependency is shown whilst the dependencies are being restored.</p>

<p><strong>Fixed remove item not added for .xaml.cs file</strong></p>

<p>When a new content page with xaml file was
added and then removed, but not deleted,
a remove item was not added for the .xaml.cs file.</p>

<p><strong>Fixed incorrect project updates when moving a file</strong></p>

<p>Moving a Resource file from one folder to another would not update
the project file correctly. Either the project file would not be
modified or the file would be removed.</p>

<p>One problem was that on moving a clone is taken of the original item
and the associated MSBuild item was copied but was still referring
back to the original location. Another problem was that an incorrect
match was being made when looking for remove items resulting in the
wrong files being removed from the project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.4]]></title>
    <link href="http://lastexitcode.com/blog/2018/03/10/NuGetSupportInVisualStudioMac7-4/"/>
    <updated>2018-03-10T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2018/03/10/NuGetSupportInVisualStudioMac7-4</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Support NuGet RestoreProjectStyle MSBuild Property</li>
<li> .NET Core xUnit tests not displayed if NuGet packages not cached</li>
<li> No tests displayed when project uses a NUnit PackageReference</li>
<li> NuGet MSBuild imports not removed when migrating to project.json</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.4</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#15.6">release notes</a>.</p>

<h2>Support RestoreProjectStyle MSBuild property</h2>

<p>If a project sets the RestoreProjectStyle property to be
PackageReference then the project will be restored as though it has
PackageReferences even if it does not have any.</p>

<pre><code>&lt;RestoreProjectStyle&gt;PackageReference&lt;/RestoreProjectStyle&gt;
</code></pre>

<p>This fixes runtime problems when a project references a .NET Standard
project that has PackageReferences. Without the RestoreProjectStyle set
the assemblies from the NuGet packages are not copied to the output
directory and would have to be added to the main project.</p>

<h2>Bug Fixes</h2>

<p><strong>.NET Core xUnit tests not displayed if NuGet packages are not in local NuGet cache</strong></p>

<p>If the NuGet packages that contain the VS Test adapters were not available in
the local machine&rsquo;s NuGet package cache then
the Unit Tests window would not show any tests after the NuGet
packages were restored and the project was compiled.</p>

<p>Visual Studio for Mac would not initially find any test adapter dlls
and would not attempt to discover any tests for the project after the
NuGet packages were downloaded into the NuGet package cache.</p>

<p>Now after the NuGet package restore has completed the check for a
VS Test adapter is now re-run.</p>

<p><strong>No tests displayed when a project uses a NUnit PackageReference</strong></p>

<p>The Unit Tests window would not show any unit tests when a non .NET
Core project contained a NUnit PackageReference. Visual Studio for
Mac was looking for a PackageReference that contained &lsquo;nunit.framework&rsquo;
and was not finding the NUnit NuGet package reference.</p>

<p><strong>NuGet MSBuild imports not removed when migrating to project.json</strong></p>

<p>When a Portable Class Library project was migrated to use a project.json
file the MSBuild imports added by NuGet were not removed. These imports
are added by NuGet into the generated ProjectName.nuget.props and
ProjectName.nuget.targets files on restoring a project.json file.
Leaving the import in the project file would result in the import
being used twice. When a PCL project that used Xamarin.Forms was
migrated to project.json the project would fail to compile with the
error:</p>

<pre><code>Error XF001: Xamarin.Forms targets have been imported multiple times.
Please check your project file and remove the duplicate import(s).
</code></pre>

<p>Now on migrating to project.json the MSBuild imports added by NuGet packages
to the project are removed.</p>

<p><strong>Fix unhandled exception when searching for packages</strong></p>

<p>An unhandled exception was being logged if a package source returned
an error or the package source url was invalid. This was because a
task was not being observed when the package sources were being used.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.3]]></title>
    <link href="http://lastexitcode.com/blog/2017/12/18/NetCoreSupportInVisualStudioMac7-3/"/>
    <updated>2017-12-18T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2017/12/18/NetCoreSupportInVisualStudioMac7-3</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> <a href="https://github.com/Microsoft/vstest">VSTest</a> Console Runner now included with Visual Studio for Mac

<ul>
<li>Allows <a href="https://xunit.github.io">xUnit</a> tests to be supported for non .NET Core projects</li>
</ul>
</li>
<li> Renamed ASP.NET Core Project Templates</li>
<li> New ASP.NET Core F# Project Templates Added</li>
<li> Support Backslash in Project Template Primary Output Path</li>
<li> Support <a href="https://github.com/NuGet/Home/wiki/%5BSpec%5D-NuGet-settings-in-MSBuild">NuGet Restore MSBuild Properties</a>

<ul>
<li>RestoreAdditionalProjectFallbackFolders</li>
<li>RestoreAdditionalProjectSources</li>
<li>RestoreFallbackFolders</li>
<li>RestorePackagesPath</li>
<li>RestoreSources</li>
</ul>
</li>
<li> Fixed transitive project references not supported</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.3</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-december-4-2017---visual-studio-2017-version-73-730797">release notes</a></p>

<h2>VSTest Console Runner</h2>

<p>Previous versions of Visual Studio for Mac would use <strong>dotnet vstest</strong>,
included with the .NET Core SDK,
to run unit tests for .NET Core projects. Now Visual Studio for Mac includes
the <a href="https://github.com/Microsoft/vstest">VSTest</a> Console runner and uses that instead of using the .NET Core SDK.</p>

<p>The standalone VSTest Console runner allows other project types, not just .NET Core projects, to
be supported. Visual Studio for Mac can now run <a href="https://xunit.github.io">xUnit</a> tests
for .NET Framework projects. Previously only NUnit was supported.</p>

<p>Let us take a look at using xUnit in a .NET Framework project.</p>

<p>First create a .NET Framework Library project by opening the New Project dialog and selecting
Library from the Other &ndash; .NET &ndash; General category.</p>

<p>Install the following NuGet packages into the project.</p>

<ul>
<li>xunit</li>
<li>xunit.runner.visualstudio</li>
</ul>


<p>Edit MyClass.cs and add some xUnit tests, as shown below:</p>

<p>```</p>

<p>using Xunit;</p>

<p>namespace xUnitTests
{</p>

<pre><code>public class MyClass
{
    [Fact]
    public void PassingTest()
    {
        Assert.True(true);
    }

    [Fact]
    public void FailingTest()
    {
        Assert.False(true);
    }
}
</code></pre>

<p>}</p>

<p>```</p>

<p>Building the project should then show the xUnit tests in the Unit Tests window.</p>

<p><img src="/images/blog/NetCoreSupportInVisualStudioMac7-3/xUnitTestsInUnitTestsWindow.png" title="&lsquo;xUnit tests in Unit Tests window&rsquo; &lsquo;xUnit tests in Unit Tests window&rsquo;" ></p>

<p>Note that, due to a bug in Visual Studio for Mac, the tests may not appear in the
Unit Tests window if the
xunit.runner.visualstudio was not available in the local machine&rsquo;s NuGet
package cache when it was added to the project. Closing and re-opening the
solution should allow the tests to be discovered.</p>

<p>The tests can then be run or debugged in the usual way.</p>

<p>Currently MSTest is not yet supported in .NET Framework projects. The tests are discovered
but they fail to run with an access denied error message:</p>

<pre><code>An exception occurred while invoking executor 'executor://mstestadapter/v2': 
Access to the path "/TestResults" is denied.
</code></pre>

<h2>Renamed ASP.NET Core Project Templates</h2>

<p>The ASP.NET Core template names displayed in the New Project dialog
have been changed to be more consistent with Visual Studio on Windows.</p>

<ul>
<li>&lsquo;ASP.NET Core Web App (Razor Pages)&rsquo; renamed to &lsquo;ASP.NET Core Web App&rsquo;</li>
<li>&lsquo;ASP.NET Core Web App&rsquo; renamed to &lsquo;ASP.NET Core Web App (MVC)&rsquo;</li>
</ul>


<p>Visual Studio uses (Model-View-Controller) but the shorter
MVC is used by Visual Studio for Mac.</p>

<h2>New ASP.NET Core F# Project Templates Added</h2>

<p>The following ASP.NET Core F# project templates are now available from the
New Project dialog.</p>

<ul>
<li>ASP.NET Core Empty

<ul>
<li>.NET Core 1.x and 2.0</li>
</ul>
</li>
<li>ASP.NET Core Web API

<ul>
<li>.NET Core 2.0 only</li>
</ul>
</li>
</ul>


<h2>Support Backslash in Project Template Primary Output Path</h2>

<p>The template.json file used by the new templating engine uses a
primaryOutputs property for projects and files. If the paths used
contained backslashes then the project was not added to the
solution.</p>

<p><code>
"primaryOutputs": [
  { "path": "Library1\\Library1.csproj" },
  { "path": "Library2\\Library2.csproj" }
]
</code></p>

<p>Now the paths have the backslashes replaced with forward slashes if
the current platform does not support backslash as a path
separator.</p>

<h2>Support RestoreAdditionalProjectFallbackFolders MSBuild Property</h2>

<p>The RestoreAdditionalProjectFallbackFolders MSBuild property is
read and appended to the list of fallback folders stored in the
project.assets.json file. The .NET Core 2.0 SDK will set this
MSBuild property to point to the NuGet package fallback folder
that is installed with the SDK. This will be used
to resolve NuGet packages first before downloading them to the
~/.nuget/packages folder.</p>

<h2>Support RestoreAdditionalProjectSources MSBuild Property</h2>

<p>The RestoreAdditionalProjectSources MSBuild property can be used
to add additional package sources to the existing list of sources
used to resolve packages.</p>

<h2>Support RestoreFallbackFolders MSBuild Property</h2>

<p>The RestoreFallbackFolders MSBuild property can be used by project that uses
PackageReferences to define a set of package fallback folders that
will override any specified in the NuGet.Config file. It can also
be used to clear any pre-defined fallback folders by specifying
&lsquo;clear&rsquo; as its value. Note that this value does not affect any
folders defined by RestoreAdditionalProjectFallbackFolders which
will be appended even if RestoreFallbackFolders is set to &lsquo;clear&rsquo;.</p>

<h2>Support RestorePackagesPath MSBuild Property</h2>

<p>The RestorePackagesPath MSBuild property can be used to override the global packages
folder location when a project uses a PackageReference.</p>

<h2>Support RestoreSources MSBuild property</h2>

<p>The RestoreSources MSBuild property can be used to override
the sources defined by any NuGet.Config file. Any sources defined in the
RestoreAdditionalProjectSources MSBuild property will still be appended to the
list of sources if RestoreSources is defined.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed Transitive Project References not supported</strong></p>

<p>With three .NET Core projects, LibC referencing LibB referencing LibA,
the types defined by LibA were not available to LibC unless it was
directly referencing LibA. In Visual Studio for Mac 7.3 the types
defined by LibA are available to LibC without LibC directly
referencing LibA.</p>

<p><strong>Portable Class Library projects can now be referenced by .NET Core projects</strong></p>

<p>Portable Class Library (PCL) projects could not be referenced by .NET Core
projects or .NET Standard projects. The Edit References dialog would show
&ldquo;Incompatible target framework&rdquo; for the PCL project when trying to add the
reference.</p>

<p>Visual Studio for Mac now has the same behaviour as Visual Studio on Windows where
a .NET Standard project can reference any PCL project.</p>

<p><strong>Fixed MSBuild Update item not removed from project</strong></p>

<p>If a file was deleted from a project, or removed without deleting,
and the file was the last file for a particular wildcard include, the
Update item for the file was not being removed from the project.</p>

<p><strong>Fixed MSBuild Remove item not added when Update item exists</strong></p>

<p>With a project that contained a single .cs file, and that file had
an Update item defined, when the file was removed from the project,
without deleting it, a Remove item was not being added to the project for the file.</p>

<p><strong>Fixed Remove item not being added when file excluded from project</strong></p>

<p>When the last file was removed from the project, but not deleted, an
MSBuild Remove item was not added to the project for the file.</p>

<ol>
<li>Create a .NET Standard 2.0 project.</li>
<li>Right click Class1.cs and select Remove.</li>
<li>Select Remove from Project in the dialog that opens.</li>
<li>Close and re-open solution.</li>
</ol>


<p>The Class1.cs file was still shown in the Solution window when it should have been
removed. The project file did not have a Compile remove item for Class1.cs when it should
have been added:</p>

<pre><code>&lt;Compile Remove="Class1.cs" /&gt;
</code></pre>

<p><strong>Deleting a XAML file left an MSBuild Remove item in project file</strong></p>

<p>When a .xaml file in a project was deleted the associated
Remove MSBuild item, if it was present, was not being removed from the
project file.</p>

<ol>
<li> Create a new .NET Standard 2.0 project.</li>
<li> Add Xamarin.Forms 2.3 NuGet package.</li>
<li> Add a new Content Page with Xaml file using the New File dialog.</li>
<li> In the Solution window select the .xaml file and delete it.</li>
</ol>


<p>All MSBuild items associated with the .xaml file should have been
removed from the project file but instead a None item would remain.</p>

<pre><code>&lt;None Remove="MyPage.xaml" /&gt;
</code></pre>

<p><strong>Fix MSBuild remove item not added when adding a XAML file</strong></p>

<p>Adding a new .xaml file to a project was not adding a None Remove
item for the .xaml file to remove it from the default wildcard include for all
files.</p>

<pre><code>&lt;None Remove="MyNewPage.xaml" /&gt;
</code></pre>

<p>On reloading the solution the Solution window would show two .xaml
files &ndash; one EmbeddedResource item and one None item.</p>

<p><strong>Fixed MSBuild condition evaluation when using Czech locale</strong></p>

<p>With the primary operating system language set to Czech, creating a new .NET
Core project would result in the project having a target framework of net461.</p>

<p>The problem was that Single.TryParse was returing true for an empty string
when the machine&rsquo;s culture was &lsquo;cs-CZ&rsquo;. This was causing the MSBuild condition
evaluation to be treated as a boolean comparison incorrectly in some cases.
The condition below would return false even though the property was
not defined and both sides of the condition were empty strings:</p>

<pre><code>&lt;PropertyGroup Condition="'$(TargetFrameworkIdentifier)' == ''"&gt;
</code></pre>

<p>This was causing the TargetFrameworkIdentifier to not be set for
.NET Core projects so the default of .NETFramework was being used.</p>

<p><strong>Re-evaluate AppliesTo condition on capability change</strong></p>

<p>Fixed the AppliesTo attribute not attaching a project extension to
a project after a NuGet package restore enabled a project capability.
The AppliesTo attribute allows a project extension to be associated
to a project based on its capabilities.</p>

<p>If the project extension uses an AppliesTo attribute which is
initially false and then a new project capability is added, and the
project is re-evaluated, the AppliesTo attribute is now
re-evaluated. This will then cause the project extension to be
attached to the project. If the project extension was attached to the
project and the project capability is removed then the project
extension will now be removed when the project is re-evaluated.</p>

<p><strong>Fixed being unable to run a new Azure Functions project</strong></p>

<p>Creating a new Azure Functions project would result in
being unable to run the project until the solution was closed
and re-opened again. After the NuGet packages are restored the
project can be run but this information was not updated in Visual Studio
for Mac.</p>

<p>Now after a NuGet package restore, when re-evaluating the project,
the solution startup item is updated if there is no startup item
already defined.</p>

<p>When the project capability is removed, due to a NuGet package
being uninstalled, and the
project can no longer be run the startup item will be updated if
it was previously set to be this project.</p>

<p><strong>Fix generated NuGet files being imported twice</strong></p>

<p>The ProjectName.nuget.g.targets and ProjectName.nuget.g.props,
that are generated for .NET Core projects in the base intermediate
directory, were being imported twice.
Once by Microsoft.Common.props, that is provided with Mono, and once
again by Visual Studio for Mac.</p>

<p>Importing these files twice was causing a duplicate file to be added to
the project information held in memory by Visual Studio for Mac
when Xamarin.Forms 2.4 was used and no .NET Core SDK was installed.
This would result in the content page xaml and associated C# file not
being nested in the solution window.</p>

<p><strong>Fixed items added to project when a new content page with XAML was created</strong></p>

<p>Adding a new Xamarin.Forms content page with XAML would add an
update item for the .xaml.cs file, a remove item for the xaml file,
and an include item for the xaml file.</p>

<p>An example is Xamarin.Forms 2.4 which defines wildcard includes:</p>

<pre><code>&lt;None Remove="**\*.xaml" /&gt;
&lt;EmbeddedResource Include="**\*.xaml" SubType="Designer" Generator="MSBuild:UpdateDesignTimeXaml" /&gt;
</code></pre>

<p>Which would cause a new .xaml file added to the project and saved
in the project file as well as a remove for the None item even though
the .xaml file was already removed from the None items.</p>

<pre><code>&lt;None Remove="MyView.xaml" /&gt;

&lt;EmbeddedResource Include="MyView.xaml"&gt;
  &lt;Generator&gt;MSBuild:UpdateDesignTimeXaml"&lt;/Generator&gt;
&lt;/EmbeddedResource&gt;
</code></pre>

<p><strong>Fix DependentUpon property being saved in project</strong></p>

<p>Xamarin.Forms 2.4 defines an update item similar to:</p>

<pre><code>&lt;Compile Update="**\*.xaml.cs" DependentUpon="%(Filename)" /&gt;
</code></pre>

<p>When a project was saved a Compile item was added to the main project
with the filename stored in the DependentUpon element. Now
the evaluated DependentUpon value is treated as being the default
value so it is not added to the project file.</p>

<p><strong>Fix xaml.cs files not being nested</strong></p>

<p>Xamarin.Forms 2.4 defines an update item similar to:</p>

<pre><code>&lt;Compile Update="**\*.xaml.cs" DependentUpon="%(Filename)" /&gt;
</code></pre>

<p>The DependentUpon property was being evaluated as &lsquo;*.xaml.cs&rsquo;.
This was causing .xaml.cs files to not be nested in the Solution window.</p>

<p><strong>Fixed build error when Xamarin.Forms 2.4 used in a .NET Standard project</strong></p>

<p>If a Xamarin.Forms .NET Standard project had a
.xaml file and a .xaml.cs file then the xaml.g.cs file would not be
generated when the project file contained no files. The
default items defined by the Xamarin.Forms NuGet package were not
being imported. This then caused a build error about the
InitializeComponent method not being defined.</p>

<p>Xamarin.Forms 2.4.0 uses default
item imports which were not being included since they are conditionally
imported and the MSBuildSDKsPath was not defined:</p>

<pre><code>&lt;Import Project="$(MSBuildThisFileDirectory)Xamarin.Forms.DefaultItems.props" Condition="'$(MSBuildSDKsPath)'!=''" /&gt;
</code></pre>

<p>MSBuild on the command line defines the MSBuildSDKsPath globally in
its MSBuild.dll.config file. The MSBuild engine host, used when
building a project in Visual Studio for Mac, now also defines the
MSBuildSDKsPath property.</p>

<p><strong>Fixed remove item added when removing a linked file</strong></p>

<p>Deleting a file link in a .NET Core project would add a remove item
for the file instead of removing the link from the project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.3]]></title>
    <link href="http://lastexitcode.com/blog/2017/12/10/NuGetSupportInVisualStudioMac7-3/"/>
    <updated>2017-12-10T11:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2017/12/10/NuGetSupportInVisualStudioMac7-3</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Support installing System.ValueTuple NuGet Package from Quick Fixes</li>
<li> NuGetizer 3000 &ndash; Update NuGet.Build.Packaging to version 0.2</li>
<li> Support NuGet Restore MSBuild Properties

<ul>
<li>RestoreAdditionalProjectFallbackFolders</li>
<li>RestoreAdditionalProjectSources</li>
<li>RestoreFallbackFolders</li>
<li>RestorePackagesPath</li>
<li>RestoreSources</li>
</ul>
</li>
<li> Fixed transitive dependencies not available when using project.json</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.3</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-december-4-2017---visual-studio-2017-version-73-730797">release notes</a>.</p>

<h2>Quick Fix &ndash; Install System.ValueTuple NuGet Package</h2>

<p><a href="https://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/">C# 7.0 introduced tuple types</a>
that may require the System.ValueTuple NuGet package
to be added to the project. Visual Studio for Mac
now offers to install the System.ValueTuple NuGet package if the project requires this NuGet package.</p>

<p>Creating a .NET Framework 4.6 project with the following code:</p>

<p>```</p>

<pre><code>public (string, int) GetValues(string id)
{
    return ("Name", 25);
}
</code></pre>

<p>```</p>

<p>You will see error markers in the text editor. If you hover over
one of these error markers you will see a
<strong>Predefined type &lsquo;System.ValueTuple`2&rsquo; is not defined or imported</strong> message.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-3/ValueTupleTextEditorErrorTooltip.png" title="&lsquo;ValueTuple type not defined text editor error tooltip&rsquo; &lsquo;ValueTuple type not defined text editor error tooltip&rsquo;" ></p>

<p>If you right click the error marker there is now a new
<strong>Install Package &lsquo;System.ValueTuple&rsquo;</strong> Quick Fix action available.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-3/TextEditorInstallSystemValueTuplePackageQuickFix.png" title="&lsquo;Text editor Install System.ValueTuple Package quick fix menu item&rsquo; &lsquo;Text editor Install System.ValueTuple Package quick fix menu item&rsquo;" ></p>

<p>From this menu you can install the latest System.ValueTuple NuGet package
or open the Add Packages dialog to search for a specific version of the System.ValueTuple NuGet
package.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-3/TextEditorInstallLatestSystemValueTupleQuickFix.png" title="&lsquo;Text editor install latest System.ValueTuple package quick fix menu item&rsquo; &lsquo;Text editor install latest System.ValueTuple package quick fix menu item&rsquo;" ></p>

<p>Note that if the project is targeting .NET Framework 4.7 or .NET Standard 2.0 then the
System.ValueTuple NuGet package is not required.</p>

<p>Also note that the official nuget.org package source needs to be available
for this feature to work.</p>

<h2>NuGetizer 3000 &ndash; Updated NuGet.Build.Packaging to version 0.2</h2>

<p>The version of the NuGet.Build.Packaging NuGet package used by default for NuGetizer 3000 support
has been updated from 0.1.276 to 0.2.0. This fixes a
potential build error when building with Mono 5.6.</p>

<p><code>
Using "ReportAssetsLogMessages" task from assembly "/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/../tools/net46/Microsoft.NET.Build.Tasks.dll".
Task "ReportAssetsLogMessages"
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: The "ReportAssetsLogMessages" task failed unexpectedly. [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: System.TypeLoadException: Could not resolve type with token 0100005b (from typeref, class/assembly NuGet.ProjectModel.IAssetsLogMessage, NuGet.ProjectModel, Version=4.3.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35) [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: at Microsoft.NET.Build.Tasks.TaskBase.Execute () [0x00000] in &lt;01420900fd004c128de2d2ee31bad624&gt;:0 [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00023] in &lt;765502eb2f884ce79731edeb4b0517fb&gt;:0 [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: at Microsoft.Build.BackEnd.TaskBuilder+d__26.MoveNext () [0x0022d] in &lt;765502eb2f884ce79731edeb4b0517fb&gt;:0 [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
</code></p>

<p>The ReadLegacyDependencies target from NuGet.Build.Packaging.Tasks is called when PackOnBuild
is set to true.</p>

<p>The NuGet.Build.Packaging.Tasks assembly was loading an embedded NuGet.ProjectModel
assembly that conflicts with the version that is used by Microsoft.NET.Build.Tasks.</p>

<h2>Support RestoreAdditionalProjectFallbackFolders MSBuild Property</h2>

<p>The RestoreAdditionalProjectFallbackFolders MSBuild property is
read and appended to the list of fallback folders stored in the
project.assets.json file. The .NET Core 2.0 SDK will set this
MSBuild property to point to the NuGet package fallback folder
that is installed with the SDK. This will be used
to resolve NuGet packages first before downloading them to the
~/.nuget/packages folder.</p>

<h2>Support RestoreAdditionalProjectSources MSBuild Property</h2>

<p>The RestoreAdditionalProjectSources MSBuild property can be used
to add additional package sources to the existing list of sources
used to resolve packages.</p>

<h2>Support RestoreFallbackFolders MSBuild Property</h2>

<p>The RestoreFallbackFolders MSBuild property can be used by project that uses
PackageReferences to define a set of package fallback folders that
will override any specified in the NuGet.Config file. It can also
be used to clear any pre-defined fallback folders by specifying
&lsquo;clear&rsquo; as its value. Note that this value does not affect any
folders defined by RestoreAdditionalProjectFallbackFolders which
will be appended even if RestoreFallbackFolders is set to &lsquo;clear&rsquo;.</p>

<h2>Support RestorePackagesPath MSBuild Property</h2>

<p>The RestorePackagesPath MSBuild property can be used to override the global packages
folder location when a project uses a PackageReference.</p>

<h2>Support RestoreSources MSBuild property</h2>

<p>The RestoreSources MSBuild property can be used to override
the sources defined by any NuGet.Config file. Any sources defined in the
RestoreAdditionalProjectSources MSBuild property will still be appended to the
list of sources if RestoreSources is defined.</p>

<h2>Bug Fixes</h2>

<p><strong>Transitive dependencies not available when using project.json</strong></p>

<p>With two projects A and B that both use project.json files, project B
referencing project A, the NuGet package dependencies used by project
A were not available to project B transitively. This was because the
project reference information was not being used
when a restore occurred. This caused the assemblies from the transitively
referenced NuGet packages to not be added to the
project.lock.json file for Project B.</p>

<p><strong>Unable to debug a new Azure Functions project without re-opening project</strong></p>

<p>After creating a new Azure Functions project it was possible to build the
project but not to debug it or run it. On closing and re-opening the solution
it would be possible to debug and run the Azure Functions project.</p>

<p>When Visual Studio for Mac created a new Azure Functions project
it initially determined that it could not run or debug the project.
After the Azure Functions project has its PackageReferences restored
it gains an AzureFunctions project capability. This capability is used to
determine if the project can be run. This change in the capability
was not handled by Visual Studio for Mac so it did not allow the
project to be run until the project was closed and re-opened.</p>

<p>Now, after the NuGet package restore is finished, the project is
re-evaluated and a check is made to see if the project can now be run.</p>

<p><strong>Fix generated NuGet files being imported twice</strong></p>

<p>The generated ProjectName.nuget.g.targets and ProjectName.nuget.g.props
that are created for .NET Core projects in the base intermediate
directory were being imported twice when evaluating the project.
Once by Microsoft.Common.props, provided with Mono, and once
by Visual Studio for Mac.</p>

<p>This duplicate import was resulting in a duplicate file being added
to the project held in memory by Visual Studio for Mac when the
Xamarin.Forms 2.4 NuGet package was used in a .NET Standard
project and no .NET Core SDK is installed. This would result in the
content page xaml and associated C# file not being nested in the
solution window.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Template Creator for Visual Studio for Mac]]></title>
    <link href="http://lastexitcode.com/blog/2017/11/12/TemplateCreatorForVisualStudioMac/"/>
    <updated>2017-11-12T14:30:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2017/11/12/TemplateCreatorForVisualStudioMac</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/mrward/monodevelop-template-creator-addin">Template Creator extension</a> provides a way to create a project template from an existing project
or solution open in Visual Studio for Mac and have the project template available in the New
Project dialog straight away.</p>

<p>The Template Creator uses the <a href="https://github.com/dotnet/templating">.NET Core templating engine</a>
to create the projects from the project templates.</p>

<p>Let us take a look in more detail at what the Template Creator extension provides in Visual Studio for Mac.</p>

<h2>Features</h2>

<ul>
<li> Create a project template from an existing solution or project</li>
<li> Create custom top level project template categories</li>
</ul>


<h2>Supports</h2>

<ul>
<li>Visual Studio Mac 7.0 or later.</li>
</ul>


<h2>Creating a new Project Template</h2>

<p>To create a new project template for a project opened in Visual Studio for Mac,
right click the project and select Create Template.</p>

<p><img src="/images/blog/TemplateCreatorForVisualStudioMac/ProjectCreateTemplateMenu.png" title="&lsquo;Project &ndash; Create Template context menu&rsquo; &lsquo;Project &ndash; Create Template context menu&rsquo;" ></p>

<p>A Template Information dialog is then opened.</p>

<p><img src="/images/blog/TemplateCreatorForVisualStudioMac/TemplateInformationDialog.png" title="&lsquo;Template Information dialog&rsquo; &lsquo;Template Information dialog&rsquo;" ></p>

<p>The information in the dialog is used to populate the generated template.json file. Further
details on what the template.json file holds is available in the <a href="https://github.com/dotnet/templating/wiki/Reference-for-template.json">reference for template.json</a>].</p>

<ul>
<li>Author

<ul>
<li>Author of the project template.</li>
</ul>
</li>
<li>Display Name

<ul>
<li>This is the template name displayed in the New Project dialog.</li>
</ul>
</li>
<li>Description

<ul>
<li>This is the description displayed in the New Project dialog.</li>
</ul>
</li>
<li>Category

<ul>
<li>This is the category in the New Project dialog used by the template.</li>
</ul>
</li>
<li>Short Name

<ul>
<li>This is the short name for the template that can be used from the .NET Core command line.</li>
</ul>
</li>
<li>Default Project Name

<ul>
<li>This is the default project name that will be used with the .NET Core command line.</li>
</ul>
</li>
<li>Identity

<ul>
<li>This is the unique id for the template. This should be unique across all custom
project templates.</li>
</ul>
</li>
<li>Group Identity

<ul>
<li>This is typically a substring of the template&rsquo;s Identity.</li>
</ul>
</li>
</ul>


<p>By default the project template will use the Other &ndash; .NET &ndash; General category in the
New Project dialog. To change the category click the browse button next to the category text
box to open the Template Categories dialog.</p>

<p><img src="/images/blog/TemplateCreatorForVisualStudioMac/TemplateCategoriesDialog.png" title="&lsquo;Template Categories dialog&rsquo; &lsquo;Template Categories dialog&rsquo;" ></p>

<p>Select the required category and click OK. The selected category will then be updated
in the Template Information dialog.</p>

<p>Click OK to generate the template.json file. The template.json file will be opened
in the text editor. It will also be displayed in the Solution window in the
.template.config folder.</p>

<p><img src="/images/blog/TemplateCreatorForVisualStudioMac/ProjectTemplateJsonFile.png" title="&lsquo;template.json file created for project&rsquo; &lsquo;template.json file created for project&rsquo;" ></p>

<p>The project template is now available in the New Project dialog.</p>

<p><img src="/images/blog/TemplateCreatorForVisualStudioMac/CustomProjectTemplateInNewProjectDialog.png" title="&lsquo;Custom project template in New Project dialog&rsquo; &lsquo;Custom template in New Project dialog&rsquo;" ></p>

<h2>Updating a Project Template</h2>

<p>After the project template is created you can modify the original project and its
template.json file as required.</p>

<p>Changes made to the project are available in the New Project dialog immediately.</p>

<p>Changes made to the template.json file are available immediately in the same
instance of Visual Studio for Mac where the template.json file is being edited.</p>

<h2>Multiple Projects in a Template</h2>

<p>A project template may create more than one project. To create a project template
for all projects in the solution right click the solution and select Create Template.</p>

<p><img src="/images/blog/TemplateCreatorForVisualStudioMac/SolutionCreateTemplateMenu.png" title="&lsquo;Solution &ndash; Create Template context menu&rsquo; &lsquo;Solution &ndash; Create Template context menu&rsquo;" ></p>

<p>A template.json file will be created in a .template.config directory inside the solution&rsquo;s
directory.</p>

<p><img src="/images/blog/TemplateCreatorForVisualStudioMac/TwoProjectsTemplateJsonFile.png" title="&lsquo;template.json file created for soluton&rsquo; &lsquo;template.json file created for solution&rsquo;" ></p>

<p>Note that in order for the new projects created to use the name specified in the New Project
dialog they should all have a common start to their name. The template.json file&rsquo;s <code>sourceName</code>
will be the part that is replaced with the name of the project specified in the New Project dialog.</p>

<h2>Configuring Registered Project Templates</h2>

<p>The .NET Core templating engine supports project templates in NuGet packages or project templates
that unpackaged in a directory. The Template Creator extension does
not package the project templates into a NuGet package and instead stores a set of directories that
are scanned by the .NET Core templating engine for templates. The set of directories that are
registered can be viewed and updated in the Preferences dialog from the Templates &ndash; Custom Folders section.</p>

<p><img src="/images/blog/TemplateCreatorForVisualStudioMac/PreferencesCustomFolders.png" title="&lsquo;Preferences dialog &ndash; Templates &ndash; Custom Folders&rsquo; &lsquo;Preferences dialog &ndash; Templates &ndash; Custom Folders&rsquo;" ></p>

<p>The templating engine will scan the configured directories and look for all the template.json files
which define the project templates. The project templates found are then made available to the
Visual Studio for Mac&rsquo;s New Project dialog by the Template Creator extension.</p>

<p>When the template.json file is created using the information in the Template Information dialog
the Template Creator extenxion also registers the
project&rsquo;s directory so it will be scanned by the templating engine.</p>

<p>To remove a project
template from the New Project dialog you can either delete the template.json file or
remove the folder from the Custom Folders defined in the Preferences dialog.</p>

<p>If you have an existing set of project templates that use template.json files and are not
in a NuGet package then you can register a single parent directory in the Preferences dialog.</p>

<h2>Custom Categories</h2>

<p>Custom top level categories can be defined for your project templates by adding them in
Preferences &ndash; Templates &ndash; Custom Categories.</p>

<p><img src="/images/blog/TemplateCreatorForVisualStudioMac/PreferencesCustomCategories.png" title="&lsquo;Preferences dialog &ndash; Templates &ndash; Custom Categories&rsquo; &lsquo;Preferences dialog &ndash; Templates &ndash; Custom Categories&rsquo;" ></p>

<p>The Add Top Level Category button will add a new top level category and two child category
levels. The New Project dialog requires three category levels. The ids used should ensure that
the full path to the template&rsquo;s category is unique. For example, with a custom category
<code>custom/net/general</code> there should not be another top level <code>custom</code> category id, but the second
and third level category ids can be re-used in another top level category, such as <code>top/net/general</code>.</p>

<p>The Add Category button will add a single child category to the currently selected category
whilst the Remove button will remove the selected category.</p>

<p>Note that changes to the categories require Visual Studio for Mac to be restarted before they
are visible in the New Project dialog.</p>

<p>Also note that it is not currently possible to extend existing project template categories
using the Template Creator extension.</p>

<h2>Diagnosing Template Problems</h2>

<p>If the template does not appear in the New Project dialog or fails to be created then
you may be able to diagnose the problem by opening the Templating Log window. This is
available from the View &ndash; Pads menu.</p>

<p><img src="/images/blog/TemplateCreatorForVisualStudioMac/MainMenuViewPadsTemplatingLog.png" title="&lsquo;Main menu &ndash; View &ndash; Pads &ndash; Templating Log&rsquo; &lsquo;Main menu &ndash; View &ndash; Templating Log&rsquo;" ></p>

<p>This window will show messages returned from the .NET Core templating engine and any errors
reported by the Template Creator extension.</p>

<p><img src="/images/blog/TemplateCreatorForVisualStudioMac/TemplatingLogWindow.png" title="&lsquo;Templating Log window&rsquo; &lsquo;Templating Log window&rsquo;" ></p>

<h2>Installation</h2>

<p>The Template Creator extension is available to download from <a href="https://github.com/mrward/monodevelop-template-creator-addin/releases/download/0.1/MonoDevelop.TemplateCreator_0.1.mpack">GitHub</a>.</p>

<p>To install the extension open the Extensions Manager by selecting Extensions&hellip; from the main menu. Click the Install from file button. Select the .mpack file and then click the Open button.</p>

<p>The extension is also available from a <a href="https://github.com/mrward/monodevelop-addins">custom MonoDevelop 7.0 extension server</a>. It is not currently published to the main Visual Studio for Mac extension gallery.</p>

<h2>Source Code</h2>

<ul>
<li><a href="https://github.com/mrward/monodevelop-template-creator-addin">Template Creator extension for Visual Studio for Mac and MonoDevelop</a></li>
</ul>


<h2>Further Reading</h2>

<ul>
<li><a href="https://blogs.msdn.microsoft.com/dotnet/2017/04/02/how-to-create-your-own-templates-for-dotnet-new/">How to create your own templates for dotnet new</a></li>
<li><a href="https://github.com/dotnet/templating/wiki/Reference-for-template.json">Reference for template.json</a></li>
<li><a href="https://www.jimbobbennett.io/creating-visual-studio-project-and-solution-templates-part-3-vs-for-mac-extension/">Creating Visual Studio project and solution templates &ndash; Part 3, VS for Mac extension</a></li>
<li><a href="https://github.com/ligershark/sidewafflev2">SideWaffle v2 for Visual Studio</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
