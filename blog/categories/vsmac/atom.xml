<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vsmac | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/vsmac/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2017-08-26T15:01:54+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.1]]></title>
    <link href="http://lastexitcode.com/blog/2017/08/26/NuGetSupportInVisualStudioMac7-1/"/>
    <updated>2017-08-26T14:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/08/26/NuGetSupportInVisualStudioMac7-1</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> NuGet 4.3 support</li>
<li> Support PackageReference in non .NET Core projects</li>
<li> Enable file template when a NuGet package is installed</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.1</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-august-14-2017---visual-studio-for-mac-7101297">release notes</a>.</p>

<h2>NuGet 4.3 Support</h2>

<p>NuGet 4.3.0.2418 is now included with Visual Studio for Mac 7.1.</p>

<p>This version of NuGet adds support for .NET Core 2.0 and .NET Standard 2.0
target frameworks.</p>

<h2>Support PackageReference in non .NET Core projects</h2>

<p>Non .NET Core Sdk style projects that use a PackageReference MSBuild item are now supported.</p>

<pre><code>&lt;PackageReference Include="Newtonsoft.Json"&gt;
  &lt;Version&gt;10.0.1&lt;/Version&gt;
&lt;/PackageReference&gt;
</code></pre>

<p>In Visual Studio for Mac 7.0 the Solution
window would not show any packages for the project, would not allow
the packages to be restored, and would create a packages.config file when installing
a NuGet package even though the project was using PackageReferences.</p>

<p>Now if the project has a PackageReference the Packages folder
shows the installed packages and can be used to update or install
NuGet packages which will also create PackageReference MSBuild items.</p>

<p>If the project has no PackageReferences then by default a
packages.config file will be created when a NuGet package is installed.</p>

<p>Currently it is not possible to opt-in to using PackageReferences by default.
So the project file will need to be edited in the text editor to include at
least one PackageReference before the default behaviour of using a packages.config
file is overridden.</p>

<h2>Enable file template when a NuGet package is installed</h2>

<p>A file template can now specify that it should be enabled if the project
has a specific reference or has a specific NuGet package installed.
Previously it was only possible to enable a file template based on the
references defined in the project file.</p>

<pre><code>&lt;HasPackageOrReference PackageId="Xamarin.Forms" Assembly="Xamarin.Forms" /&gt;
</code></pre>

<p>Whilst a reference will work for projects that use a packages.config
file, if the project uses a project.json file or PackageReferences
then checking the references defined in the project would not find any matches and
the file template would not be enabled.</p>

<h2>Bug Fixes</h2>

<p><strong>Do not require description when creating a new NuGet package project</strong></p>

<p>When creating a NuGet package project or a multiplatform project the description
needed to be specified in the New Project dialog.</p>

<p>To simplify the project creation
process the package id is used as the description by default. As you type the
package id into the New Project dialog the description text
box will be updated. The description can be changed to be different
to the package id if required.</p>

<p><strong>Fix being unable to load NuGet Package Project created by Visual Studio on Windows</strong></p>

<p>Visual Studio on Windows creates a NuGet package project (.nuproj)
with no target framework version which resulted in 4.0 being used by
default in Visual Studio for Mac. This would cause the project to fail to
load in Visual Studio for Mac since it was checking for 4.5 or later.</p>

<p><strong>Fix no packages shown in Packages folder for NuGet Package Projects</strong></p>

<p>Opening a previously created NuGet package project (.nuproj) would show no
packages in the Packages folder.</p>

<p>The problem was that the PackageReference project item was defined by
both the NuGet addin and the Packaging addin. The NuGet addin&rsquo;s PackageReference
project item was used instead of the one defined by the Packaging addin so no
package references were found for the NuGet package project.</p>

<p><strong>Fix NuGet Package Project&rsquo;s MSBuild targets not being created</strong></p>

<p>If the NuGet package project&rsquo;s generated .nuget.targets or .nuget.props are missing
then these are now created on opening the solution if
automatic restore is enabled.</p>

<p><strong>Fix being unable to package .NET Standard projects</strong></p>

<p>A NuGet package project that referenced an Sdk style .NET Standard project
would fail to build the NuGet package. The build would fail with an error:</p>

<pre><code>Error: Project targets '.NETStandard,Version=v1.4'. It cannot be
referenced by a project that targets 'NuGet,Version=v1.0'
</code></pre>

<p>Updating to a more recent NuGet.Build.Packaging NuGet
package, such as version 0.1.276, fixes this problem.</p>

<p><strong>NuGet Package project treated as .NET Core project</strong></p>

<p>NuGet package projects (.nuproj) that use the NuGet.Build.Packaging
0.1.276 NuGet package define a TargetFramework property in an
imported MSBuild .props file. This was causing the project to
be treated as a .NET Core project by Visual Studio for Mac. This caused
the Dependencies folder to be displayed and the References folder
to be removed. Visual Studio for Mac now checks the project has the
Sdk attribute instead of looking at the MSBuild properties defined
by the project when determining the project type.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET Core Support in Visual Studio for Mac 7.1]]></title>
    <link href="http://lastexitcode.com/blog/2017/08/23/NetCoreSupportInVisualStudioMac7-1/"/>
    <updated>2017-08-23T21:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/08/23/NetCoreSupportInVisualStudioMac7-1</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> .NET Core 2.0 support</li>
<li> Target framework selection for new projects</li>
<li> New project templates</li>
<li> .NET Core Runtimes and SDKs displayed in About Dialog</li>
<li> Improved support for multi target framework projects</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.1</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-august-14-2017---visual-studio-for-mac-7101297">release notes</a>.</p>

<h2>.NET Core 2.0 Support</h2>

<p>Visual Studio for Mac 7.1 adds support for <a href="https://blogs.msdn.microsoft.com/dotnet/2017/08/14/announcing-net-core-2-0/">.NET Core 2.0</a> and .NET Standard 2.0.</p>

<p>The .NET Core 2.0 SDK needs to be <a href="https://www.microsoft.com/net/download/core">installed</a> separately.</p>

<h2>Target Framework Selection for New Projects</h2>

<p>If a project template supports multiple target frameworks, and the corresponding framework is available, then the New Project dialog will allow the framework to be selected before the project is created.</p>

<p><img src="/images/blog/DotNetCoreSupportInVisualStudioMac7-1/NewNetCoreProjectTargetFrameworkSelection.png" title="&lsquo;New .NET Core target framework selection&rsquo; &lsquo;New .NET Core target framework selection&rsquo;" ></p>

<p>Visual Studio for Mac includes project templates for .NET Core 1.0, 1.1 and 2.0 as well as for .NET Standard versions 1.0 through to 2.0.</p>

<p>To be able to create projects that target .NET Core 2.0 or .NET Standard 2.0 the .NET Core 2.0 SDK needs to be installed.</p>

<h2>New Project Templates</h2>

<p>The following project templates have been added:</p>

<ul>
<li>ASP.NET Core Web App (Razor Pages)

<ul>
<li>Available if .NET Core 2.0 SDK is installed.</li>
</ul>
</li>
<li>Class Library

<ul>
<li>Targets .NET Core instead of .NET Standard.</li>
</ul>
</li>
<li>MSTest</li>
</ul>


<p>Some project templates do not support all the target framework versions.
For example, the ASP.NET Core Web App (Razor Pages) only supports
.NET Core 2.0, so this template will only be displayed if .NET Core 2.0 SDK
is installed.</p>

<p>The F# project templates have some restrictions on what target frameworks
they support. The F# .NET Standard project templates do not
support selecting .NET Standard versions below 1.6. The F# Class Library project
only supports .NET Core 2.0.</p>

<h2>.NET Core Runtime and SDKs displayed in About Dialog</h2>

<p>The About dialog will now display the .NET Core runtimes and SDKs that are installed on
the local machine.</p>

<p><img src="/images/blog/DotNetCoreSupportInVisualStudioMac7-1/NetCoreInformationAboutDialog.png" title="&lsquo;.NET Core runtime and SDK information in About dialog&rsquo; &lsquo;.NET Core runtime and SDK information in About dialog&rsquo;" ></p>

<h2>Improved Support for Multi Target Framework Projects</h2>

<p>SDK style projects that target multiple frameworks can now be opened in Visual Studio for
Mac 7.1 and will show source files as well as NuGet package dependencies.</p>

<p>The project will be treated as though it only has
one target framework which is the first one specified in the
TargetFrameworks property in the project file.</p>

<p>Please note that currently the support for multiple target frameworks is limited in
comparison with Visual Studio on Windows.</p>

<h2>Bug Fixes</h2>

<p><strong>ASP.NET Core Web API project does not open API url on launching browser</strong></p>

<p>When an ASP.NET Core Web API project was run it would open a blank web
page in the browser instead of a page that showed the api values. Now when a new ASP.NET
Core Web API project is run the <code>http://localhost:&lt;port&gt;/api/values</code> url is launched in
the browser so the API values will be displayed.</p>

<p><strong>Unable to run or debug ASP.NET Core project with empty SDK directory</strong></p>

<p>If there was an empty directory inside the .NET Core SDK directory <code>/usr/local/share/dotnet/sdk</code> then it was
not possible to run or debug an ASP.NET Core web project</p>

<p>If the .NET Core SDK MSBuild files were not found in the SDK directory then the
project&rsquo;s OutputType was not read and would result in the project being treated
as a library project. This could also occur if only
the .NET Core runtime is installed.</p>

<p><strong>Shared project files shown for .NET Core project in Solution window</strong></p>

<p>When a .NET Core project referenced a shared assets project the files
from the shared project were incorrectly being displayed in the .NET Core project in
the Solution window.</p>

<p><strong>Fix generated code for resource files in .NET Core projects</strong></p>

<p>Adding a resx file to a .NET Core 1.x or .NET Standard 1.x project would result in
code being generated that could not be compiled.</p>

<p>Projects that target .NET Core App 1.0, 1.1, or .NET Standard below version 2.0
cannot compile code that uses <code>typeof(Resources).Assembly</code> which was
being generated by the ResXFileCodeGenerator. If these target frameworks
are used by the project then the code generated by Visual Studio for Mac
will now use <code>typeof(Resources).GetTypeInfo().Assembly</code> which is supported.</p>

<p>.NET Core 2.0 and .NET Standard 2.0 do not need to use GetTypeInfo so the
code generated for these frameworks has not been changed.</p>

<p><strong>Fix new resource file not added as Update item in Sdk projects</strong></p>

<p>Adding a new resource file to a .NET Core project would add the
.resx file and the .Designer.cs file as Include items instead of an
Update items.</p>

<pre><code>&lt;ItemGroup&gt;
  &lt;EmbeddedResource Include="Resources.resx"&gt;
    &lt;Generator&gt;ResXFileCodeGenerator&lt;/Generator&gt;
    &lt;LastGenOutput&gt;Resources.Designer.cs&lt;/LastGenOutput&gt;
  &lt;/EmbeddedResource&gt;
&lt;/ItemGroup&gt;
&lt;ItemGroup&gt;
  &lt;Compile Include="Resources.Designer.cs"&gt;
    &lt;DependentUpon&gt;Resources.resx&lt;/DependentUpon&gt;
  &lt;/Compile&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>This then caused the build to fail since these files are already included by
the .NET Core SDK.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configuring Open With in Visual Studio for Mac 7.0]]></title>
    <link href="http://lastexitcode.com/blog/2017/08/06/ConfiguringOpenWithInVisualStudioMac7-0/"/>
    <updated>2017-08-06T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/08/06/ConfiguringOpenWithInVisualStudioMac7-0</id>
    <content type="html"><![CDATA[<p>Visual Studio on Windows can be <a href="https://msdn.microsoft.com/en-us/library/hy2sthf1.aspx">configured to use a different editor to open a file</a>. With Visual Studio for Mac, whilst you can open a file with a selection of editors and applications, it is not currently possible to change the default editor or add a custom application.</p>

<p>The <a href="https://github.com/mrward/monodevelop-open-with-addin">Open With addin</a> provides an Open With dialog that allows you to change the default editor or application used to open a file in a similar way to how this is done in Visual Studio on Windows.</p>

<h2>Features</h2>

<ul>
<li>Supports changing the default editor used to open a file.</li>
<li>Supports adding a custom application to open a file.</li>
<li>Editor configuration is saved and will be available on restarting Visual Studio for Mac.</li>
</ul>


<h2>Supports</h2>

<ul>
<li>Visual Studio Mac 7.0 or later.</li>
</ul>


<h2>Configuring the Default Editor or Application</h2>

<p>To configure the application or editor used to open file you can right click the file in the Solution window and select Open With &ndash; Preferences&hellip;</p>

<p><img src="/images/blog/ConfiguringOpenWithInVisualStudioMac7-0/OpenWithPreferencesMenu.png" title="&lsquo;Open With &ndash; Preferences context menu&rsquo; &lsquo;Open With &ndash; Preferences context menu&rsquo;" ></p>

<p>This will open the Open With dialog.</p>

<p><img src="/images/blog/ConfiguringOpenWithInVisualStudioMac7-0/OpenWithDialog.png" title="&lsquo;Open With dialog&rsquo; &lsquo;Open With dialog&rsquo;" ></p>

<p>The editors and applications that support opening the file are displayed. The default application is indicated by having (Default) next to its name.</p>

<p>To change the default application or editor used to open the file select it and then click the Set as Default button. Click OK to close the dialog and save the configuration.</p>

<p>If a file is currently open then it will need to be closed before it is opened in the new default editor or application.</p>

<h2>Adding a Custom Application</h2>

<p>A custom application can be added to the list of applications shown in the Open With menu. First open the Open With dialog by selecting Open With &ndash; Preferences. Then click the Add button to open the Add Application dialog.</p>

<p><img src="/images/blog/ConfiguringOpenWithInVisualStudioMac7-0/AddApplicationDialog.png" title="&lsquo;Add Application dialog&rsquo; &lsquo;Add Application dialog&rsquo;" ></p>

<p>The Browse button can be used to find an application.</p>

<p>The Friendly Name is the name that will be displayed in the Open With menu for the custom application.</p>

<p>Arguments cannot be specified if a Mac application (.app) is used. However if the application is not a Mac application, for example, it is a C# program, then arguments can be passed. To pass the filename to the program you can use {0} in the Arguments text box. This placeholder will be expanded to be the full filename path when the program is run.</p>

<h2>Removing a Custom Application</h2>

<p>To remove a custom application for a file first open the Open With dialog by selecting Open With &ndash; Preferences. Select the application you want to remove. Then click the Remove button.</p>

<p>The Remove button is only enabled for custom applications that you have added. The built-in editors and applications cannot be removed.</p>

<h2>Installation</h2>

<p>The Open With addin is available to download from <a href="https://github.com/mrward/monodevelop-open-with-addin/releases/download/0.1/MonoDevelop.OpenWith_0.1.mpack">GitHub</a>.</p>

<p>To install the addin open the Extensions Manager by selecting Extensions&hellip; from the main menu. Click the Install from file button. Select the .mpack file and then click the Open button.</p>

<p>The addin is also available from a <a href="https://github.com/mrward/monodevelop-addins">custom MonoDevelop 7.0 addin server</a>. It is not currently published to the main MonoDevelop addin server.</p>

<h2>Source Code</h2>

<ul>
<li><a href="https://github.com/mrward/monodevelop-open-with-addin">Open With addin for Visual Studio for Mac</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.0]]></title>
    <link href="http://lastexitcode.com/blog/2017/06/04/NuGetSupportInVisualStudioMac7-0/"/>
    <updated>2017-06-04T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/06/04/NuGetSupportInVisualStudioMac7-0</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> .NET Core support</li>
<li> NuGet 4.0 support</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.0</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes">release notes</a>.</p>

<h2>.NET Core Support</h2>

<p>.NET Core projects do not show a Packages folder in the Solution window. Instead the NuGet packages are displayed in a NuGet folder, which is inside a Dependencies folder.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-0/NetCoreProjectJsonNetPackageInSolutionWindow.png" title="&lsquo;Newtonsoft.Json NuGet package in Solution window &ndash; .NET Core project&rsquo; &lsquo;Newtonsoft.Json NuGet package in Solution window &ndash; .NET Core project&rsquo;" ></p>

<p>The version of the NuGet package is displayed directly in the Solution window. For other project types you need to right click the package to see the version.</p>

<p>If the NuGet package depends on other packages then these can be seen by clicking on the arrow to expand the dependencies.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-0/NetCoreProjectJsonNetPackageExpandedInSolutionWindow.png" title="&lsquo;Newtonsoft.Json NuGet package expanded in Solution window &ndash; .NET Core project&rsquo; &lsquo;Newtonsoft.Json NuGet package expanded in Solution window &ndash; .NET Core project&rsquo;" ></p>

<h3>Restoring Packages</h3>

<p>NuGet packages will be restored automatically on opening a .NET Core project. This can be disabled in preferences by unchecking <strong>Automatically restore packages when opening a solution</strong> in the NuGet &ndash; General section.</p>

<p>You can manually restore NuGet packages for .NET Core projects by:</p>

<ul>
<li>Right clicking the Dependencies folder and selecting Restore.</li>
<li>Right clicking the NuGet folder and selecting Restore.</li>
<li>Selecting Restore NuGet Packages from the Project menu.</li>
</ul>


<p>Selecting Restore NuGet Packages from the Project menu will restore packages for the project or the solution depending on what is currently selected in the Solution window.</p>

<p>Restoring NuGet packages for a .NET Core project works differently compared with a project that uses a packages.config file. The NuGet packages themselves will be downloaded into the NuGet package cache folder ~/.nuget/packages if they do not exist, as before, but the NuGet packages will not be copied into a packages directory inside the solution&rsquo;s directory. The project file will not contain have any Reference items added when a NuGet package is installed.</p>

<p>When a NuGet restore is run for a .NET Core project three files in the obj directory are created.</p>

<ul>
<li>project.assets.json</li>
<li>ProjectName.csproj.nuget.g.props</li>
<li>ProjectName.csproj.nuget.g.targets</li>
</ul>


<p>The project.assets.json file contains the dependencies for your project.</p>

<p>The nuget.g.props and nuget.g.targets files will contain any MSBuild imports that your NuGet package requires and they also define some properties, such as the path to the NuGet package cache on your machine.</p>

<p>These three files are used when building your project to resolve the assemblies to be referenced now that they are no longer explicitly stored in your project file.</p>

<h3>Updating Packages</h3>

<p>NuGet packages can be updated by:</p>

<ul>
<li>Right clicking the package inside the NuGet folder and selecting Update.</li>
<li>Right clicking the NuGet folder and selecting Update.</li>
<li>Right clicking the Dependencies folder and selecting Update.</li>
<li>Selecting Update NuGet Packages from the Project menu.</li>
</ul>


<p>Selecting Update NuGet Packages from the Project menu will update all packages in the project or in the solution depending on what is currently selected in the Solution window.</p>

<h3>Removing Multiple NuGet Packages in One Step</h3>

<p>You can remove multiple NuGet packages in one step from a .NET Core project by selecting the packages in the Solution window, right clicking and selecting Remove.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-0/NetCoreProjectRemoveMultipleNuGetPackagesInSolutionWindow.png" title="&lsquo;Removing multiple NuGet packages in Solution window &ndash; .NET Core project&rsquo; &lsquo;Removing multiple NuGet packages in Solution window &ndash; .NET Core project&rsquo;" ></p>

<p>Projects that use a packages.config file do not support removing multiple NuGet packages in one step.</p>

<h3>Installing NuGet Packages</h3>

<p>NuGet packages are installed by using the Add Packages dialog in the same way as with other project types. To open the Add Packages dialog for a .NET Core project:</p>

<ul>
<li>Right click the NuGet folder and select Add Packages&hellip;</li>
<li>Right click the Dependencies folder and select Add Packages&hellip;</li>
<li>Right click the project and select Add &ndash; Add NuGet Packages&hellip;</li>
<li>From the Project menu select Add NuGet Packages&hellip;</li>
</ul>


<p>When the first NuGet package is installed into a .NET Core project a packages.config file will not be created. Instead the NuGet package will be added as a <a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files">PackageReference</a> that is saved in the project file.</p>

<h3>Package Reference</h3>

<p>.NET Core projects do not use a packages.config file to record their NuGet dependencies. Instead the .NET Core project file will contain a <a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files">PackageReference</a> after the NuGet package is installed into the project.</p>

<p>```
<Project Sdk="Microsoft.NET.Sdk"></p>

<p>  <PropertyGroup></p>

<pre><code>&lt;OutputType&gt;Exe&lt;/OutputType&gt;
&lt;TargetFramework&gt;netcoreapp1.1&lt;/TargetFramework&gt;
</code></pre>

<p>  </PropertyGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;PackageReference Include="Newtonsoft.Json" Version="10.0.2" /&gt;
</code></pre>

<p>  </ItemGroup>
</Project>
```</p>

<p>Please note that Visual Studio for Mac currently only supports package references with the new SDK style projects which are used by .NET Core. If you use package references in other project types then the Solution window will not show the packages and a packages.config file will be created if you install a NuGet package.</p>

<h3>Updated Packages Available</h3>

<p>For other project types the Solution window will check for updated packages and show this information in the Packages folder. This is not currently supported with .NET Core projects.</p>

<h2>NuGet 4.0 Support</h2>

<p>Visual Studio for Mac now includes <a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.0-rtm">NuGet 4.0</a>.</p>

<p>More information on the new features provided by NuGet 4.&ndash; can be found in the <a href="http://blog.nuget.org/20170308/Announcing-NuGet-4.0-RTM.html">Announcing NuGet 4.0 RTM blog post</a> and the <a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.0-rtm">NuGet 4.0 release notes</a>.</p>
]]></content>
  </entry>
  
</feed>
