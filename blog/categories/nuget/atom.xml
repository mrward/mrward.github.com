<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nuget | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/nuget/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2014-10-19T17:28:37+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.5]]></title>
    <link href="http://lastexitcode.com/blog/2014/10/19/NuGetSupportInXamarinStudio5-5/"/>
    <updated>2014-10-19T14:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/10/19/NuGetSupportInXamarinStudio5-5</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> Package version constraints in packages.config files are now supported</li>
<li> <a href="https://components.xamarin.com/">Xamarin Components</a> can now have NuGet package dependencies</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.5 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.5/xamarin.studio_5.5/">release notes</a>.</p>

<h2>NuGet Package Version Constraints</h2>

<p>NuGet allows you to <a href="http://docs.nuget.org/docs/reference/versioning">define a range of package versions that are allowed in your project</a> using the <strong>allowedVersions</strong> attribute in the packages.config file.</p>

<pre><code>&lt;packages&gt;
  &lt;package id="Newtonsoft.Json" version="5.0.1" allowedVersions="[5.0,6.0)" targetFramework="MonoAndroid44" /&gt;
&lt;/packages&gt;
</code></pre>

<p>In the above packages.config file the project has Json.NET 5.0.1 installed and will only allow updates to versions of Json.NET that are below 6.0.</p>

<p>When you open the solution in Xamarin Studio, and check for updates is enabled in preferences, you will see updates in the Solution window that are valid given the constraint defined in the packages.config file. In the screenshot below an update is shown for Json.NET 5.0.8 in the Solution window even though Json.NET currently has version 6.0.5 available.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/JsonNet508PackageUpdateAvailableInSolutionWindow.png" title="&lsquo;Json.NET 5.0.8 package update available shown in Solution window&rsquo; &lsquo;Json.NET 5.0.8 package update available shown in Solution window&rsquo;" ></p>

<p>When you update the NuGet packages from the Solution window Xamarin Studio will now update to a NuGet package that meets the version constraints defined in the packages.config. In the Package Console screenshot below the Json.NET package was updated, with the constraint in place, and Json.NET 5.0.8 was installed.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/JsonNet508PackageInstalledInPackageConsole.png" title="&lsquo;Json.NET package updated to 5.0.8 &ndash; Package Console output&rsquo; &lsquo;Json.NET package updated to 5.0.8 &ndash; Package Console output&rsquo;" ></p>

<p>Note that if you install a NuGet package from the Add Packages dialog you can override the constraint and install a NuGet package with a version outside of the range of the constraint.</p>

<h2>Components with NuGet Packages</h2>

<p>A Component from <a href="https://components.xamarin.com/">Xamarin&rsquo;s Component Store</a> can now declare a dependency on one or more NuGet packages which will be installed into the project when the Component is installed. The <a href="https://components.xamarin.com/view/xamandroidsupportv13-18">Android Support Library v13 Component</a> is one example that has a NuGet package dependency.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentInStore.png" title="&lsquo;Android Support Library v13 Component in Component Store&rsquo; &lsquo;Android Support Library v13 Component in Component Store&rsquo;" ></p>

<p>When you install this Component you will see that it installs the <a href="https://www.nuget.org/packages/Xamarin.Android.Support.v13/">Xamarin.Android.Support.v13 NuGet package</a>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentInstalledInSolutionWindow.png" title="&lsquo;Android Support Library v13 Component in Solution window&rsquo; &lsquo;Android Support Library v13 Component in Solution window&rsquo;" ></p>

<p>In older versions of Xamarin Studio the NuGet package will not be installed and instead the project will reference the Xamarin.Android.Support.v13.dll which is included with the Component.</p>

<p>The NuGet packages a Component depends on are displayed in the <strong>Packages</strong> tab on the Component Details page, which you can open by double clicking the Component in the Solution window, or by right clicking the Component and selecting <strong>Details</strong>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentDetailsWithPackagesTab.png" title="&lsquo;Android Support Library v13 Packages in Component Details page&rsquo; &lsquo;Android Support Library v13 Packages in Component Details page&rsquo;" ></p>

<p>From the <strong>Packages</strong> tab you can also install a NuGet package that a Component depends on if it was removed from the project. So if the Xamarin.Android.Support.v13 NuGet package is removed from the project the Component will be highlighted in red to indicate that there is a problem.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentErrorInSolutionWindow.png" title="&lsquo;Android Support Library v13 Component error in Solution window&rsquo; &lsquo;Android Support Library v13 Component error in Solution window&rsquo;" ></p>

<p>If you then open the Component Details page you will see in the <strong>Packages</strong> tab that the NuGet package is missing.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentDetailsWithMissingNuGetPackage.png" title="&lsquo;Android Support Library v13 Component Details page with missing NuGet Package&rsquo; &lsquo;Android Support Library v13 CComponent Details page with missing NuGet Package&rsquo;" ></p>

<p>To add the NuGet package back to the project you can hover the mouse over the warning icon and click the Add Package button that appears in the pop-up window.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-5/AndroidSupportLibraryV13ComponentDetailsWithAddPackagePopUpWindow.png" title="&lsquo;Android Support Library v13 Component Details page with Add Package pop-up window&rsquo; &lsquo;Android Support Library v13 CComponent Details page with Add Package pop-up window&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.4]]></title>
    <link href="http://lastexitcode.com/blog/2014/09/29/NuGetSupportInXamarinStudio5-4/"/>
    <updated>2014-09-29T19:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/09/29/NuGetSupportInXamarinStudio5-4</id>
    <content type="html"><![CDATA[<h2>New Feature</h2>

<ul>
<li> Added support for the new Unified target frameworks for iOS and Mac

<ul>
<li>Xamarin.iOS</li>
<li>Xamarin.Mac</li>
</ul>
</li>
</ul>


<p>More details on all the new features and changes in Xamarin Studio 5.4 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.4/xamarin.studio_5.4/">release notes</a>.</p>

<h2>New Unified iOS and Mac Target Frameworks</h2>

<p>Xamarin recently announced <a href="http://blog.xamarin.com/unified-api-with-64-bit-support-for-ios-and-mac/">a new Unified API for its iOS and Mac products</a>. This new Unified API makes it easier to share code between Mac and iOS as well as allowing you to support 32 and 64 bit applications with the same binary.</p>

<p>To use this new Unified API you can create a new Unified project for iOS, or for Mac, using one of the project templates available from Xamarin Studio&rsquo;s New Project Dialog.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-4/UnifiedMacAndIOSProjectsInNewProjectDialog.png" title="&lsquo;Unified iOS and Mac Projects in New Project Dialog&rsquo; &lsquo;Unified iOS and Mac Projects in New Project Dialog&rsquo;" ></p>

<p>These Unified projects now support MSBuild and use the following target frameworks:</p>

<ul>
<li>Xamarin.iOS</li>
<li>Xamarin.Mac</li>
</ul>


<h2>NuGet Support for the New Unified Target Frameworks</h2>

<p>In order to support these two new frameworks the following changes were made to NuGet.</p>

<ul>
<li>Add Xamarin.iOS and Xamarin.Mac as known frameworks.</li>
<li>Make frameworks that have a name that starts with <strong>Xamarin</strong> optional when checking the compatibility of Portable Class Libraries (PCLs) inside a NuGet package with a Portable Class Library project.</li>
</ul>


<p>With these new Unified frameworks being recognised by NuGet you can now create a NuGet package with assemblies that specifically target these frameworks.  The following shows part of a .nuspec file with framework specific assemblies for iOS and Mac being copied into the appropriate target lib folder inside the NuGet package.</p>

<pre><code>&lt;files&gt;
    &lt;file src="lib\Xamarin.iOS\*.dll" target="lib\Xamarin.iOS10" /&gt;
    &lt;file src="lib\Xamarin.Mac\*.dll" target="lib\Xamarin.Mac20" /&gt;
&lt;/files&gt;
</code></pre>

<p>The <a href="https://www.nuget.org/packages/Splat/">Splat NuGet package</a>, created by Paul Betts, is one NuGet package available from the main NuGet gallery that explicitly targets both of the new Unified frameworks.</p>

<p>Having the Xamarin frameworks treated as optional by NuGet allows you to install a NuGet package containing PCL assemblies into a Portable Class Library project, on a machine with the Xamarin PCL profiles registered. Without the Xamarin frameworks being treated as optional the NuGet package would fail to be installed since NuGet would find them incompatible unless the NuGet package explicitly included the Xamarin frameworks as part of its PCL profile.</p>

<p>Support for the new Xamarin frameworks will be available in the official NuGet from Microsoft in version 2.8.3. <a href="https://nuget.codeplex.com/releases/view/133091">NuGet 2.8.3</a> is currently available as alpha release. Xamarin Studio 5.4 includes its own build of NuGet which has support for the new Xamarin frameworks.</p>

<h2>Portable Class Libraries</h2>

<p>In order to be able to install a NuGet package containing PCL assemblies, such as Json.NET, into a Unified iOS or Unified Mac project you will need to have the PCL profile XML files for Unified iOS and Mac installed on your machine.</p>

<p>On the Mac you can get these new PCL profile XML files by installing Mono 3.10.0, which is currently available from Xamarin Studio on the alpha and beta channels.</p>

<p>On Windows, since NuGet 2.8.3 is currently only available as an alpha release, there is a <a href="http://xvs.xamarin.com/Xamarin.iOS.PortableNuGet.msi">separate installer</a> which will register the Unified iOS framework with the PCL profiles on your machine and will also install an alpha version of Microsoft&rsquo;s NuGet Package Manager 2.8.3 into Visual Studio.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.3]]></title>
    <link href="http://lastexitcode.com/blog/2014/09/07/NuGetSupportInXamarinStudio5-3/"/>
    <updated>2014-09-07T10:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/09/07/NuGetSupportInXamarinStudio5-3</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet package restore is now part of Xamarin Studio and no longer uses NuGet.exe</li>
<li> Add Packages dialog &ndash; Package sources could not be reached shown for failing package sources</li>
<li> Packages restored for the selected project instead of the solution</li>
<li> Show packages added to solution in Add Packages dialog</li>
<li> Show packages up to date message in status bar if there are no package updates available</li>
<li> Show status bar warning message when no updates found and package sources are unavailable</li>
<li> Restore missing packages before updating a package</li>
<li> Do not check for updated packages if the project has no packages</li>
<li> Fix version shown as download count in Add Packages dialog when searching for package versions</li>
<li> Fix empty source being selected in Add Packages dialog when package source disabled and All Sources selected</li>
<li> Fix packages.config marked as deleted by Git when updating packages</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 5.3 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.3/xamarin.studio_5.3/">release notes</a>. Now let us take a more detailed look at the new NuGet changes.</p>

<h2>NuGet package restore no longer uses NuGet.exe</h2>

<p>The NuGet package restore is now a part of Xamarin Studio and no longer uses NuGet.exe. This allows the package restore to integrate with the Xamarin Studio credential provider and provides more control over the package restore process. So if a package source needs authentication, or uses a proxy, then Xamarin Studio will now show a dialog asking for credentials if the credentials are not stored. Previously the package restore would fail with an error message logged in the Package Console.</p>

<h2>Add Packages dialog &ndash; Package sources could not be reached</h2>

<p>Previously when All Sources was selected and if any package source could not be reached then an error message would be displayed and no packages would be shown in the list. Now packages will be displayed with a warning even if one package source could not be reached.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-3/AddPackagesDialogPackageSourcesCouldNotBeReachedWarning.png" title="&lsquo;Add Packages dialog &ndash; package sources could not be reached warning&rsquo; &lsquo;Add Packages dialog &ndash; package sources could not be reached warning&rsquo;" ></p>

<h2>Packages restored for the selected project instead of the solution</h2>

<p>Xamarin Studio will now restore packages for the selected project instead of the entire solution. When you right click the <strong>Packages</strong> folder in the Solution window and select <strong>Restore</strong> only the packages for that project will be restored.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-0/SolutionWindowRestorePackagesMenu.png" title="&lsquo;Packages folder &ndash; Restore menu&rsquo; &lsquo;Packages folder &ndash; Restore menu&rsquo;" ></p>

<p>This is now possible since Xamarin Studio is now responsible for restoring packages instead of using NuGet.exe which would only restore for the entire solution.</p>

<p>To restore packages for the entire solution you can still use the <strong>Restore Packages</strong> menu which is available from the Project menu or by right clicking the solution in the Solution window.</p>

<h2>Show packages added to solution in Add Packages dialog</h2>

<p>Opening the Add Packages dialog will now show the packages added to all projects in the current solution.</p>

<p>The order of the items displayed in the Add Packages dialog is recent packages first, then solution packages, and then the packages from the active package source.</p>

<h2>Show packages up to date message in status bar if there are no package updates available</h2>

<p>When you try to update a package and there are no package updates available then the status bar now displays a message indicating that the package is already up to date.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-3/PackageUpToDateStatusBarMessage.png" title="&lsquo;Package up to date status bar message&rsquo; &lsquo;Package up to date status bar message&rsquo;" ></p>

<p>Similarly if you update multiple packages and there are no updates available then the status bar will now show a packages are up to date message.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-3/PackagesAreUpToDateStatusBarMessage.png" title="&lsquo;Packages are up to date status bar message&rsquo; &lsquo;Packages are up to date status bar message&rsquo;" ></p>

<p>Previously the status bar would show a message that the package was updated successfully even if nothing was updated.</p>

<h2>Show status bar warning message when no updates found and package sources are unavailable</h2>

<p>When one or more of the package sources is unavailable or invalid then Xamarin Studio will now report a warning in the status bar after checking for updates.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-3/NoUpdateFoundButWarningsReportedStatusBarMessage.png" title="&lsquo;No update but warnings reported status bar message&rsquo; &lsquo;No updated found but warnings reported status bar message&rsquo;" ></p>

<h2>Restoring missing packages before updating packages</h2>

<p>Previously when NuGet packages were unrestored and an attempt was made to update a NuGet package, which had updates available from the package source, the update would fail with a message indicating that the package was installed successfully but the project did not reference the package.</p>

<p>To prevent the update from failing Xamarin Studio will now check that the packages are restored for the project before trying to update and restore any missing packages. In the status bar a <strong>Restoring packages before update</strong> message will be displayed when a restore must be completed first.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-3/RestoringPackagesBeforeUpdateStatusBarMessage.png" title="&lsquo;Restoring packages before update status bar message&rsquo; &lsquo;Restoring packages before update status bar message&rsquo;" ></p>

<h2>Bug Fixes</h2>

<p><strong>Do not check for updated packages if the project has no packages</strong></p>

<p>Xamarin Studio was checking for package updates in all projects even if they had no packages.config file when the solution was opened. This would result in the <strong>Packages are up to date</strong> message being displayed in the status bar even when no projects were using any NuGet packages.</p>

<p>Now if the project has no packages.config file then Xamarin Studio will not check for updates.</p>

<p><strong>Fix version shown as download count in Add Packages dialog when searching for package versions</strong></p>

<p>When running a package version search, such as <strong>Xamarin.Forms version:</strong>*, the right hand side of the dialog was showing the version number instead of the download count.</p>

<p>Now the dialog shows the download count. Ideally it would show the download count of that particular version but this is not currently available from the Package object returned by NuGet. It is returned in the results back from the package source but it is not available on the Package object.</p>

<p>Also the download counts are different for the same package if you compare the normal search result with a package version search result. The package version search shows a larger download count number. This may be related to the <a href="http://blog.nuget.org/20140603/nuget-stats.html">stats problem</a> NuGet had recently. Currently Xamarin Studio is showing the download count it receives. The standard search download counts match those shown in Visual Studio&rsquo;s Manage Packages dialog. For the package version search the download count value matches that shown on the NuGet.org website for an individual package (e.g. <a href="https://www.nuget.org/packages/jQuery">https://www.nuget.org/packages/jQuery</a>).</p>

<p><strong>Fix empty source being selected in Add Packages dialog when package source disabled and All Sources selected</strong></p>

<p>An empty package source selected in the Add Packages dialog could occur when All Sources was selected in the Add Packages dialog and one of the enabled package sources was unchecked in Preferences. On opening the Add Packages dialog again an empty package source would be displayed as the selected package source.</p>

<p>Now the Add Packages dialog will have the remaining enabled package source selected.</p>

<p><strong>Fix packages.config marked as deleted by Git when updating packages</strong></p>

<p>On updating packages in a project, and the project is using Git for version control, then the update was causing Git to show the packages.config file as deleted. This would occur if all the NuGet packages were uninstalled as part of the update which caused NuGet to see that there were no NuGet packages referenced and delete the packages.config file.</p>

<p>Now the packages.config file is shown as modified instead of deleted.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.2]]></title>
    <link href="http://lastexitcode.com/blog/2014/08/10/NuGetSupportInXamarinStudio5-2/"/>
    <updated>2014-08-10T12:44:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/08/10/NuGetSupportInXamarinStudio5-2</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> Automatic package update check</li>
<li> Package framework retargeting</li>
<li> Support for custom packages directory in NuGet.Config</li>
<li> Add all checked packages even if they are not visible</li>
</ul>


<p>More details on all the new features and changes in Xamarin Studio 5.2 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.2/xamarin.studio_5.2/">release notes</a>. Now let us take a more detailed look at the new NuGet features.</p>

<h2>Automatic package update check</h2>

<p>On opening a solution Xamarin Studio will check in the background for updated packages used by your projects. When the update check begins the status bar will show a <strong>Checking for package updates</strong> message.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-2/CheckingForPackageUpdatesStatusBarMessage.png" title="&lsquo;Checking for package updates status bar message&rsquo; &lsquo;Checking for package updates status bar message&rsquo;" ></p>

<p>If Xamarin Studio finds there are new updated packages available then the status bar will show a <strong>Package Updates are available</strong> message.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-2/PackageUpdatesAreAvailableStatusBarMessage.png" title="&lsquo;Package updates are available status bar message&rsquo; &lsquo;Package updates are available status bar message&rsquo;" ></p>

<p>The <strong>Solution</strong> window will show information about the updates in the Packages folder.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-2/PackageUpdatesInSolutionWindow.png" title="&lsquo;Package updates shown in Solution window&rsquo; &lsquo;Package updates shown in Solution window&rsquo;" ></p>

<p>The <strong>Packages</strong> folder will show the number of updated packages available for a project. For each package inside the Packages folder you can see the version number for the update.</p>

<p>Note that Xamarin Studio will only show updates that are for non-pre-release packages.</p>

<p>The automatic package update feature can be disabled in <strong>Preferences</strong> by unchecking <strong>Check for package updates when opening a solution</strong>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-2/CheckForPackageUpdatesOptionInPreferences.png" title="&lsquo;Preferences dialog &ndash; Check for package updates when opening a solution&rsquo; &lsquo;Preferences dialog &ndash; Check for package updates when opening a solution&rsquo;" ></p>

<h2>Framework retargeting</h2>

<p>A NuGet package will often contain assemblies for several target frameworks. Json.NET, for example, contains assemblies for:</p>

<ul>
<li>.NET 2.0</li>
<li>.NET 3.5</li>
<li>.NET 4.0</li>
<li>.NET 4.5</li>
<li>.NET Core 4.5 (Windows Store)</li>
<li>Portable Class Library (PCL)

<ul>
<li>.NET 4, Silverlight 5, Windows Phone 8, Windows 8, Windows Phone   Application 8.1</li>
</ul>
</li>
<li>Portable Class Library (PCL)

<ul>
<li>.NET 4.5, Windows Phone 8, Windows 8, Windows Phone Application 8.1</li>
</ul>
</li>
</ul>


<p>When you install this NuGet package into your project the assembly that is referenced is determined by your project&rsquo;s target framework. NuGet will reference the assembly which it considers to be the best match for your project&rsquo;s target framework. So if you install Json.NET into a project that targets .NET 4.5 the Json.NET assembly referenced will be taken from the .NET 4.5 folder inside the NuGet package.</p>

<p>If you change your project&rsquo;s target framework after you have installed the NuGet package your project may be referencing a different assembly compared with what would have been referenced if you had installed it after changing the project&rsquo;s target framework. In some cases the project&rsquo;s target framework may not be compatible with the NuGet package. For example, your project targeted .NET 4.5 and you then changed it to .NET 2.0. In this case you would be referencing a .NET 4.5 assembly that would not work with .NET 2.0. Another example is if you change the PCL profile of your project which could affect which PCL assemblies are used from the NuGet package.</p>

<p>In Xamarin Studio 5.2 if you change your project&rsquo;s target framework then the NuGet packages referenced by your project are checked to see if they are still compatible. The result of this check is displayed in the <strong>Package Console</strong>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-2/PackagesNeedRetargetingMessagesInPackageConsole.png" title="&lsquo;Packages need retargeting messages in Package Console&rsquo; &lsquo;Packages need retargeting messages in Package Console&rsquo;" ></p>

<p>In the screenshot above the project&rsquo;s target framework was changed from .NET 4.5 to .NET 2.0 whilst the project had the Json.NET and Moq NuGet packages installed. Json.NET is compatible with .NET 2.0 and can be retargeted. Moq does not support .NET 2.0 and is not compatible.</p>

<p>To retarget an individual NuGet package you can select the package in the <strong>Solution</strong> window, right click and select <strong>Retarget</strong>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-2/RetargetSinglePackageSolutionWindowMenuItem.png" title="&lsquo;Solution window &ndash; Retarget menu item&rsquo; &lsquo;Solution window &ndash; Retarget menu item&rsquo;" ></p>

<p>To retarget all packages in the project you can select <strong>Packages</strong> in the <strong>Solution</strong> window, right click and select <strong>Retarget</strong>.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-2/RetargetAllProjectPackagesSolutionWindowMenuItem.png" title="&lsquo;Solution window &ndash; Retarget project packages menu item&rsquo; &lsquo;Solution window &ndash; Retarget project packages menu item&rsquo;" ></p>

<p>Selecting <strong>Retarget</strong> will remove the NuGet package and then add it again so the correct assembly is referenced by your project. The status bar will be updated as the package is retargeted and full details can be seen in the Package Console.</p>

<p>The Retarget menu item is only available if NuGet packages need to be retargeted.</p>

<p>Note that if you retarget a NuGet package that is incompatible with your project&rsquo;s target framework then the retargeting will fail and the NuGet package will be removed from the project.</p>

<h2>Support for custom packages directory in NuGet.Config</h2>

<p>When a NuGet package is installed into a project the NuGet packages are by default downloaded into a packages directory inside the solution directory. The location and name of this packages directory can be configured by specifying the repositoryPath in the NuGet.Config file.</p>

<pre><code>&lt;configuration&gt;
  &lt;config&gt;
    &lt;add key="repositoryPath" value="../../MyPackages" /&gt;
  &lt;/config&gt;
&lt;/configuration&gt;
</code></pre>

<p>If you create a NuGet.Config file and put it the .nuget directory inside the solution, or in the solution&rsquo;s directory, then Xamarin Studio will read the repositoryPath and use it when downloading NuGet packages. The path is relative to the NuGet.Config file but you can specify a full path if you need to.</p>

<p>Note that if you make a change to the repositoryPath whilst the solution is open you will need to close and re-open the solution for the changes to be detected.</p>

<h2>Add all checked packages even if they are not visible</h2>

<p>The Add Packages dialog will now add all packages that were checked when you click the Add Packages button even if they are not currently being displayed in the dialog. This allows you to run multiple searches in the dialog, check multiple packages and then add them to the project in one step without having to open the Add Packages dialog multiple times. Previously only the checked packages that were displayed in the list of packages would be added to your project.</p>

<h2>Bug Fixes</h2>

<p><strong>Incorrect path separator used for MSBuild Import</strong></p>

<p>A NuGet package can contain custom MSBuild .targets and .props files. Previously when a NuGet package was installed on the Mac a forward slash path separator was used when adding the paths for custom MSBuild .targets file. This would cause Xamarin Studio on Windows to fail to compile the project. Now backslashes are used for all paths added to the project file.</p>

<p>Xamarin Studio will also now add a Condition to the project file that checks the imported MSBuild .targets file exists. Without this condition the project cannot be opened in Visual Studio if the NuGet packages are missing.</p>

<p>As an example, if Xamarin.Forms 1.1.1.6206 is installed into a project the following Import element will be added.</p>

<pre><code>&lt;Import 
    Project="packages\Xamarin.Forms.1.1.1.6206\build\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\Xamarin.Forms.targets"
    Condition="Exists('packages\Xamarin.Forms.1.1.1.6206\build\portable-win+net45+wp80+MonoAndroid10+MonoTouch10\Xamarin.Forms.targets')" /&gt;
</code></pre>

<p><strong>Repositories.config not restored</strong></p>

<p>When NuGet packages were restored for the solution the repositories.config file was not being restored. The repositories.config file contains references to all the projects in the solution that have NuGet packages. This information is used by NuGet to determine whether a NuGet package can be removed from the packages directory when a NuGet package is removed from a project. Without this information a NuGet package that is still referenced by other projects could be removed from the packages directory and cause the compilation to fail.</p>

<p><strong>Package Dependencies not resolved from enabled package sources</strong></p>

<p>Xamarin Studio will now use all enabled package sources when resolving dependencies for a NuGet package even if a single package source is selected in the Add Packages dialog. This allows the use of a NuGet package source that has packages that have dependencies that are not available from that particular package source but are available from another package source.</p>

<p><strong>Packages are up to date status bar message</strong></p>

<p>If you have the automatic check for updates disabled and update one or more NuGet packages the status bar will now display a message indicating that the packages are up to date if there are no updates available. Previously Xamarin Studio would show a message that the packages were updated when they were not.</p>

<p><strong>Updating an unrestored package</strong></p>

<p>If you have automatic package restore disabled and you attempt to update a NuGet package the package will now be restored before the update is attempted. Previously this would fail when an update was available since NuGet looks at the old package to work out how to remove it from the project before updating to the new NuGet package.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.1]]></title>
    <link href="http://lastexitcode.com/blog/2014/07/06/NuGetSupportInXamarinStudio5-1/"/>
    <updated>2014-07-06T10:48:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2014/07/06/NuGetSupportInXamarinStudio5-1</id>
    <content type="html"><![CDATA[<p><a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.1/xamarin.studio_5.1/">Xamarin Studio 5.1</a> was released last week and it includes some new features for the NuGet addin.</p>

<h2>New Features</h2>

<ul>
<li> Searching and installing a specific version of a NuGet package.</li>
<li> Support for NuGet package sources defined in a solution specific NuGet.Config file.</li>
</ul>


<p>More details on all the new features and changes in Xamarin Studio 5.1 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.1/xamarin.studio_5.1/">release notes</a>. Now let us take a look at the new NuGet features.</p>

<h2>Searching and installing a specific version of a NuGet package</h2>

<p>The Add Packages dialog can now be used to search and install a specific version of a NuGet package. You can search for all versions, a range of versions, or a specific version of a NuGet package. To do this the following search syntax is used:</p>

<pre><code>PackageId version:VersionNumber
</code></pre>

<p>The packages are shown in the Add Packages dialog with the most recent version at the top. At the top right of each package in the package list you will see the package version instead of the download count allowing you to find the particular version you want to install.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-1/AddPackagesDialogAllAutoMapperPackageVersions.png" title="&lsquo;Add Packages dialog &ndash; all AutoMapper package versions&rsquo; &lsquo;Add Packages dialog &ndash; all AutoMapper package versions&rsquo;" ></p>

<p>To search for all versions of the AutoMapper NuGet package you can use an asterisk or leave the version number blank.</p>

<pre><code>AutoMapper version:*
</code></pre>

<p>To search for all the 2.1 versions of the AutoMapper NuGet package you can use the search:</p>

<pre><code>AutoMapper version:2.1
</code></pre>

<p>This will return a range of versions from 2.1.0 up to but not including 2.2.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-1/AddPackagesDialogAutoMapperPackageVersions21.png" title="&lsquo;Add Packages dialog &ndash; AutoMapper 2.1 package versions&rsquo; &lsquo;Add Packages dialog &ndash; AutoMapper 2.1 package versions&rsquo;" ></p>

<p>The package id used in the search must match the id of the NuGet package otherwise no results will be returned.</p>

<p>Searching for package versions is also supported in the universal search at the top right of Xamarin Studio.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-1/PackageVersionSearchInUniversalSearch.png" title="&lsquo;Package version search in universal search&rsquo; &lsquo;Package version search in universal search&rsquo;" ></p>

<h2>Package sources defined in a solution specific NuGet.Config file</h2>

<p> If package sources are defined in the solution&rsquo;s NuGet.Config file then these will be available in the Add Packages dialog when this solution is opened. The NuGet.Config file can be in the solution directory or in the .nuget subdirectory. An example NuGet.Config file is shown below.</p>

<pre><code>&lt;configuration&gt;
  &lt;packageSources&gt;
    &lt;add key="ASP.NET vNext - MyGet" value="https://www.myget.org/F/aspnetvnext/" /&gt;
  &lt;/packageSources&gt;
&lt;/configuration&gt;
</code></pre>

<p>When the solution is opened the package sources defined in the NuGet.config file are available in the drop down list at the top left of the Add Packages dialog.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-1/AddPackagesWithPackageSourceFromSolutionLevelNuGetConfig.png" title="&lsquo;Add Packages dialog &ndash; package sources from solution NuGet.Config&rsquo; &lsquo;Add Packages dialog &ndash; package sources from solution NuGet.config&rsquo;" ></p>

<h2>Bug Fixes</h2>

<p><strong>Proxy credentials not being requested for a https package source.</strong></p>

<p>   Added a workaround to NuGet to handle Mono returning a different http response when proxy authentication is required.</p>

<p><strong>Web.config transforms not being applied when installing NuGet packages such as Nancy.Hosting.Aspnet.</strong></p>

<p>   Projects were not being recognised as web projects so transforms were only being applied to app.config files.</p>

<p><strong>XDT remove transforms (Xml Document Transformations) failing on Mono.</strong></p>

<p>   Modified the XDT library that ships with Xamarin Studio to handle different behaviour on Mono compared with Microsoft&rsquo;s .NET Framework. These transforms are used in the Microsoft.AspNet.Mvc NuGet package.</p>
]]></content>
  </entry>
  
</feed>
