<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nuget | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/nuget/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2016-09-17T13:00:24+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 6.1]]></title>
    <link href="http://lastexitcode.com/blog/2016/09/17/NuGetSupportInXamarinStudio6-1/"/>
    <updated>2016-09-17T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/09/17/NuGetSupportInXamarinStudio6-1</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 6.1 was released last week as part of the latest stable <a href="https://blog.xamarin.com/major-updates-ios-10-android-nougat-and-other-tasty-bits/">Xamarin Platform release</a> and it includes changes made to the NuGet support.</p>

<h2>Changes</h2>

<ul>
<li> NuGet 3.4.3 support</li>
<li> Support for project.json files</li>
<li> A specific NuGet package version can now be installed from a list shown in the Add Packages dialog</li>
<li> NuGet operations can now be cancelled from the status bar or Package Console</li>
<li> Support browsing for a local directory when creating a package source</li>
<li> Support forcefully removing a NuGet package when it is missing from all package sources</li>
<li> Packages installed in the solution are no longer shown in the Add Packages dialog</li>
<li> Only global package sources are now shown in Preferences</li>
<li> NuGet version supported is now displayed in the About dialog</li>
</ul>


<p>More information on all the new features and changes in Xamarin Studio 6.1 can be found in the <a href="https://developer.xamarin.com/releases/studio/xamarin.studio_6.1/xamarin.studio_6.1/">release notes</a>.</p>

<h2>NuGet 3.4.3 support</h2>

<p>Xamarin Studio now includes <a href="https://docs.nuget.org/release-notes/nuget-3.4.3">NuGet 3.4.3</a> which means project.json files are now supported and NuGet packages that only support NuGet 3 or above can now be installed.</p>

<h2>Support for project.json files</h2>

<p>The project.json file is a new package file format introduced with NuGet 3 which supports transitive restore. More detailed information on project.json can be found in the <a href="https://docs.nuget.org/consume/projectjson-intro">NuGet documentation</a>.</p>

<p>A project.json file replaces the packages.config file and holds the NuGet packages
being used by the project. One difference you will notice is that the project.json file may not show the same list of NuGet packages that a packages.config file would show. This is because the project.json file only shows the NuGet packages you explicitly install into your project. So if you install say bootstrap you will only see bootstrap in the project.json file even though it depends on jQuery. If you do the same for a packages.config file you would see both bootstrap and jQuery saved in the file. Another difference is that references are not added to your project file (.csproj) when using a
project.json file.</p>

<p>In order to use a project.json file with Xamarin Studio you will need to create the file yourself in the project directory and close and re-open the solution. The project.json file needs to be
available when you open the project otherwise Xamarin Studio will default to using a packages.config file.</p>

<p>An example project.json file for a .NET 4.5 library project is shown below:</p>

<pre><code>{
  "frameworks": {
    "net45": {}
  }
}
</code></pre>

<p>When you add a NuGet package to a project that uses a project.json file the NuGet package
information will be added into a dependencies section:</p>

<pre><code> "dependencies": {
   "NUnit": "3.2.1"
 }
</code></pre>

<p>Please note that when using a project.json file the project will not display a From Packages directory
inside the References folder. This is because the project file does not have any
references added to it when using a project.json and the reference information is currently not available from the project system.</p>

<p>Please note that there are <a href="https://blogs.msdn.microsoft.com/dotnet/2016/05/23/changes-to-project-json/">future plans</a> to move the information stored in a project.json file into the project file.</p>

<h1>NuGet 3 package source</h1>

<p>Xamarin Studio now supports using the NuGet 3 package source:</p>

<p><a href="https://api.nuget.org/v3/index.json">https://api.nuget.org/v3/index.json</a></p>

<p>This can be added into your package sources in Preferences. It is also the package
source that will be created by default if your global <a href="http://lastexitcode.com/projects/NuGet/FileLocations/">NuGet.Config file</a> is missing.</p>

<h2>Installing a specific NuGet package version from the Add Packages dialog</h2>

<p>Older versions of Xamarin Studio supported being able to install specific package versions by using a package version search in the Add Packages dialog as shown below:</p>

<pre><code>NUnit version:*
</code></pre>

<p>This package version search was not easy to discover and so it has been removed and replaced in Xamarin Studio 6.1 with a combo box that allows a particular version to be selected. The Version combo box is in the bottom right hand corner of the Add Packages dialog as shown in the screenshots below.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-1/AddPackagesDialog.png" title="&lsquo;Add Packages dialog&rsquo; &lsquo;Add Packages dialog&rsquo;" ></p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-1/AddPackagesDialogWithVersionComboBoxSelected.png" title="&lsquo;Add Packages dialog with version combo box selected&rsquo; &lsquo;Add Packages dialog with version combo box selected&rsquo;" ></p>

<p>Note that in order to populate the version combo box a second request is sent to the
package source so it may not show all the versions immediately.</p>

<p>Also note that for package sources which are local directories only the latest version will be displayed in the version combo box.</p>

<h2>Cancelling a NuGet operation</h2>

<p>With Xamarin Studio you can now cancel the currently running NuGet package operation. This can be done
by clicking the red Stop button in the Status Bar or in the Package Console.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-1/StatusBarStopButton.png" title="&lsquo;Status bar stop button&rsquo; &lsquo;Status bar stop button&rsquo;" ></p>

<h2>Adding local package sources</h2>

<p>When adding a package source in Preferences it is now easier to create a package source for
a directory on your local machine. There is now a browse button which will allow you to browse to a directory and add it rather than having to type the full path into the text box.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-1/AddPackageSourceDialog.png" title="&lsquo;Add Package Source dialog&rsquo; &lsquo;Add Package Source dialog&rsquo;" ></p>

<p>The Add Package Source dialog has also been changed to make it more obvious that either a URL or a folder can be used as a package source. The URL label has been changed to Location and the placeholder text now specifies that a URL or a folder can be used.</p>

<h2>Forced NuGet package removal</h2>

<p>A NuGet package can now be removed when it not restored and is unavailable from all package sources.</p>

<p>With older versions of Xamarin Studio a NuGet package must be restored before it can be
removed. This is a requirement of NuGet since it requires the original NuGet package to work out what has been installed so it can determine what needs to be uninstalled. NuGet can do more than just update the project file with references and MSBuild .targets files, it may add new files to the project or it may run app.config or web.config transforms.</p>

<p>When the NuGet package removal fails because the NuGet package cannot be restored a dialog will be
displayed asking whether you want to try to remove the NuGet package anyway. If the OK button is selected
then Xamarin Studio will:</p>

<ol>
<li>Remove the NuGet package from the packages.config file.</li>
<li>Remove any assembly references for the NuGet package from the project file (.csproj).</li>
<li>Remove any Imports that refer to .targets or .props files that were included with that NuGet package.</li>
</ol>


<p>This process may miss files that were added to the project by NuGet but in the majority of cases it should remove the NuGet package successfully without having to manually remove the NuGet package information from the project file.</p>

<h2>Packages installed in solution are no longer shown in Add Packages dialog</h2>

<p>With previous versions of Xamarin Studio all packages installed in the solution were shown first in the list of packages in the Add Packages dialog. Packages installed in the solution are now no longer shown in the Add Packages dialog.</p>

<h2>Only global package sources shown in Preferences</h2>

<p>The package sources shown in the Preferences dialog are now only read from the global NuGet config file. Per-solution NuGet.Config files located in individual solution directories are no longer read when showing the package sources in Preferences. This is because changes made in Preferences only modifies the global NuGet.Config file.</p>

<p>The package sources shown in the Add packages dialog will still include package sources defined in a solution&rsquo;s NuGet.Config file and is unaffected by this change.</p>

<h2>NuGet version displayed in About dialog</h2>

<p>The version of NuGet supported by Xamarin Studio is now displayed in the About dialog when the Show Details button is selected.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-1/AboutDialog.png" title="&lsquo;About dialog&rsquo; &lsquo;About dialog&rsquo;" ></p>

<h2>Bug Fixes</h2>

<p><strong>Custom MSBuild  .targets files were not always added to the end of the project</strong></p>

<p>When installing a NuGet package that has a .targets file the Import element created was grouped with the existing Import elements. This is OK most of the time however if there are other items in the project added after the import then any build targets may fail since these items are included after the import. One example is the netfx-System.StringResources NuGet package which may not find any resource files that occur in the project after its Import element.</p>

<p>Now .targets files are added as the last element in the project file. This also makes the behaviour consistent with how NuGet works in Visual Studio.</p>

<p><strong>Custom MSBuild .props files were not added to the start of the project</strong></p>

<p>Installing a NuGet package that included an MSBuild .props file would add an Import element for the .props file at the end of the project file which is incorrect. Now .props files are added to the project file as the first child element inside the Project&rsquo;s root element.</p>

<h2>Known Issues</h2>

<p><strong>Offline package restore</strong></p>

<p>Package restore may not work when you are offline
even though the NuGet packages may be available in the local NuGet cache on your machine.</p>

<p>The current workaround is to create a package source that
points to a local directory containing all the required NuGet packages and disable all online
NuGet package sources. With just the local package source enabled you can then restore the NuGet packages when you are
offline. Note that this problem also affects Visual Studio 2015.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Package Explorer for Xamarin Studio]]></title>
    <link href="http://lastexitcode.com/blog/2016/08/20/NuGetExplorerForXamarinStudio/"/>
    <updated>2016-08-20T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/08/20/NuGetExplorerForXamarinStudio</id>
    <content type="html"><![CDATA[<p>When diagnosing why a NuGet package cannot be installed into a project the application I use is the excellent <a href="https://github.com/NuGetPackageExplorer/NuGetPackageExplorer">NuGet Package Explorer</a>. Whenever there is an error trying to install a NuGet package, similar to the one shown below, you can open the NuGet package with NuGet Package Explorer and take a look at the target frameworks it supports.</p>

<pre><code>You are trying to install this package into a project that targets 'MonoAndroid,Version=v6.0',
but the package does not contain any assembly references or content files that are compatible with that framework.
</code></pre>

<p>Currently <a href="https://github.com/NuGetPackageExplorer/NuGetPackageExplorer">NuGet Package Explorer</a> is only available on Windows. On other operating systems you can change the file extension to .zip, extract the contents of the NuGet package, or open it into a zip application, and take a look at the files.</p>

<p>To make exploring NuGet packages easier on operating systems where the NuGet Package Explorer application is not available there is a now <a href="https://github.com/mrward/monodevelop-nuget-package-explorer">NuGet Explorer addin</a> that you can install into Xamarin Studio or MonoDevelop. With this addin you can open and explore NuGet packages from online package sources or from the local file system.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/ViewingAndroidSupportNuGetPackageContents.png" title="&lsquo;Exploring the Xamarin.Android.Support NuGet package in Xamarin Studio&rsquo; &lsquo;Exploring the Xamarin.Android.Support NuGet package in Xamarin Studio&rsquo;" ></p>

<p>Now let us take a look in more detail of the features provided by the NuGet Package Explorer addin.</p>

<h2>Features</h2>

<ul>
<li>Open and view NuGet packages from online package sources or from the local file system.</li>
<li>View the NuGet package metadata.</li>
<li>View the NuGet package files.</li>
<li>View the NuGet package .nuspec file.</li>
<li>Open any file stored inside the NuGet package.</li>
<li>Open other NuGet packages that are listed as dependencies.</li>
</ul>


<p>Supports Xamarin Studio 6.0 and MonoDevelop 6.0.</p>

<h2>Opening a NuGet Package from a Package Source</h2>

<p>To open a NuGet package from a package source you can select Open NuGet Package from the File menu.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/FileOpenNuGetPackageMenu.png" title="&lsquo;File Open NuGet Package menu&rsquo; &lsquo;File Open NuGet Package menu&rsquo;" ></p>

<p>Alternatively if you have a project open you can right click the Packages folder in the Solution window and select Open NuGet Package.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/OpenNuGetPackagePackagesFolderMenu.png" title="&lsquo;Open Package menu on Packages folder&rsquo; &lsquo;Open Package menu on Packages folder&rsquo;" ></p>

<p>This will open the Open Package dialog. This dialog is the same as the Add Packages dialog used when installing a NuGet package and allows you to search for NuGet packages. The dialog is based on the version available with Xamarin Studio 6.1 so it has a version combo box where you can select a specific package version instead of having to remember the syntax for the package version search.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/OpenPackageDialog.png" title="&lsquo;Open NuGet Package dialog&rsquo; &lsquo;Open Package dialog&rsquo;" ></p>

<p>Select one or more NuGet packages and click the Open Package button to download and display them in Xamarin Studio.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/ViewingJsonNetPackageContents.png" title="&lsquo;Exploring the JSON.NET NuGet package in Xamarin Studio&rsquo; &lsquo;Exploring the JSON.NET NuGet package in Xamarin Studio&rsquo;" ></p>

<p>The NuGet package metadata is shown on the left. On the right are the files that the NuGet package contains. You can also view the .nuspec file stored in the NuGet package by selecting the NuSpec tab at the bottom of the window.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/ViewingJsonNetNuSpec.png" title="&lsquo;Viewing JSON.NET .nuspec file&rsquo; &lsquo;Viewing JSON.NET .nuspec file&rsquo;" ></p>

<h2>Exploring Dependencies</h2>

<p>NuGet package dependencies are displayed with hyperlinks.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/ViewingJsonNetPackageDependencies.png" title="&lsquo;Viewing JSON.NET dependencies&rsquo; &lsquo;Viewing JSON.NET dependencies" ></p>

<p>If you click one these hyperlinks the Open Package dialog will be opened and the package will be searched for. You can then choose a package version and open the NuGet package.</p>

<h2>Opening Files Contained Inside the NuGet Package</h2>

<p>To open a file contained inside a NuGet package you can double click the file, or right click the file and select Open.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/OpenFileInsideNuGetPackageMenu.png" title="&lsquo;Open menu to open file inside NuGet package into Xamarin Studio&rsquo; &lsquo;Open menu to open file inside NuGet package into Xamarin Studio&rsquo;" ></p>

<p>The file will then be opened inside Xamarin Studio.</p>

<h2>Opening a NuGet Package File</h2>

<p>If you have a NuGet Package (.nupkg) stored on the local machine that is not available from any package source you can open the file directly in Xamarin Studio by selecting Open from the File menu.</p>

<p>You can also associate .nupkg files directly with Xamarin Studio and have them automatically open inside the IDE.</p>

<h2>Opening a NuGet Package Installed in a Project</h2>

<p>You can explore NuGet packages that are installed in your project by right clicking the package in the Solution window and selecting Open Package.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/OpenInstalledPackageMenu.png" title="&lsquo;Open installed package context menu&rsquo; &lsquo;Open installed package context menu&rsquo;" ></p>

<h2>Installing the NuGet Package Explorer addin</h2>

<p>The NuGet Package Explorer addin is available from the MonoDevelop addin repository on the beta channel. It can be installed by from the Add-in Manager by searching the gallery and then clicking the Install button.</p>

<p><img src="/images/blog/NuGetPackageExplorerForXamarinStudio/AddinManagerDialog.png" title="&lsquo;Addin Manager dialog&rsquo; &lsquo;Addin Manager dialog&rsquo;" ></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 6.0]]></title>
    <link href="http://lastexitcode.com/blog/2016/06/12/NuGetSupportInXamarinStudio6-0/"/>
    <updated>2016-06-12T14:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2016/06/12/NuGetSupportInXamarinStudio6-0</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 6.0 was released last week and it includes a lot of <a href="https://blog.xamarin.com/live-from-dotnetconf-cycle-7-xamarin-studio-6-and-more/">new features</a>, such as a new dark theme and <a href="https://github.com/dotnet/roslyn">Roslyn integration</a>. This release also includes some improvements made to the NuGet support.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-0/AddPackagesDialogDarkTheme.png" title="&lsquo;Add Packages Dialog &ndash; Dark Theme&rsquo; &lsquo;Add Packages Dialog &ndash; Dark Theme&rsquo;" ></p>

<h2>New Features</h2>

<ul>
<li> Support NuGet packages targeting tvOS.</li>
<li> Support updating pre-release NuGet packages.</li>
<li> Show updates available for pre-release NuGet packages.</li>
<li> Remember Show pre-release Packages setting in Add Packages dialog.</li>
<li> Error dialog displayed if NuGet.Config file cannot be read.</li>
</ul>


<p>More information on all the changes in Xamarin Studio 6.0 can be found in the <a href="https://developer.xamarin.com/releases/studio/xamarin.studio_6.0/xamarin.studio_6.0/">release notes</a>.</p>

<h2>Support NuGet packages targeting watchOS</h2>

<p>A new Xamarin.WatchOS target framework is now supported which allows NuGet packages to contain assemblies for watchOS.</p>

<h2>Support updating pre-release NuGet packages</h2>

<p>Previously it was not possible to update a pre-release NuGet package to a later pre-release  from the Solution window, only updates to stable NuGet packages were supported. The only way to update to a later pre-release NuGet package was to use the Add Packages dialog.</p>

<p>Now an individual pre-release NuGet package can be updated by right clicking and selecting Update. When all packages in a project or solution are updated then pre-release NuGet packages will be updated to a later pre-release version if they are available.</p>

<h2>Show updates available for pre-release NuGet packages</h2>

<p>Previously Xamarin Studio would only show stable NuGet package updates as being available if a pre-release NuGet package was installed. Now Xamarin Studio will check for updates for pre-release NuGet packages as well as stable packages and display this information in the Solution window.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio6-0/PreReleaseNuGetPackageUpdatesInSolutionWindow.png" title="&lsquo;Pre-release NuGet package updates in Solution window&rsquo; &lsquo;Pre-release NuGet package updates in Solution window&rsquo;" ></p>

<p>Only if an installed NuGet package is a pre-release version will pre-release updates be shown as available in the Solution window. Xamarin Studio will not check for pre-release updates for stable NuGet package versions that are installed.</p>

<h2>Remember Show pre-release Packages setting in Add Packages dialog</h2>

<p>The Show pre-release Packages check box setting will now be remembered in the Add Packages dialog on a per solution basis.</p>

<h2>Error dialog displayed if the NuGet.Config file cannot be read</h2>

<p>Previously if the NuGet.Config file could not be read the error would
be silently logged, but not reported, and Xamarin Studio would
then switch to using the default official NuGet package source. Now an error
dialog is shown indicating that there was a problem reading the
NuGet.Config file.</p>

<h2>Bug Fixes</h2>

<p><strong>Support NuGet packages that use icons from local files</strong></p>

<p>A NuGet package can now use an icon, which will be shown in the Add Packages
dialog, taken from the local file system using a file url. Previously this would fail with an invalid cast exception.</p>

<p><strong>Incorrect update count displayed after updating NuGet packages.</strong></p>

<p>When an update caused a NuGet package to be uninstalled the Packages
folder in the Solution window would show an incorrect count for the available updates.</p>

<p><strong>NuGet restore and update not working for workspaces</strong></p>

<p>With a workspace opened, or multiple solutions opened in Xamarin Studio, then restoring and updating NuGet packages would only work for one of the solutions.</p>

<p><strong>Unable to add Google Play Services packages</strong></p>

<p>The Xamarin.Android.Support.v7.AppCompat NuGet package depends on
a single version of the Xamarin.Android.Support.v4 NuGet package.
When a Xamarin Google Play Services NuGet package is installed
that depends on a higher version of the Xamarin.Android.Support.v4
NuGet package the install would fail to find a version of the
AppCompat NuGet package that is compatible. An error similar to the
following would be displayed in the Package Console window:</p>

<pre><code>Could not add Xamarin.GooglePlayServices.Ads.
Updating 'Xamarin.Android.Support.v4 23.1.1.0' to
'Xamarin.Android.Support.v4 23.1.1.1' failed. Unable to find a version
of 'Xamarin.Android.Support.v7.AppCompat' that is compatible with
'Xamarin.Android.Support.v4 23.1.1.1'.
</code></pre>

<p>The problem was that the AppCompat NuGet package is not involved
in the initial NuGet package resolution using the remote package
source so it is initially not considered for installation into the
packages directory. When a package reference is then added to the
packages.config file a search for a compatible AppCompat package was
only using the local solution&rsquo;s packages directory which fails causing
the install to fail.</p>

<p>To fix this the local solution packages directory is used first
when looking for a compatible AppCompat NuGet package and will
fallback to using the configured remote package sources if no suitable package
is found in this directory. To handle a package being added to the
packages.config at this point, after the original NuGet packages have
already been downloaded to the solution&rsquo;s packages directory, Xamarin Studio will detect a package is added to the packages.config file and install the NuGet package if it is not
already in the local solution packages directory.</p>

<p><strong>Incorrect package version being installed</strong></p>

<p>When installing a NuGet package using the Google Play Services dialog a package version is not specified by the dialog. If the NuGet package being installed was found in the local machine&rsquo;s NuGet cache it would be used instead of the latest version from the official NuGet gallery at nuget.org. This could result in a lower version being installed than expected.</p>

<p><strong>MSBuild property files (.props) not being added at correct project location</strong></p>

<p>Installing a NuGet package that included an MSBuild .props file would
add an Import element for the .props at the end of the project file
(.csproj) instead of at the start. The .props files are now added to the project
file as the first child element inside the project&rsquo;s root element.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.10]]></title>
    <link href="http://lastexitcode.com/blog/2015/11/22/NuGetSupportInXamarinStudio5-10/"/>
    <updated>2015-11-22T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2015/11/22/NuGetSupportInXamarinStudio5-10</id>
    <content type="html"><![CDATA[<p>Xamarin Studio 5.10 was released last week as part of the <a href="https://blog.xamarin.com/introducing-xamarin-4/">Xamarin 4 release</a> and it includes changes to the NuGet support.</p>

<h2>Changes</h2>

<ul>
<li> Support NuGet 2.8.7.</li>
<li> Open readme.txt when a NuGet package is installed.</li>
<li> Support packages.config file named after the project.</li>
<li> Local Copy settings are preserved for references when updating packages.</li>
<li> Do not show Checking for package updates message in status bar.</li>
<li> Do not show warning in the status bar if a NuGet package has PowerShell scripts.</li>
<li> Prevent the solution being closed when NuGet packages are being added.</li>
<li> Removing a NuGet package does not update the Solution window when multiple solutions are open.</li>
<li> Prevent packages.config file being marked as deleted by Git after updating a pre-release NuGet package.</li>
<li> Prevent retargeting a NuGet package marking packages.config as deleted by Git.</li>
<li> Allow Microsoft.ApplicationInsights NuGet package to be installed.</li>
<li> Support NuGet packages targeting watchOS.</li>
<li> Package license acceptance (Xamarin Studio 5.10.3)</li>
</ul>


<p>More information on all the changes in Xamarin Studio 5.10 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.10/xamarin.studio_5.10/">release notes</a>.</p>

<h2>NuGet 2.8.7 support</h2>

<p>Xamarin Studio now supports NuGet 2.8.7. NuGet 2.8.7 adds support for the Universal App Platform (UAP) target framework to support Windows 10 Application Development.</p>

<h2>Open readme.txt when a NuGet package is installed</h2>

<p>A NuGet package can contain a <a href="https://docs.nuget.org/create/creating-and-publishing-a-package#user-content-automatically-displaying-a-readmetxt-file-during-package-installation">readme.txt file</a> which Xamarin Studio will now open and display in the text editor when the NuGet package is installed or updated.</p>

<h2>Preserve Local Copy on Updating Packages</h2>

<p>The Local Copy setting on an assembly reference will now be preserved when updating a NuGet package or retargeting a NuGet package.</p>

<p>By default Local Copy is set to true for assembly references when installing a NuGet package. If you set Local Copy to false for one or more of these references then this setting will now be preserved when updating or retargeting the NuGet package.</p>

<h2>Packages.config file named after project</h2>

<p>NuGet supports multiple projects in the same directory each using their own packages.config file. To allow multiple projects in the same directory to each use their own NuGet packages you can name the packages.config file after each project. In the examples below the project filename is on the left and the corresponding packages.config filename is on the right.</p>

<ul>
<li>Foo.csproj => packages.Foo.config</li>
<li>Bar.csproj => packages.Bar.config</li>
<li>Foo Bar.csproj => packages.Foo_Bar.config</li>
</ul>


<p>Xamarin Studio now checks for the packages.ProjectName.config file first and will use it if it exists, otherwise it will fall back to the default behaviour and use the packages.config file.</p>

<p>Note that a new project without any NuGet packages will use a packages.config file by default. The basic procedure to enable a project specific packages.config file when creating a new project is:</p>

<ol>
<li>Create new project called Foo.</li>
<li>Add a NuGet package to the Foo project.</li>
<li>Rename the packages.config file to packages.Foo.config</li>
<li>Reload the solution in Xamarin Studio.</li>
</ol>


<p>Also note that if you remove all the NuGet packages from a project the packages.ProjectName.config file will be deleted and on adding a new NuGet package the default packages.config file will be used.</p>

<h2>Do not show Checking for package updates message in status bar</h2>

<p>Previously when Xamarin Studio was checking for NuGet package updates a message would appear in the status bar. This status bar message has now been removed since checking for NuGet package updates is a background task and does not prevent Xamarin Studio from being used.</p>

<h2>Do not show warning in the status bar if a NuGet package has PowerShell scripts</h2>

<p>Previously if a NuGet package was installed and it contained PowerShell scripts then a warning was shown in the status bar. Now this message is only shown in the Package Console window.</p>

<h2>Prevent the solution being closed when NuGet packages are being added</h2>

<p>A check is now made when Xamarin Studio is closed to see if NuGet packages are still being installed. If this is the case then a dialog will be displayed indicating that it is not currently possible to close Xamarin Studio allowing the NuGet package to finish installing.</p>

<h2>Support NuGet packages targeting watchOS</h2>

<p>A new Xamarin.WatchOS target framework is now supported which allows NuGet packages to contain assemblies for watchOS.</p>

<h2>Package license acceptance</h2>

<p>Xamarin Studio 5.10.3 now includes a license acceptance dialog that will be displayed if a NuGet package requires a license to be accepted before it is installed. If the license is declined then the NuGet package will not be installed.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-10/PackageLicenseAcceptanceDialog.png" title="&lsquo;Package license acceptance dialog&rsquo; &lsquo;Package license acceptance dialog&rsquo;" ></p>

<h2>Bug Fixes</h2>

<p><strong>Removing a NuGet package does not update the Solution window when multiple solutions are open</strong></p>

<p>With two or more solutions opened at the same time the Packages folder would not be updated for all solutions when a NuGet package was removed. This was because Xamarin Studio was not refreshing the Packages folder for all solutions currently open.</p>

<p><strong>Prevent packages.config file being marked as deleted by Git after updating pre-release NuGet package.</strong></p>

<p>If there was only one pre-release NuGet package installed into a project and then a later version of the NuGet package was installed from the Add Packages dialog then the packages.config file was then being shown as deleted by Git instead of modified.</p>

<p>The packages.config file is deleted by NuGet after the old NuGet package is uninstalled if there are no NuGet packages referenced. A special case to handle this was added in Xamarin Studio 5.3 but that only handled updating a NuGet package from the Solution window. Now updating a pre-release from the Add Packages dialog is also handled.</p>

<p><strong>Retargeting a NuGet package marks packages.config as deleted by Git</strong></p>

<p>This is similar to the previous bug. Retargeting a NuGet package will uninstall and then install the NuGet package. If there is only one NuGet package in the project then the packages.config file is deleted and was causing Git to mark the file as deleted instead of updated.</p>

<p><strong>Unable to install Microsoft.ApplicationInsights NuGet package</strong></p>

<p>Xamarin Studio 5.9.2 added support for NuGet 2.8.5 but it was not possible to install the <a href="https://www.nuget.org/packages/Microsoft.ApplicationInsights/">Microsoft.ApplicationInsights NuGet package</a> into a project. It was possible to install it using Visual Studio with NuGet 2.8.3 or higher installed. The error reported by Xamarin Studio was:</p>

<pre><code>Adding Microsoft.ApplicationInsights...
The 'Microsoft.ApplicationInsights' package requires NuGet client version '2.8.50313' or above, but the current NuGet version is '2.8.5.0'.
</code></pre>

<p>Xamarin Studio 5.10 now allows the Microsoft.ApplicationInsights NuGet package to be installed into a project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Xamarin Studio 5.9.2]]></title>
    <link href="http://lastexitcode.com/blog/2015/06/07/NuGetSupportInXamarinStudio5-9-2/"/>
    <updated>2015-06-07T10:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2015/06/07/NuGetSupportInXamarinStudio5-9-2</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 2.8.5 support</li>
<li> NuGet warning and error messages in Status Bar</li>
</ul>


<p>More information on all the changes in Xamarin Studio 5.9.2 can be found in the <a href="http://developer.xamarin.com/releases/studio/xamarin.studio_5.9/xamarin.studio_5.9/">release notes</a>.</p>

<h2>NuGet 2.8.5 support</h2>

<p>Xamarin Studio now supports NuGet 2.8.5.</p>

<p>NuGet 2.8.5 adds support for three new .NET target frameworks: DNX, DNXCore and Core.</p>

<p>With NuGet 2.8.5 supported you can now install the <a href="https://www.nuget.org/packages/xunit/2.1.0-beta2-build2981">latest pre-release version of xUnit</a>.</p>

<h2>NuGet warning and error messages in Status Bar.</h2>

<p>Xamarin Studio 5.9 has a new native Status Bar on the Mac. This new Status Bar has a smaller width so the NuGet warning and error messages could be too long to be displayed. The screenshots below show a NuGet warning and error message in Xamarin Studio 5.9 that do not fit in the Status Bar.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-9-2/NuGetWarningMessageTruncatedInStatusBar.png" title="&lsquo;NuGet warning message truncated in status bar&rsquo; &lsquo;NuGet warning message truncated in status bar&rsquo;" ></p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-9-2/NuGetErrorMessageTruncatedInStatusBar.png" title="&lsquo;NuGet error message truncated in status bar&rsquo; &lsquo;NuGet error message truncated in status bar&rsquo;" ></p>

<p>In Xamarin Studio 5.9.2 the NuGet Status Bar messages have been shortened so they can be displayed in the new Status Bar without being truncated. The screenshots below show the new format of the NuGet warning and error messages shown in the Status Bar.</p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-9-2/NuGetShortenedWarningMessageInStatusBar.png" title="&lsquo;Shortened NuGet warning message in status bar&rsquo; &lsquo;Shortened NuGet warning message in status bar&rsquo;" ></p>

<p><img src="/images/blog/NuGetSupportInXamarinStudio5-9-2/NuGetShortenedErrorMessageInStatusBar.png" title="&lsquo;Shortened NuGet error message in status bar&rsquo; &lsquo;Shortened NuGet error message in status bar&rsquo;" ></p>
]]></content>
  </entry>
  
</feed>
