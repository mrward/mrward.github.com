<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nuget | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/nuget/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2018-03-19T21:40:56+00:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.4]]></title>
    <link href="http://lastexitcode.com/blog/2018/03/10/NuGetSupportInVisualStudioMac7-4/"/>
    <updated>2018-03-10T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2018/03/10/NuGetSupportInVisualStudioMac7-4</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Support NuGet RestoreProjectStyle MSBuild Property</li>
<li> .NET Core xUnit tests not displayed if NuGet packages not cached</li>
<li> No tests displayed when project uses a NUnit PackageReference</li>
<li> NuGet MSBuild imports not removed when migrating to project.json</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.4</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#15.6">release notes</a>.</p>

<h2>Support RestoreProjectStyle MSBuild property</h2>

<p>If a project sets the RestoreProjectStyle property to be
PackageReference then the project will be restored as though it has
PackageReferences even if it does not have any.</p>

<pre><code>&lt;RestoreProjectStyle&gt;PackageReference&lt;/RestoreProjectStyle&gt;
</code></pre>

<p>This fixes runtime problems when a project references a .NET Standard
project that has PackageReferences. Without the RestoreProjectStyle set
the assemblies from the NuGet packages are not copied to the output
directory and would have to be added to the main project.</p>

<h2>Bug Fixes</h2>

<p><strong>.NET Core xUnit tests not displayed if NuGet packages are not in local NuGet cache</strong></p>

<p>If the NuGet packages that contain the VS Test adapters were not available in
the local machine&rsquo;s NuGet package cache then
the Unit Tests window would not show any tests after the NuGet
packages were restored and the project was compiled.</p>

<p>Visual Studio for Mac would not initially find any test adapter dlls
and would not attempt to discover any tests for the project after the
NuGet packages were downloaded into the NuGet package cache.</p>

<p>Now after the NuGet package restore has completed the check for a
VS Test adapter is now re-run.</p>

<p><strong>No tests displayed when a project uses a NUnit PackageReference</strong></p>

<p>The Unit Tests window would not show any unit tests when a non .NET
Core project contained a NUnit PackageReference. Visual Studio for
Mac was looking for a PackageReference that contained &lsquo;nunit.framework&rsquo;
and was not finding the NUnit NuGet package reference.</p>

<p><strong>NuGet MSBuild imports not removed when migrating to project.json</strong></p>

<p>When a Portable Class Library project was migrated to use a project.json
file the MSBuild imports added by NuGet were not removed. These imports
are added by NuGet into the generated ProjectName.nuget.props and
ProjectName.nuget.targets files on restoring a project.json file.
Leaving the import in the project file would result in the import
being used twice. When a PCL project that used Xamarin.Forms was
migrated to project.json the project would fail to compile with the
error:</p>

<pre><code>Error XF001: Xamarin.Forms targets have been imported multiple times.
Please check your project file and remove the duplicate import(s).
</code></pre>

<p>Now on migrating to project.json the MSBuild imports added by NuGet packages
to the project are removed.</p>

<p><strong>Fix unhandled exception when searching for packages</strong></p>

<p>An unhandled exception was being logged if a package source returned
an error or the package source url was invalid. This was because a
task was not being observed when the package sources were being used.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.3]]></title>
    <link href="http://lastexitcode.com/blog/2017/12/10/NuGetSupportInVisualStudioMac7-3/"/>
    <updated>2017-12-10T11:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2017/12/10/NuGetSupportInVisualStudioMac7-3</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Support installing System.ValueTuple NuGet Package from Quick Fixes</li>
<li> NuGetizer 3000 &ndash; Update NuGet.Build.Packaging to version 0.2</li>
<li> Support NuGet Restore MSBuild Properties

<ul>
<li>RestoreAdditionalProjectFallbackFolders</li>
<li>RestoreAdditionalProjectSources</li>
<li>RestoreFallbackFolders</li>
<li>RestorePackagesPath</li>
<li>RestoreSources</li>
</ul>
</li>
<li> Fixed transitive dependencies not available when using project.json</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.3</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-december-4-2017---visual-studio-2017-version-73-730797">release notes</a>.</p>

<h2>Quick Fix &ndash; Install System.ValueTuple NuGet Package</h2>

<p><a href="https://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/">C# 7.0 introduced tuple types</a>
that may require the System.ValueTuple NuGet package
to be added to the project. Visual Studio for Mac
now offers to install the System.ValueTuple NuGet package if the project requires this NuGet package.</p>

<p>Creating a .NET Framework 4.6 project with the following code:</p>

<p>```</p>

<pre><code>public (string, int) GetValues(string id)
{
    return ("Name", 25);
}
</code></pre>

<p>```</p>

<p>You will see error markers in the text editor. If you hover over
one of these error markers you will see a
<strong>Predefined type &lsquo;System.ValueTuple`2&rsquo; is not defined or imported</strong> message.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-3/ValueTupleTextEditorErrorTooltip.png" title="&lsquo;ValueTuple type not defined text editor error tooltip&rsquo; &lsquo;ValueTuple type not defined text editor error tooltip&rsquo;" ></p>

<p>If you right click the error marker there is now a new
<strong>Install Package &lsquo;System.ValueTuple&rsquo;</strong> Quick Fix action available.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-3/TextEditorInstallSystemValueTuplePackageQuickFix.png" title="&lsquo;Text editor Install System.ValueTuple Package quick fix menu item&rsquo; &lsquo;Text editor Install System.ValueTuple Package quick fix menu item&rsquo;" ></p>

<p>From this menu you can install the latest System.ValueTuple NuGet package
or open the Add Packages dialog to search for a specific version of the System.ValueTuple NuGet
package.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-3/TextEditorInstallLatestSystemValueTupleQuickFix.png" title="&lsquo;Text editor install latest System.ValueTuple package quick fix menu item&rsquo; &lsquo;Text editor install latest System.ValueTuple package quick fix menu item&rsquo;" ></p>

<p>Note that if the project is targeting .NET Framework 4.7 or .NET Standard 2.0 then the
System.ValueTuple NuGet package is not required.</p>

<p>Also note that the official nuget.org package source needs to be available
for this feature to work.</p>

<h2>NuGetizer 3000 &ndash; Updated NuGet.Build.Packaging to version 0.2</h2>

<p>The version of the NuGet.Build.Packaging NuGet package used by default for NuGetizer 3000 support
has been updated from 0.1.276 to 0.2.0. This fixes a
potential build error when building with Mono 5.6.</p>

<p><code>
Using "ReportAssetsLogMessages" task from assembly "/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/../tools/net46/Microsoft.NET.Build.Tasks.dll".
Task "ReportAssetsLogMessages"
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: The "ReportAssetsLogMessages" task failed unexpectedly. [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: System.TypeLoadException: Could not resolve type with token 0100005b (from typeref, class/assembly NuGet.ProjectModel.IAssetsLogMessage, NuGet.ProjectModel, Version=4.3.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35) [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: at Microsoft.NET.Build.Tasks.TaskBase.Execute () [0x00000] in &lt;01420900fd004c128de2d2ee31bad624&gt;:0 [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00023] in &lt;765502eb2f884ce79731edeb4b0517fb&gt;:0 [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: at Microsoft.Build.BackEnd.TaskBuilder+d__26.MoveNext () [0x0022d] in &lt;765502eb2f884ce79731edeb4b0517fb&gt;:0 [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
</code></p>

<p>The ReadLegacyDependencies target from NuGet.Build.Packaging.Tasks is called when PackOnBuild
is set to true.</p>

<p>The NuGet.Build.Packaging.Tasks assembly was loading an embedded NuGet.ProjectModel
assembly that conflicts with the version that is used by Microsoft.NET.Build.Tasks.</p>

<h2>Support RestoreAdditionalProjectFallbackFolders MSBuild Property</h2>

<p>The RestoreAdditionalProjectFallbackFolders MSBuild property is
read and appended to the list of fallback folders stored in the
project.assets.json file. The .NET Core 2.0 SDK will set this
MSBuild property to point to the NuGet package fallback folder
that is installed with the SDK. This will be used
to resolve NuGet packages first before downloading them to the
~/.nuget/packages folder.</p>

<h2>Support RestoreAdditionalProjectSources MSBuild Property</h2>

<p>The RestoreAdditionalProjectSources MSBuild property can be used
to add additional package sources to the existing list of sources
used to resolve packages.</p>

<h2>Support RestoreFallbackFolders MSBuild Property</h2>

<p>The RestoreFallbackFolders MSBuild property can be used by project that uses
PackageReferences to define a set of package fallback folders that
will override any specified in the NuGet.Config file. It can also
be used to clear any pre-defined fallback folders by specifying
&lsquo;clear&rsquo; as its value. Note that this value does not affect any
folders defined by RestoreAdditionalProjectFallbackFolders which
will be appended even if RestoreFallbackFolders is set to &lsquo;clear&rsquo;.</p>

<h2>Support RestorePackagesPath MSBuild Property</h2>

<p>The RestorePackagesPath MSBuild property can be used to override the global packages
folder location when a project uses a PackageReference.</p>

<h2>Support RestoreSources MSBuild property</h2>

<p>The RestoreSources MSBuild property can be used to override
the sources defined by any NuGet.Config file. Any sources defined in the
RestoreAdditionalProjectSources MSBuild property will still be appended to the
list of sources if RestoreSources is defined.</p>

<h2>Bug Fixes</h2>

<p><strong>Transitive dependencies not available when using project.json</strong></p>

<p>With two projects A and B that both use project.json files, project B
referencing project A, the NuGet package dependencies used by project
A were not available to project B transitively. This was because the
project reference information was not being used
when a restore occurred. This caused the assemblies from the transitively
referenced NuGet packages to not be added to the
project.lock.json file for Project B.</p>

<p><strong>Unable to debug a new Azure Functions project without re-opening project</strong></p>

<p>After creating a new Azure Functions project it was possible to build the
project but not to debug it or run it. On closing and re-opening the solution
it would be possible to debug and run the Azure Functions project.</p>

<p>When Visual Studio for Mac created a new Azure Functions project
it initially determined that it could not run or debug the project.
After the Azure Functions project has its PackageReferences restored
it gains an AzureFunctions project capability. This capability is used to
determine if the project can be run. This change in the capability
was not handled by Visual Studio for Mac so it did not allow the
project to be run until the project was closed and re-opened.</p>

<p>Now, after the NuGet package restore is finished, the project is
re-evaluated and a check is made to see if the project can now be run.</p>

<p><strong>Fix generated NuGet files being imported twice</strong></p>

<p>The generated ProjectName.nuget.g.targets and ProjectName.nuget.g.props
that are created for .NET Core projects in the base intermediate
directory were being imported twice when evaluating the project.
Once by Microsoft.Common.props, provided with Mono, and once
by Visual Studio for Mac.</p>

<p>This duplicate import was resulting in a duplicate file being added
to the project held in memory by Visual Studio for Mac when the
Xamarin.Forms 2.4 NuGet package was used in a .NET Standard
project and no .NET Core SDK is installed. This would result in the
content page xaml and associated C# file not being nested in the
solution window.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.2]]></title>
    <link href="http://lastexitcode.com/blog/2017/10/28/NuGetSupportInVisualStudioMac7-2/"/>
    <updated>2017-10-28T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/10/28/NuGetSupportInVisualStudioMac7-2</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 4.3.1 support</li>
<li> NuGet fallback folders support</li>
<li> AssetTargetFallback support</li>
<li> NuGet operations can be cancelled on closing the solution</li>
<li> Fixed transitive types from references not being available</li>
<li> Fixed credential dialog being shown multiple times on opening a solution</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.2</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-october-9-2017---visual-studio-2017-for-mac-720636">release notes</a>.</p>

<h2>NuGet 4.3.1 support</h2>

<p>NuGet 4.3.1.4445 is now included with Visual Studio for Mac 7.2.</p>

<p>NuGet 4.3.1 includes <a href="https://github.com/NuGet/Home/issues/5806">a fix for imports in the project.json file being ignored</a> which could cause a NuGet package
to incorrectly be considered incompatible when restoring NuGet packages.</p>

<h2>NuGet package fallback folders support</h2>

<p>The .NET Core SDK 2.0 defines a NuGet package fallback folder <code>/usr/local/share/dotnet/sdk/NuGetFallbackFolder</code> that can be used when looking
for NuGet packages whilst restoring. This fallback folder is now supported by
Visual Studio for Mac 7.2 so that on restoring a .NET Core 2.0 project the NuGet
packages from the fallback folder will be found and do not need to be downloaded from nuget.org into the
local machine NuGet package cache <code>~/.nuget/packages</code>. This should speed up NuGet package restore for .NET Core 2.0 and .NET Standard 2.0 projects the first time it occurs.</p>

<p>As well as the NuGet fallback folders Visual Studio for Mac will now add the following items to the generated project.assets.json
if they are available:</p>

<ul>
<li>configFilePaths</li>
<li>sources</li>
<li>warningProperties</li>
</ul>


<h2>AssetTargetFallback support</h2>

<p>The .NET Core 2.0 SDK uses an AssetTargetFallback MSBuild property
defined in an imported SDK MSBuild files. This is used instead
of the PackageTargetFallback property when determining if a NuGet
package is compatible. Currently the AssetTargetFallback property
is set to net461 by the .NET Core 2.0 SDK which allows .NET Core projects to use NuGet
packages that include assemblies that target the full .NET Framework.
The supported fallback frameworks are now added to the generated
project.assets.json file by Visual Studio for Mac when a .NET Core 2.0 project is restored.</p>

<h2>NuGet operations can be cancelled on the closing the solution</h2>

<p>Previously when closing the solution, or closing Visual Studio for Mac, when a NuGet package
operation was still running would result in a dialog being displayed saying that the
solution cannot be closed until the NuGet operation was completed.
NuGet v3 and above now allow the NuGet
operations to be cancelled so now the dialog allows the current
operation to be cancelled. If the
operation is taking a while to cancel a busy spinner image will be displayed in
the dialog.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-2/CancelNuGetOperationOnClosingSolutionDialog.png" title="&lsquo;Cancel NuGet operation dialog on closing solution&rsquo; &lsquo;Cancel NuGet operation dialog on closing solution&rsquo;" ></p>

<p>If a restore is being run when the solution
will be closed the restore will be cancelled automatically without showing the dialog.</p>

<h2>NuGet package restore now fails if package and asset target fallbacks are defined by a project</h2>

<p>If both AssetTargetFallback and PackageTargetFallback are defined by a project then the
NuGet restore will fail with an error indicating that they cannot
be used together. This mirrors the behaviour of the .NET Core command
line restore.</p>

<h2>Support imported package references in non .NET Core projects</h2>

<p>If a non .NET Core project had no PackageReference items but imported a file that
did have PackageReference items the NuGet packages were not restored
on opening the solution. This was because only the PackageReference
items defined directly in the project were checked to determine if the
project used NuGet packages. Now the evaluated MSBuild items are checked
so any imported PackageReference items are detected and a restore
will be run on opening the solution.</p>

<p>Note that imported PackageReference items are not displayed in the
Packages folder.</p>

<h2>Package Console is no longer opened when a NuGet operation is cancelled</h2>

<p>When a NuGet operation is cancelled from the main status bar the
Package Console is now not opened when the NuGet operation fails due
to the cancellation. If the NuGet operation is not cancelled then the
Package Console window will still be opened as before if the operation fails.
This is also a workaround for Visual Studio for Mac closing the currently displayed
dialog when the Package Console window opens after the NuGet operation
is cancelled when closing the solution.</p>

<h2>Whitespace is now trimmed when creating a new package source</h2>

<p>When creating a new package source copying and pasting NuGet package source url can sometimes copy extra
whitespace which can then result in NuGet package restore errors such as:</p>

<pre><code>Failed to verify the root directory of local source
' https://api.nuget.org/v3/index.json'.
</code></pre>

<p>The package source name and url will now have whitespace trimmed to avoid
this copy and paste problem. This also
matches Visual Studio on Windows behaviour.</p>

<h2>Mark implicit PackageReferences as auto referenced</h2>

<p>PackageReference items that have IsImplicitlyDefined set to true
in their metadata now have autoRefererenced set to true in the project.assets.json file.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed transitive assembly references not available until restart</strong></p>

<p>Given a solution that contains three .NET Standard projects: LibC
references LibB which references LibA. If the Newtonsoft.Json NuGet
package was installed into LibA the types from this NuGet package
were not available in LibB or LibC until the solution was closed and
re-opened again. Closing and re-opening the solution refreshes the
reference information used by the type system. Now when a NuGet
package is installed into a .NET Core project the projects that
reference this project have their reference information refreshed. Types from
the installed NuGet packages are then available in projects that
reference this updated project either directly or indirectly.</p>

<p><strong>Fixed transitive project references after editing a project file</strong></p>

<p>Given a solution that contains three .NET Standard projects: LibC references
LibB which references LibA. If a NuGet package is added to LibA by
editing its project file in the text editor the types from this NuGet
package were not available to LibB or LibC without restarting Visual Studio
for Mac or until the packages were restored for the solution. Now when the project file
is saved the projects that directly or indirectly reference the project
will be restored.</p>

<p><strong>Fixed credential dialog shown multiple times on opening a solution</strong></p>

<p>With check for updates enabled, multiple projects in the solution,
and a package source that was missing or had invalid credentials,
on opening the solution the credential dialog would be displayed multiple
times even if the correct username and password was entered or the
dialog was cancelled. The dialog was being displayed for each
project and the credential information was not being re-used.</p>

<p>Now the NuGet source repositories are re-used when checking
for updates and also when restoring the projects when the solution
is first opened. Any valid credentials entered will be re-used
when checking the remaining projects. If the credential dialog is
cancelled then the dialog is no longer displayed again whilst
checking for updates for the other projects.</p>

<p><strong>Fixed credential dialog displayed when credentials are available</strong></p>

<p>With valid credentials stored in the Mac key chain the credential dialog would
still be displayed when it should not have been. The problem was that the
NuGet credential service puts itself in a retry mode if any of the
credential providers are used when trying to authenticate against a
package source. Once in this retry mode the Visual Studio for Mac credential
provider would always show a dialog asking for the credentials instead
of re-using the existing credentials. To avoid this the credential
service is reset before any user actions, such as opening the Add Packages
dialog, running a restore or an update.</p>

<p><strong>Fixed crash when displaying Chinese characters in the Add Packages dialog</strong></p>

<p>With the NuGet v3 package source <a href="https://api.nuget.org/v3/index.json">https://api.nuget.org/v3/index.json</a>
selected, searching for Microsoft.AspNet.WebApi.Client would result in
the Visual Studio for Mac terminating when an attempt was made to display the results
in the Add Packages dialog.
The crash was in the Pango library when it attempted to determine the size of
the package title displayed in the search results. If the package
title contained Chinese characters then Pango would throw an exception:</p>

<pre><code>Illegal byte sequence encounted in the input.
at (wrapper managed-to-native) Pango.Layout:pango_layout_get_pixel_size (intptr,int&amp;,int&amp;)
</code></pre>

<p>Then when Visual Studio for Mac tried to use Pango again to determine the
size of the text this would result in Visual Studio for Mac terminating.</p>

<p>```
Pango-WARNING (recursed) **: shaping failure, expect ugly output.
shape-engine=&lsquo;BasicEngineCoreText&rsquo;, font=&lsquo;.SF NS Text&rsquo;,
text=&lsquo;∫ê'Stacktrace:</p>

<p>  at <unknown> <0xffffffff>
  at (wrapper managed-to-native) Pango.Layout.pango_layout_get_pixel_size (intptr,int&amp;,int&amp;) [0x0000b] in <c7aa2d93df4045df8dc71d5439f99d72>:0
```</p>

<p>If the NuGet v2 package source was used then this crash did not occur
since the package title was not returned in the search results and the package id would be
displayed instead which does not contain Chinese characters.</p>

<p>As a workaround the Add Packages dialog now displays the package id
instead of the package title.</p>

<p><strong>Ignore project references with ReferenceOutputAssembly set to false when restoring</strong></p>

<p>Project references that have ReferenceOutputAssembly are now not
added to the project.assets.json file. This was causing
the NuGet package restore to fail in some cases. For example, if a .NET Standard
project has a project reference to a .NET Core App project, but has the
ReferenceOutputAssembly set to false, then running dotnet restore from the
command line would work, but the restore would fail in Visual Studio for Mac.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.1]]></title>
    <link href="http://lastexitcode.com/blog/2017/08/26/NuGetSupportInVisualStudioMac7-1/"/>
    <updated>2017-08-26T14:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/08/26/NuGetSupportInVisualStudioMac7-1</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> NuGet 4.3 support</li>
<li> Support PackageReference in non .NET Core projects</li>
<li> Enable file template when a NuGet package is installed</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.1</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-august-14-2017---visual-studio-for-mac-7101297">release notes</a>.</p>

<h2>NuGet 4.3 Support</h2>

<p>NuGet 4.3.0.2418 is now included with Visual Studio for Mac 7.1.</p>

<p>This version of NuGet adds support for .NET Core 2.0 and .NET Standard 2.0
target frameworks.</p>

<h2>Support PackageReference in non .NET Core projects</h2>

<p>Non .NET Core Sdk style projects that use a PackageReference MSBuild item are now supported.</p>

<pre><code>&lt;PackageReference Include="Newtonsoft.Json"&gt;
  &lt;Version&gt;10.0.1&lt;/Version&gt;
&lt;/PackageReference&gt;
</code></pre>

<p>In Visual Studio for Mac 7.0 the Solution
window would not show any packages for the project, would not allow
the packages to be restored, and would create a packages.config file when installing
a NuGet package even though the project was using PackageReferences.</p>

<p>Now if the project has a PackageReference the Packages folder
shows the installed packages and can be used to update or install
NuGet packages which will also create PackageReference MSBuild items.</p>

<p>If the project has no PackageReferences then by default a
packages.config file will be created when a NuGet package is installed.</p>

<p>Currently it is not possible to opt-in to using PackageReferences by default.
So the project file will need to be edited in the text editor to include at
least one PackageReference before the default behaviour of using a packages.config
file is overridden.</p>

<h2>Enable file template when a NuGet package is installed</h2>

<p>A file template can now specify that it should be enabled if the project
has a specific reference or has a specific NuGet package installed.
Previously it was only possible to enable a file template based on the
references defined in the project file.</p>

<pre><code>&lt;HasPackageOrReference PackageId="Xamarin.Forms" Assembly="Xamarin.Forms" /&gt;
</code></pre>

<p>Whilst a reference will work for projects that use a packages.config
file, if the project uses a project.json file or PackageReferences
then checking the references defined in the project would not find any matches and
the file template would not be enabled.</p>

<h2>Bug Fixes</h2>

<p><strong>Do not require description when creating a new NuGet package project</strong></p>

<p>When creating a NuGet package project or a multiplatform project the description
needed to be specified in the New Project dialog.</p>

<p>To simplify the project creation
process the package id is used as the description by default. As you type the
package id into the New Project dialog the description text
box will be updated. The description can be changed to be different
to the package id if required.</p>

<p><strong>Fix being unable to load NuGet Package Project created by Visual Studio on Windows</strong></p>

<p>Visual Studio on Windows creates a NuGet package project (.nuproj)
with no target framework version which resulted in 4.0 being used by
default in Visual Studio for Mac. This would cause the project to fail to
load in Visual Studio for Mac since it was checking for 4.5 or later.</p>

<p><strong>Fix no packages shown in Packages folder for NuGet Package Projects</strong></p>

<p>Opening a previously created NuGet package project (.nuproj) would show no
packages in the Packages folder.</p>

<p>The problem was that the PackageReference project item was defined by
both the NuGet addin and the Packaging addin. The NuGet addin&rsquo;s PackageReference
project item was used instead of the one defined by the Packaging addin so no
package references were found for the NuGet package project.</p>

<p><strong>Fix NuGet Package Project&rsquo;s MSBuild targets not being created</strong></p>

<p>If the NuGet package project&rsquo;s generated .nuget.targets or .nuget.props are missing
then these are now created on opening the solution if
automatic restore is enabled.</p>

<p><strong>Fix being unable to package .NET Standard projects</strong></p>

<p>A NuGet package project that referenced an Sdk style .NET Standard project
would fail to build the NuGet package. The build would fail with an error:</p>

<pre><code>Error: Project targets '.NETStandard,Version=v1.4'. It cannot be
referenced by a project that targets 'NuGet,Version=v1.0'
</code></pre>

<p>Updating to a more recent NuGet.Build.Packaging NuGet
package, such as version 0.1.276, fixes this problem.</p>

<p><strong>NuGet Package project treated as .NET Core project</strong></p>

<p>NuGet package projects (.nuproj) that use the NuGet.Build.Packaging
0.1.276 NuGet package define a TargetFramework property in an
imported MSBuild .props file. This was causing the project to
be treated as a .NET Core project by Visual Studio for Mac. This caused
the Dependencies folder to be displayed and the References folder
to be removed. Visual Studio for Mac now checks the project has the
Sdk attribute instead of looking at the MSBuild properties defined
by the project when determining the project type.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.0]]></title>
    <link href="http://lastexitcode.com/blog/2017/06/04/NuGetSupportInVisualStudioMac7-0/"/>
    <updated>2017-06-04T12:00:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2017/06/04/NuGetSupportInVisualStudioMac7-0</id>
    <content type="html"><![CDATA[<h2>New Features</h2>

<ul>
<li> .NET Core support</li>
<li> NuGet 4.0 support</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.0</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes">release notes</a>.</p>

<h2>.NET Core Support</h2>

<p>.NET Core projects do not show a Packages folder in the Solution window. Instead the NuGet packages are displayed in a NuGet folder, which is inside a Dependencies folder.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-0/NetCoreProjectJsonNetPackageInSolutionWindow.png" title="&lsquo;Newtonsoft.Json NuGet package in Solution window &ndash; .NET Core project&rsquo; &lsquo;Newtonsoft.Json NuGet package in Solution window &ndash; .NET Core project&rsquo;" ></p>

<p>The version of the NuGet package is displayed directly in the Solution window. For other project types you need to right click the package to see the version.</p>

<p>If the NuGet package depends on other packages then these can be seen by clicking on the arrow to expand the dependencies.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-0/NetCoreProjectJsonNetPackageExpandedInSolutionWindow.png" title="&lsquo;Newtonsoft.Json NuGet package expanded in Solution window &ndash; .NET Core project&rsquo; &lsquo;Newtonsoft.Json NuGet package expanded in Solution window &ndash; .NET Core project&rsquo;" ></p>

<h3>Restoring Packages</h3>

<p>NuGet packages will be restored automatically on opening a .NET Core project. This can be disabled in preferences by unchecking <strong>Automatically restore packages when opening a solution</strong> in the NuGet &ndash; General section.</p>

<p>You can manually restore NuGet packages for .NET Core projects by:</p>

<ul>
<li>Right clicking the Dependencies folder and selecting Restore.</li>
<li>Right clicking the NuGet folder and selecting Restore.</li>
<li>Selecting Restore NuGet Packages from the Project menu.</li>
</ul>


<p>Selecting Restore NuGet Packages from the Project menu will restore packages for the project or the solution depending on what is currently selected in the Solution window.</p>

<p>Restoring NuGet packages for a .NET Core project works differently compared with a project that uses a packages.config file. The NuGet packages themselves will be downloaded into the NuGet package cache folder ~/.nuget/packages if they do not exist, as before, but the NuGet packages will not be copied into a packages directory inside the solution&rsquo;s directory. The project file will not contain have any Reference items added when a NuGet package is installed.</p>

<p>When a NuGet restore is run for a .NET Core project three files in the obj directory are created.</p>

<ul>
<li>project.assets.json</li>
<li>ProjectName.csproj.nuget.g.props</li>
<li>ProjectName.csproj.nuget.g.targets</li>
</ul>


<p>The project.assets.json file contains the dependencies for your project.</p>

<p>The nuget.g.props and nuget.g.targets files will contain any MSBuild imports that your NuGet package requires and they also define some properties, such as the path to the NuGet package cache on your machine.</p>

<p>These three files are used when building your project to resolve the assemblies to be referenced now that they are no longer explicitly stored in your project file.</p>

<h3>Updating Packages</h3>

<p>NuGet packages can be updated by:</p>

<ul>
<li>Right clicking the package inside the NuGet folder and selecting Update.</li>
<li>Right clicking the NuGet folder and selecting Update.</li>
<li>Right clicking the Dependencies folder and selecting Update.</li>
<li>Selecting Update NuGet Packages from the Project menu.</li>
</ul>


<p>Selecting Update NuGet Packages from the Project menu will update all packages in the project or in the solution depending on what is currently selected in the Solution window.</p>

<h3>Removing Multiple NuGet Packages in One Step</h3>

<p>You can remove multiple NuGet packages in one step from a .NET Core project by selecting the packages in the Solution window, right clicking and selecting Remove.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-0/NetCoreProjectRemoveMultipleNuGetPackagesInSolutionWindow.png" title="&lsquo;Removing multiple NuGet packages in Solution window &ndash; .NET Core project&rsquo; &lsquo;Removing multiple NuGet packages in Solution window &ndash; .NET Core project&rsquo;" ></p>

<p>Projects that use a packages.config file do not support removing multiple NuGet packages in one step.</p>

<h3>Installing NuGet Packages</h3>

<p>NuGet packages are installed by using the Add Packages dialog in the same way as with other project types. To open the Add Packages dialog for a .NET Core project:</p>

<ul>
<li>Right click the NuGet folder and select Add Packages&hellip;</li>
<li>Right click the Dependencies folder and select Add Packages&hellip;</li>
<li>Right click the project and select Add &ndash; Add NuGet Packages&hellip;</li>
<li>From the Project menu select Add NuGet Packages&hellip;</li>
</ul>


<p>When the first NuGet package is installed into a .NET Core project a packages.config file will not be created. Instead the NuGet package will be added as a <a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files">PackageReference</a> that is saved in the project file.</p>

<h3>Package Reference</h3>

<p>.NET Core projects do not use a packages.config file to record their NuGet dependencies. Instead the .NET Core project file will contain a <a href="https://docs.microsoft.com/en-us/nuget/consume-packages/package-references-in-project-files">PackageReference</a> after the NuGet package is installed into the project.</p>

<p>```
<Project Sdk="Microsoft.NET.Sdk"></p>

<p>  <PropertyGroup></p>

<pre><code>&lt;OutputType&gt;Exe&lt;/OutputType&gt;
&lt;TargetFramework&gt;netcoreapp1.1&lt;/TargetFramework&gt;
</code></pre>

<p>  </PropertyGroup></p>

<p>  <ItemGroup></p>

<pre><code>&lt;PackageReference Include="Newtonsoft.Json" Version="10.0.2" /&gt;
</code></pre>

<p>  </ItemGroup>
</Project>
```</p>

<p>Please note that Visual Studio for Mac currently only supports package references with the new SDK style projects which are used by .NET Core. If you use package references in other project types then the Solution window will not show the packages and a packages.config file will be created if you install a NuGet package.</p>

<h3>Updated Packages Available</h3>

<p>For other project types the Solution window will check for updated packages and show this information in the Packages folder. This is not currently supported with .NET Core projects.</p>

<h2>NuGet 4.0 Support</h2>

<p>Visual Studio for Mac now includes <a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.0-rtm">NuGet 4.0</a>.</p>

<p>More information on the new features provided by NuGet 4.&ndash; can be found in the <a href="http://blog.nuget.org/20170308/Announcing-NuGet-4.0-RTM.html">Announcing NuGet 4.0 RTM blog post</a> and the <a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.0-rtm">NuGet 4.0 release notes</a>.</p>
]]></content>
  </entry>
  
</feed>
