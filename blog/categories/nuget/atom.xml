<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nuget | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/nuget/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2019-01-04T13:45:28+00:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.7]]></title>
    <link href="http://lastexitcode.com/blog/2018/12/19/NuGetSupportInVisualStudioMac7-7/"/>
    <updated>2018-12-19T14:40:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2018/12/19/NuGetSupportInVisualStudioMac7-7</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 4.8 support</li>
<li> Support PackageReferences without a Version</li>
<li> Fixed NuGet sdk resolver not being found in Mono 5.16</li>
<li> Fixed null reference exception in package compatiblity check</li>
<li> Fixed Update menu enabled when project has no PackageReferences</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.7</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#whats-new-in-77">release notes</a>.</p>

<h2>NuGet 4.8 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.8-rtm">NuGet 4.8.0.5385</a> is now
included with Visual Studio for Mac 7.7.2.</p>

<h2>Support PackageReferences without a Version</h2>

<p>Visual Studio for Mac did not support projects that used PackageReferences without
specifying a version.</p>

<pre><code>&lt;ItemGroup&gt;
    &lt;PackageReference Include="Newtonsoft.Json" /&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>The version may be defined elsewhere in another MSBuild file, such as the Directory.props file,
or by the .NET Core SDK, as with the
Microsoft.AspNetCore.App PackageReference in ASP.NET Core projects. By default a
PackageReference without a version will restore the lowest available version for
the NuGet package.</p>

<p>However in Visual Studio for Mac there were several problems with PackageReferences that
did not specify a version.</p>

<p>Opening a project with a PackageReference without a Version
would result in an ArgumentNullException being logged and the
Add Packages dialog could not be opened.</p>

<p>If the PackageReference, in a non-SDK project, had no Version
then it was not displayed in the Packages folder and a null reference
exception was logged. The Solution window would try to find
the package to check if it was installed which is not possible
with a missing version and NuGet&rsquo;s VersionFolderPathResolver
would throw a null reference exception.</p>

<p>If a PackageReference had no Version then a null reference exception
was logged when checking for updates. A null version is now handled.</p>

<p>Right clicking the package in the Packages folder would log a
null reference exception if a non-SDK style project was used and it
had a PackageReference without a version. This is now handled and the
menu label will show &ldquo;Version None&rdquo;.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed NuGet sdk resolver not being found in Mono 5.16</strong></p>

<p>More recent versions of MSBuild, such as MSBuild 16.0.40 which is included
with Mono 5.16.0.173, allow the sdk resolver to use a manifest.xml file to
define the assembly where the resolver can be found:</p>

<pre><code>&lt;SdkResolver&gt;
  &lt;Path&gt;..\..\Microsoft.Build.NuGetSdkResolver.dll&lt;/Path&gt;
&lt;/SdkResolver&gt;
</code></pre>

<p>This manifest file not supported and resulted in the NuGet sdk resolver not
being loaded. Any projects that use an MSBuild sdk from a NuGet
package no longer worked and would result in an &lsquo;Invalid configuration
mapping&rsquo; error shown in the Solution window. The sdk resolution in
Visual Studio for Mac has now
been updated based on the latest MSBuild source code.</p>

<p><strong>Fixed null reference exception in compatiblity check</strong></p>

<p>Changing the target framework of a project that uses a packages.config
file will result in a package compatiblity check being run.
If the project had both a PackageReference and a packages.config file
the package compatiblity check would fail with a null
reference exception. Visual Studio for Mac was treating the project as
though it was using a packages.config file, when it should have been
treated as a PackageReference project. This resulted in a null
reference exception being thrown when checking for package compatiblity.</p>

<p><strong>Fixed Update menu enabled when project has no PackageReferences</strong></p>

<p>The Update menu was enabled if the project used PackageReferences but
had none in the project. Without any PackageReferences in the
project there is no packages to update. The check to determine if the Update
menu should be enabled has been changed to make sure the project has
PackageReferences in the project file, not just imported
PackageReferences. The Update
NuGet Packages menu, which is used to update packages for the solution,
has also been changed to have the same behaviour.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.6]]></title>
    <link href="http://lastexitcode.com/blog/2018/09/01/NuGetSupportInVisualStudioMac7-6/"/>
    <updated>2018-09-01T14:20:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2018/09/01/NuGetSupportInVisualStudioMac7-6</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Support no-op package restore on opening a solution</li>
<li> Added basic support for the NuGet SDK resolver</li>
<li> Fixed source code transformations not available in code completion</li>
<li> Fixed incorrect FSharp.Core NuGet package being restored</li>
<li> Fixed updating PackageReference removing metadata</li>
<li> Fixed build error after updating Xamarin.Forms PackageReference</li>
<li> Fixed build error after updating Xamarin.Forms NuGet package</li>
<li> Fixed editor errors when .NET Standard assembly referenced in Xamarin.iOS project</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.6</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#whats-new-in-76">release notes</a>.</p>

<h2>Support no-op package restore on opening a solution</h2>

<p>On opening a solution a NuGet package restore was always run for projects that use
PackageReferences. This resulted in the project.assets.json file being
re-generated and the projects being re-evaluated. Now if the package
references have not changed a no-op restore will occur. This makes the
restore faster on opening a solution. It also prevents Visual Studio for Mac
going online to fetch NuGet package information if a wildcard is used for
a PackageReference or if the package version cannot be found. In the Package
Console when a no-op restore occurs you will see the following
messages:</p>

<pre><code>Assets file has not changed. Skipping assets file writing.
No-Op restore. The cache will not be updated.
</code></pre>

<h2>Allow NuGet SDK resolver to find NuGet SDK packages</h2>

<p>Visual Studio for Mac now has basic support for the
<a href="https://github.com/Microsoft/msbuild/issues/2803">NuGet SDK resolver</a>. The NuGet
SDK resolver will download and install SDKs for SDK style
projects if these SDKs are missing.</p>

<pre><code>&lt;Project Sdk="My.Custom.Sdk/2.3.4"&gt;
  ...
&lt;/Project&gt;
</code></pre>

<p>The SDK resolution is done in the background
when the project is opened and there is currently no visual indication that
this is happening.</p>

<p>The NuGet library assemblies are not available to the remote MSBuild host used by
Visual Studio for Mac so the NuGet SDK resolver was previously failing to load. The NuGet SDK
resolver supports a MSBUILD_NUGET_PATH environment variable which is now set by
Visual Studio for Mac to point to the directory containing the NuGet assemblies
that are included with the IDE.</p>

<h2>Bug Fixes</h2>

<p><strong>Source code transformations not available in code completion</strong></p>

<p>Visual Studio for Mac now ensures that files generated by a NuGet
package are available for code completion. One example
NuGet package that generates files is the
<a href="https://www.nuget.org/packages/LibLog/">LibLog NuGet package</a>.</p>

<p>The LibLog NuGet package has contentFiles that are processed by
MSBuild and converted into .cs files. These .cs files are implicitly included
in the project. These files are generated in the obj folder. For example:</p>

<pre><code>obj/Debug/netstandard2.0/NuGet/SomeID/LibLog/5.0.0/ILog.cs
</code></pre>

<p>The types defined inside these generated files can be referenced by
code in the project. Whilst the project would compile without any errors
the text editor would show errors about the
types from the generated files being undefined.</p>

<p>These generated files are not created or returned by running the
CoreCompileDependsOn MSBuild target, which is currently used to find generated
files. Now when the CoreCompileDependsOn target is evaluated, Visual Studio for
Mac will also run NuGet specific
MSBuild targets to ensure any NuGet package files are generated and
made available for code completion.</p>

<p><strong>Fixed incorrect FSharp.Core NuGet package restored</strong></p>

<p>Installing the FSharp.Core
4.5.0 NuGet package into a F# .NET Core console project would result in
version 4.3.4 of the FSharp.Core NuGet
package being used and displayed in the Dependencies folder. FSharp.Core 4.3.4 is
the NuGet package implicitly added by the F# .NET Core SDK. This was being used by
the project instead of the PackageReference defined in the project.
PackageReferences in the project will now override any implicitly
added NuGet packages. This matches the behaviour of dotnet restore when
run from the command line.</p>

<p><strong>Fixed updating PackageReference removing metadata</strong></p>

<p>On updating a NuGet PackageReference the old PackageReference was
removed from the project file and then a new PackageReference was added.
This resulted in custom MSBuild properties associated with the
PackageReference being removed from the project file.</p>

<pre><code>&lt;PackageReference Include="NuGet.Versioning" Version="3.6.0"&gt;
  &lt;PrivateAssets&gt;all&lt;/PrivateAssets&gt;
&lt;/PackageReference&gt;  
</code></pre>

<p>Now on updating a NuGet package the version of the existing PackageReference element
is updated so any custom MSBuild properties are not removed.</p>

<p><strong>Fixed build error after updating Xamarin.Forms PackageReference</strong></p>

<p>A build error could occur after updating projects that had
a Xamarin.Forms PackageReference. One way to reproduce this was to
have a .NET Standard project that used an old Xamarin.Forms
version as a PackageReference, and another non .NET Core project,
that references the .NET Standard project, which used a newer
Xamarin.Forms NuGet package. On building an
error would be displayed:</p>

<pre><code>Error XF002: Xamarin.Forms tasks do not match targets
</code></pre>

<p>On updating the .NET Standard project to use the same Xamarin.Forms
NuGet package version the build error would still occur until the solution
was closed and re-opened. Now the remote MSBuild host is shutdown
to ensure the correct Xamarin.Forms MSBuild targets and assemblies
are used after the NuGet package is updated.</p>

<p><strong>Fixed build error after updating Xamarin.Forms NuGet package</strong></p>

<p>On updating the Xamarin.Forms NuGet package in a solution
the build would sometimes fail with errors similar to:</p>

<pre><code>Could not load file or assembly 'Xamarin.Forms.Xaml,
Version=2.0.0.0, Culture=neutral, PublicKeyToken=null' or one of
its dependencies.

Error XF002: Xamarin.Forms tasks do not match targets. Please
ensure that all projects reference the same version of
Xamarin.Forms, and if the error persists, please restart the IDE.
</code></pre>

<p>The problem was that the old MSBuild tasks and targets from the originally used
Xamarin.Forms NuGet package were
still being used. Now when an MSBuild import has changed in a project
the remote MSBuild host is shutdown to ensure the correct MSBuild tasks are
used.</p>

<p><strong>Fixed editor errors when .NET Standard assembly referenced in Xamarin.iOS project</strong></p>

<p>When a Xamarin.iOS project used an assembly that was compiled
for .NET Standard, such as the assembly in the
System.Collections.Immutable NuGet package, the netstandard assembly
was not made available for code completion. This then resulted in the text editor
showing errors even though the project could be compiled succesfully.
The errors displayed were similar to:</p>

<pre><code>  The type 'ValueType' is defined in an assembly that is not
  referenced. You must add a reference to assembly 'netstandard,
  Version=2.0.0.0, Culture=neutral, PublicKeytoken=cc7b1dffcd2ddd51'.
</code></pre>

<p>Now a check is made to determine
if an assembly is referencing netstandard and if so the facade assemblies,
which for Xamarin.iOS will include the netstandard.dll, are made available
for code completion. Previously only a check was made for the project having
an assembly referencing System.Runtime before including the facade assemblies.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.5]]></title>
    <link href="http://lastexitcode.com/blog/2018/05/19/NuGetSupportInVisualStudioMac7-5/"/>
    <updated>2018-05-19T15:30:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2018/05/19/NuGetSupportInVisualStudioMac7-5</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Support installing NuGet packages with item templates</li>
<li> Fixed generated NuGet package files not available for code completion</li>
<li> Fixed incorrect Android target framework used when the project has Package References</li>
<li> Fixed build errors after creating a new Android project with NuGet packages</li>
<li> Missing package dependencies in Solution window</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.5</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#-visual-studio-2017-for-mac-version-75-release-notes">release notes</a>.</p>

<h2>Support installing NuGet packages with item templates</h2>

<p>Initial support for creating new files from item templates that use
the .NET Core templating engine has been added. This is currently used
by the Azure Functions support in Visual Studio for Mac when a new Azure
Function is added to the project. Currently the New File dialog does not
have support for showing these templates but there is an API that can
be used by extensions to create files from these templates.</p>

<p>The item templates can define post actions that indicate that a NuGet
package is needed. These post actions are read and the NuGet
package will be installed into the project by Visual Studio for Mac.</p>

<pre><code>"postActions": [
  {
    "Description": "Adding Reference to Microsoft.Azure.WebJobs.Extensions.DocumentDB Nuget package",
    "ActionId": "B17581D1-C5C9-4489-8F0A-004BE667B814",
    "ContinueOnError": "true",
    "ManualInstructions": [],
    "args": {
      "referenceType": "package",
      "reference": "Microsoft.Azure.WebJobs.Extensions.DocumentDB",
      "version": "1.2.0",
      "projectFileExtensions": ".csproj"
    }
  }
</code></pre>

<h2>Bug Fixes</h2>

<p><strong>Generated NuGet package files not available for code completion</strong></p>

<p>On installing a NuGet package such as Refit, which extends the
CoreCompileDependsOn to generate a C# file, the generated file would
not be available for code completion until the solution was closed
and re-opened again.</p>

<p>Below is a section of the refit.targets file used by the Refit NuGet package.</p>

<pre><code>&lt;PropertyGroup&gt;
  &lt;CoreCompileDependsOn&gt;
    $(CoreCompileDependsOn);
    GenerateRefitStubs;
  &lt;/CoreCompileDependsOn&gt;
&lt;/PropertyGroup&gt;

&lt;Target Name="GenerateRefitStubs" BeforeTargets="CoreCompile"&gt;

  &lt;Error Condition="'$(MSBuildRuntimeType)' == 'Core' and '$(RefitMinCoreVersionRequired)' &gt; '$(RefitNetCoreAppVersion)' "
       Text="Refit requires at least the .NET Core SDK v2.0 to run with 'dotnet build'"
       ContinueOnError="false"
       /&gt;

  &lt;GenerateStubsTask SourceFiles="@(Compile)" BaseDirectory="$(MSBuildProjectDirectory)"   OutputFile="$(IntermediateOutputPath)\RefitStubs.g.cs" /&gt;

  &lt;Message Text="Processed Refit Stubs" /&gt;      

  &lt;ItemGroup Condition="Exists('$(IntermediateOutputPath)\RefitStubs.g.cs')"&gt;
    &lt;Compile Include="$(IntermediateOutputPath)\RefitStubs.g.cs" /&gt;
  &lt;/ItemGroup&gt;    
&lt;/Target&gt;
</code></pre>

<p>The CoreCompileDependsOn property is re-defined so the GenerateRefitsStubs MSBuild
target will be run. This creates a new RefitStubs.g.cs file which is included in the
project by the Compile MSBuild item.</p>

<p>The problem was that the result of running the
targets that are defined by the CoreCompileDependsOn property are cached by Visual
Studio for Mac.
When Refit is installed the cached result was still being returned so the
generated C# file was not available for code completion. To fix this the
project is now re-evaluated before getting the CoreCompileDependsOn property
if an MSBuild import has been added or removed. Note that projects that use
Package References were unaffected. Only projects that use a packages.config
file were affected.</p>

<p><strong>Incorrect Android target framework used when the project has Package References</strong></p>

<p>Configuring an Android project so it uses the latest Android framework
could result in the wrong target framework being used when building if the
project used Package References. This would result in a build error
similar to:</p>

<pre><code>Error: Your project is not referencing the "MonoAndroid,Version=v7.1" framework. 
Add a reference to "MonoAndroid,Version=v7.1" in the "frameworks" section of your 
project.json, and then re-run NuGet restore
</code></pre>

<p>The problem was that the wrong target framework was being used in the
project.assets.json. Running a NuGet restore was
a workaround for the problem.</p>

<p>Now when the target framework version in project options is changed, and
the project uses Package References, a NuGet restore is run after the
project file is saved. This ensures the Package References work with
the new target framework. This also re-generates the project.assets.json file
so the build will use the correct references.</p>

<p>Another problem here was that configuring the Android to use the latest
target framework would not result in the target framework being changed
in the project model stored in memory.
This could also result in the project.assets.json file being out of
sync with the Android project&rsquo;s target framework.</p>

<p><strong>Build errors after creating a new Android project with NuGet packages</strong></p>

<p>Creating a new Android project that installed NuGet packages as it was created
would sometimes result in build errors that could be fixed by closing and
re-opening the solution. An example build error is shown below.</p>

<pre><code>Resources/values/styles.xml : error APT0000: 1: error: Error retrieving parent for item: No resource found that matches the given name 'Theme.AppCompat.Light.DarkActionBar'.
Resources/values/styles.xml : error APT0000: 2: error: Error: No resource found that matches the given   name: attr 'colorAccent'.
Resources/values/styles.xml : error APT0000: 1: error: Error: No resource found that matches the given name: attr 'colorPrimary'.
Resources/values/styles.xml : error APT0000: 1: error: Error: No resource found that matches the given name: attr 'colorPrimaryDark'.
Resources/values/styles.xml : error APT0000: 1: error: Error: No resource found that matches the given name: attr 'windowActionBar'.
Resources/values/styles.xml : error APT0000: 3: error: Error: No resource found that matches the given name: attr 'windowActionModeOverlay'.
Resources/values/styles.xml : error APT0000: 1: error: Error: No resource found that matches the given name: attr 'windowNoTitle'.
Resources/values/styles.xml : error APT0000: 3: error: Error retrieving parent for item: No resource found that matches the given name 'Theme.AppCompat.Light.Dialog'.
Resources/values/styles.xml : error APT0000: 3: error: Error: No resource found that matches the given name: attr 'colorAccent'.
</code></pre>

<p>The build errors varied but in each case the error was caused by a
missing reference to an assembly from one of the Android Support NuGet packages installed
when the project was created. The project file created would have
the correct reference information but Visual Studio for Mac was
building an old version of the project.</p>

<p>If the project was modified in memory when a build is requested this
results in the unsaved project xml being given to the remote MSBuild
host. In some cases this project xml was not being cleared and would
result in an out of date project xml being used when building. This
could occur if the MSBuild host did not have any projects
loaded at the time when an attempt was made to unload the project from
the host. Now the unsaved project xml is removed in all cases when the
project is unloaded from the MSBuild host.</p>

<p><strong>Missing package dependencies in Solution window</strong></p>

<p>After creating a new ASP.NET Core project sometimes the package dependencies
shown in the Solution window under the SDK folder and the NuGet folder
could not be expanded to view the child dependencies.</p>

<p>The problem was that if the call to get the package dependencies
using MSBuild was cancelled this would result an empty list of depenencies
being cached. Since no package dependencies were returned the Solution window
would fallback to showing the package dependencies that were listed in the
project and a default top level SDK package dependency.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.4]]></title>
    <link href="http://lastexitcode.com/blog/2018/03/10/NuGetSupportInVisualStudioMac7-4/"/>
    <updated>2018-03-10T12:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2018/03/10/NuGetSupportInVisualStudioMac7-4</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Support NuGet RestoreProjectStyle MSBuild Property</li>
<li> .NET Core xUnit tests not displayed if NuGet packages not cached</li>
<li> No tests displayed when project uses a NUnit PackageReference</li>
<li> NuGet MSBuild imports not removed when migrating to project.json</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.4</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#15.6">release notes</a>.</p>

<h2>Support RestoreProjectStyle MSBuild property</h2>

<p>If a project sets the RestoreProjectStyle property to be
PackageReference then the project will be restored as though it has
PackageReferences even if it does not have any.</p>

<pre><code>&lt;RestoreProjectStyle&gt;PackageReference&lt;/RestoreProjectStyle&gt;
</code></pre>

<p>This fixes runtime problems when a project references a .NET Standard
project that has PackageReferences. Without the RestoreProjectStyle set
the assemblies from the NuGet packages are not copied to the output
directory and would have to be added to the main project.</p>

<h2>Bug Fixes</h2>

<p><strong>.NET Core xUnit tests not displayed if NuGet packages are not in local NuGet cache</strong></p>

<p>If the NuGet packages that contain the VS Test adapters were not available in
the local machine&rsquo;s NuGet package cache then
the Unit Tests window would not show any tests after the NuGet
packages were restored and the project was compiled.</p>

<p>Visual Studio for Mac would not initially find any test adapter dlls
and would not attempt to discover any tests for the project after the
NuGet packages were downloaded into the NuGet package cache.</p>

<p>Now after the NuGet package restore has completed the check for a
VS Test adapter is now re-run.</p>

<p><strong>No tests displayed when a project uses a NUnit PackageReference</strong></p>

<p>The Unit Tests window would not show any unit tests when a non .NET
Core project contained a NUnit PackageReference. Visual Studio for
Mac was looking for a PackageReference that contained &lsquo;nunit.framework&rsquo;
and was not finding the NUnit NuGet package reference.</p>

<p><strong>NuGet MSBuild imports not removed when migrating to project.json</strong></p>

<p>When a Portable Class Library project was migrated to use a project.json
file the MSBuild imports added by NuGet were not removed. These imports
are added by NuGet into the generated ProjectName.nuget.props and
ProjectName.nuget.targets files on restoring a project.json file.
Leaving the import in the project file would result in the import
being used twice. When a PCL project that used Xamarin.Forms was
migrated to project.json the project would fail to compile with the
error:</p>

<pre><code>Error XF001: Xamarin.Forms targets have been imported multiple times.
Please check your project file and remove the duplicate import(s).
</code></pre>

<p>Now on migrating to project.json the MSBuild imports added by NuGet packages
to the project are removed.</p>

<p><strong>Fix unhandled exception when searching for packages</strong></p>

<p>An unhandled exception was being logged if a package source returned
an error or the package source url was invalid. This was because a
task was not being observed when the package sources were being used.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.3]]></title>
    <link href="http://lastexitcode.com/blog/2017/12/10/NuGetSupportInVisualStudioMac7-3/"/>
    <updated>2017-12-10T11:00:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2017/12/10/NuGetSupportInVisualStudioMac7-3</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Support installing System.ValueTuple NuGet Package from Quick Fixes</li>
<li> NuGetizer 3000 &ndash; Update NuGet.Build.Packaging to version 0.2</li>
<li> Support NuGet Restore MSBuild Properties

<ul>
<li>RestoreAdditionalProjectFallbackFolders</li>
<li>RestoreAdditionalProjectSources</li>
<li>RestoreFallbackFolders</li>
<li>RestorePackagesPath</li>
<li>RestoreSources</li>
</ul>
</li>
<li> Fixed transitive dependencies not available when using project.json</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.3</a> can be found in the <a href="https://www.visualstudio.com/en-us/news/releasenotes/vs2017-mac-relnotes#release-date-december-4-2017---visual-studio-2017-version-73-730797">release notes</a>.</p>

<h2>Quick Fix &ndash; Install System.ValueTuple NuGet Package</h2>

<p><a href="https://blogs.msdn.microsoft.com/dotnet/2016/08/24/whats-new-in-csharp-7-0/">C# 7.0 introduced tuple types</a>
that may require the System.ValueTuple NuGet package
to be added to the project. Visual Studio for Mac
now offers to install the System.ValueTuple NuGet package if the project requires this NuGet package.</p>

<p>Creating a .NET Framework 4.6 project with the following code:</p>

<p>```</p>

<pre><code>public (string, int) GetValues(string id)
{
    return ("Name", 25);
}
</code></pre>

<p>```</p>

<p>You will see error markers in the text editor. If you hover over
one of these error markers you will see a
<strong>Predefined type &lsquo;System.ValueTuple`2&rsquo; is not defined or imported</strong> message.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-3/ValueTupleTextEditorErrorTooltip.png" title="&lsquo;ValueTuple type not defined text editor error tooltip&rsquo; &lsquo;ValueTuple type not defined text editor error tooltip&rsquo;" ></p>

<p>If you right click the error marker there is now a new
<strong>Install Package &lsquo;System.ValueTuple&rsquo;</strong> Quick Fix action available.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-3/TextEditorInstallSystemValueTuplePackageQuickFix.png" title="&lsquo;Text editor Install System.ValueTuple Package quick fix menu item&rsquo; &lsquo;Text editor Install System.ValueTuple Package quick fix menu item&rsquo;" ></p>

<p>From this menu you can install the latest System.ValueTuple NuGet package
or open the Add Packages dialog to search for a specific version of the System.ValueTuple NuGet
package.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-3/TextEditorInstallLatestSystemValueTupleQuickFix.png" title="&lsquo;Text editor install latest System.ValueTuple package quick fix menu item&rsquo; &lsquo;Text editor install latest System.ValueTuple package quick fix menu item&rsquo;" ></p>

<p>Note that if the project is targeting .NET Framework 4.7 or .NET Standard 2.0 then the
System.ValueTuple NuGet package is not required.</p>

<p>Also note that the official nuget.org package source needs to be available
for this feature to work.</p>

<h2>NuGetizer 3000 &ndash; Updated NuGet.Build.Packaging to version 0.2</h2>

<p>The version of the NuGet.Build.Packaging NuGet package used by default for NuGetizer 3000 support
has been updated from 0.1.276 to 0.2.0. This fixes a
potential build error when building with Mono 5.6.</p>

<p><code>
Using "ReportAssetsLogMessages" task from assembly "/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/../tools/net46/Microsoft.NET.Build.Tasks.dll".
Task "ReportAssetsLogMessages"
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: The "ReportAssetsLogMessages" task failed unexpectedly. [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: System.TypeLoadException: Could not resolve type with token 0100005b (from typeref, class/assembly NuGet.ProjectModel.IAssetsLogMessage, NuGet.ProjectModel, Version=4.3.0.5, Culture=neutral, PublicKeyToken=31bf3856ad364e35) [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: at Microsoft.NET.Build.Tasks.TaskBase.Execute () [0x00000] in &lt;01420900fd004c128de2d2ee31bad624&gt;:0 [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: at Microsoft.Build.BackEnd.TaskExecutionHost.Microsoft.Build.BackEnd.ITaskExecutionHost.Execute () [0x00023] in &lt;765502eb2f884ce79731edeb4b0517fb&gt;:0 [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
/usr/local/share/dotnet/sdk/2.0.0/Sdks/Microsoft.NET.Sdk/build/Microsoft.PackageDependencyResolution.targets(323,5): error MSB4018: at Microsoft.Build.BackEnd.TaskBuilder+d__26.MoveNext () [0x0022d] in &lt;765502eb2f884ce79731edeb4b0517fb&gt;:0 [RefactoringEssentials/RefactoringEssentials.2017/RefactoringEssentials.csproj]
</code></p>

<p>The ReadLegacyDependencies target from NuGet.Build.Packaging.Tasks is called when PackOnBuild
is set to true.</p>

<p>The NuGet.Build.Packaging.Tasks assembly was loading an embedded NuGet.ProjectModel
assembly that conflicts with the version that is used by Microsoft.NET.Build.Tasks.</p>

<h2>Support RestoreAdditionalProjectFallbackFolders MSBuild Property</h2>

<p>The RestoreAdditionalProjectFallbackFolders MSBuild property is
read and appended to the list of fallback folders stored in the
project.assets.json file. The .NET Core 2.0 SDK will set this
MSBuild property to point to the NuGet package fallback folder
that is installed with the SDK. This will be used
to resolve NuGet packages first before downloading them to the
~/.nuget/packages folder.</p>

<h2>Support RestoreAdditionalProjectSources MSBuild Property</h2>

<p>The RestoreAdditionalProjectSources MSBuild property can be used
to add additional package sources to the existing list of sources
used to resolve packages.</p>

<h2>Support RestoreFallbackFolders MSBuild Property</h2>

<p>The RestoreFallbackFolders MSBuild property can be used by project that uses
PackageReferences to define a set of package fallback folders that
will override any specified in the NuGet.Config file. It can also
be used to clear any pre-defined fallback folders by specifying
&lsquo;clear&rsquo; as its value. Note that this value does not affect any
folders defined by RestoreAdditionalProjectFallbackFolders which
will be appended even if RestoreFallbackFolders is set to &lsquo;clear&rsquo;.</p>

<h2>Support RestorePackagesPath MSBuild Property</h2>

<p>The RestorePackagesPath MSBuild property can be used to override the global packages
folder location when a project uses a PackageReference.</p>

<h2>Support RestoreSources MSBuild property</h2>

<p>The RestoreSources MSBuild property can be used to override
the sources defined by any NuGet.Config file. Any sources defined in the
RestoreAdditionalProjectSources MSBuild property will still be appended to the
list of sources if RestoreSources is defined.</p>

<h2>Bug Fixes</h2>

<p><strong>Transitive dependencies not available when using project.json</strong></p>

<p>With two projects A and B that both use project.json files, project B
referencing project A, the NuGet package dependencies used by project
A were not available to project B transitively. This was because the
project reference information was not being used
when a restore occurred. This caused the assemblies from the transitively
referenced NuGet packages to not be added to the
project.lock.json file for Project B.</p>

<p><strong>Unable to debug a new Azure Functions project without re-opening project</strong></p>

<p>After creating a new Azure Functions project it was possible to build the
project but not to debug it or run it. On closing and re-opening the solution
it would be possible to debug and run the Azure Functions project.</p>

<p>When Visual Studio for Mac created a new Azure Functions project
it initially determined that it could not run or debug the project.
After the Azure Functions project has its PackageReferences restored
it gains an AzureFunctions project capability. This capability is used to
determine if the project can be run. This change in the capability
was not handled by Visual Studio for Mac so it did not allow the
project to be run until the project was closed and re-opened.</p>

<p>Now, after the NuGet package restore is finished, the project is
re-evaluated and a check is made to see if the project can now be run.</p>

<p><strong>Fix generated NuGet files being imported twice</strong></p>

<p>The generated ProjectName.nuget.g.targets and ProjectName.nuget.g.props
that are created for .NET Core projects in the base intermediate
directory were being imported twice when evaluating the project.
Once by Microsoft.Common.props, provided with Mono, and once
by Visual Studio for Mac.</p>

<p>This duplicate import was resulting in a duplicate file being added
to the project held in memory by Visual Studio for Mac when the
Xamarin.Forms 2.4 NuGet package was used in a .NET Standard
project and no .NET Core SDK is installed. This would result in the
content page xaml and associated C# file not being nested in the
solution window.</p>
]]></content>
  </entry>
  
</feed>
