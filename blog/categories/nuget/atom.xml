<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: nuget | Matt Ward]]></title>
  <link href="http://lastexitcode.com/blog/categories/nuget/atom.xml" rel="self"/>
  <link href="http://lastexitcode.com/"/>
  <updated>2019-06-22T13:28:52+01:00</updated>
  <id>http://lastexitcode.com/</id>
  <author>
    <name><![CDATA[Matt Ward]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.1]]></title>
    <link href="http://lastexitcode.com/blog/2019/06/22/NuGetSupportInVisualStudioMac8-1/"/>
    <updated>2019-06-22T12:40:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2019/06/22/NuGetSupportInVisualStudioMac8-1</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 5.0 support</li>
<li> Fixed PackageReference metadata not added for development dependencies</li>
<li> Fixed DotNetCliToolReferences not being restored</li>
<li> Fixed Multiplatform Library build error with Android projects</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.1</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>NuGet 5.0 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-5.0-rtm">NuGet 5.0.2.5988</a> is now
included with Visual Studio for Mac 8.1.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed PackageReference metadata not added for development dependencies</strong></p>

<p>Installing a NuGet package that is a development dependency, such as
GitInfo, would not add the PrivateAssets nor the IncludeAssets
metadata to the PackageReference. This is now supported and mirrors the
behaviour of &lsquo;dotnet add package&rsquo; and Visual Studio on Windows.</p>

<p><strong>Fixed DotNetCliToolReferences not being restored</strong></p>

<p>DotNetCliToolReferences are available in the package dependency graph
but are treated as separate projects in this graph. Since these did not map
to an existing project in the solution they were not added to the full dependency
graph which resulted in these tools not being restored.</p>

<p>DotNetCliToolReferences are only restored when the entire solution is restored.
Restoring a single project only restores the project itself not
the dotnet cli tool project referenced by the project.</p>

<p>MSBuild supports restoring DotNetCliToolReferences in any project type that
uses PackageReferences so Visual Studio for Mac also supports this.</p>

<p><strong>Fixed Multiplatform Library build error with Android projects</strong></p>

<p>When generating a Portable Class Library (PCL) assembly from the intersection of project
assemblies the ApiIntersect build task would throw an exception since
it could not resolve the Mono.Android assembly. This problem has been
fixed in a more recent NuGet.Build.Packaging where the failure to
resolve has been converted to a warning.</p>

<p>```
System.Exception: Could not resolve Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=84e04ff9cfb79065</p>

<pre><code>at ApiIntersect.FrameworkAssemblyResolver.Resolve (Mono.Cecil.AssemblyNameReference name, Mono.Cecil.ReaderParameters parameters) [0x0001b] in &lt;aac3e0d5bcd4473a96e385115da49b96&gt;:0
at ApiIntersect.FrameworkAssemblyResolver.Resolve (Mono.Cecil.AssemblyNameReference name) [0x00000] in &lt;aac3e0d5bcd4473a96e385115da49b96&gt;:0
at ICSharpCode.Decompiler.Ast.Transforms.IntroduceUsingDeclarations.Run (ICSharpCode.NRefactory.CSharp.AstNode compilationUnit) [0x00142] in &lt;37b5ad8a7a94479fbc5b574a8fc6281a&gt;:0
at ICSharpCode.Decompiler.Ast.Transforms.TransformationPipeline.RunTransformationsUntil (ICSharpCode.NRefactory.CSharp.AstNode node, System.Predicate`1[T] abortCondition, ICSharpCode.Decompiler.DecompilerContext context) [0x0002c] in &lt;37b5ad8a7a94479fbc5b574a8fc6281a&gt;:0
at ICSharpCode.Decompiler.Ast.AstBuilder.RunTransformations (System.Predicate`1[T] transformAbortCondition) [0x00000] in &lt;37b5ad8a7a94479fbc5b574a8fc6281a&gt;:0
at ICSharpCode.Decompiler.Ast.AstBuilder.RunTransformations () [0x00000] in &lt;37b5ad8a7a94479fbc5b574a8fc6281a&gt;:0
at ApiIntersect.MainClass.DumpTypes (System.Collections.Generic.List`1[T] types, System.String baseDir) [0x000a7] in &lt;aac3e0d5bcd4473a96e385115da49b96&gt;:0
at ApiIntersect.MainClass.Process (System.Collections.Generic.List`1[T] intersections, System.Collections.Generic.List`1[T] exclusions, Mono.Cecil.ReaderParameters readerParameters, System.String outputPath) [0x00319] in &lt;aac3e0d5bcd4473a96e385115da49b96&gt;:0
at ApiIntersect.MainClass.Main (System.String[] args) [0x0039f] in &lt;aac3e0d5bcd4473a96e385115da49b96&gt;:0
</code></pre>

<p>```</p>

<p>An updated NuGet.Build.Packaging has not been published to nuget.org
so only new projects created with Visual Studio for Mac will get the
NuGet package containing the fix.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet PowerShell Core Console in Visual Studio for Mac 8.0]]></title>
    <link href="http://lastexitcode.com/blog/2019/05/05/NuGetPowerShellCoreConsoleVisualStudioForMac8-0/"/>
    <updated>2019-05-05T12:40:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2019/05/05/NuGetPowerShellCoreConsoleVisualStudioForMac8-0</id>
    <content type="html"><![CDATA[<p>The <a href="https://github.com/mrward/monodevelop-nuget-extensions">NuGet extensions addin</a> now includes a PowerShell
Core based NuGet Package Manager console for Visual Studio for Mac 8.0.</p>

<p><img src="/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/NuGetPackageManagerConsoleWindow.png" title="&lsquo;NuGet Package Manager Console&rsquo; &lsquo;NuGet Package Manager Console window&rsquo;" ></p>

<p>A <a href="https://lastexitcode.com/blog/2014/06/22/NuGetPowerShellConsoleForXamarinStudio/">NuGet PowerShell console</a> has been available with
the <a href="https://github.com/mrward/monodevelop-nuget-extensions">NuGet extensions addin</a> since
Xamarin Studio 5.0. Previously it used <a href="https://github.com/Pash-Project/Pash">Pash</a>, a cross-platform, open source reimplementation
of PowerShell. Pash is no longer being actively developer on after Microsoft released <a href="https://github.com/PowerShell/PowerShell">PowerShell Core</a>.
The PowerShell support in Pash was incomplete, so whilst the NuGet commands, such as Install-Package, were supported, more
complicated commands, such as those provided by <a href="https://docs.microsoft.com/en-us/ef/core/">Entity Framework Core</a>, were not supported.
Moving to PowerShell Core provides full PowerShell support, and with a partial implementation of the Visual Studio EnvDTE API,
<a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/powershell">Entity Framework Core commands</a> are now supported.</p>

<p>The NuGet extensions addin runs a .NET Core console
application that hosts PowerShell Core. Communication between
the addin running in Visual Studio for Mac and the console application is through the
<a href="https://github.com/Microsoft/vs-streamjsonrpc">StreamJsonRpc</a> library.</p>

<h2>New Features</h2>

<p>The following lists the new features compared with the Pash based PowerShell console.</p>

<ul>
<li>PowerShell Core based NuGet Package Manager Console

<ul>
<li>Full PowerShell support</li>
<li>Get-Help now supported</li>
</ul>
</li>
<li>Support for Entity Framework Core NuGet commands</li>
<li>Tab completion</li>
<li>Support for stopping the executing command</li>
<li>Opening the NuGet package source configuration page from the console</li>
</ul>


<h2>Limitations</h2>

<ul>
<li><strong>Visual Studio EnvDTE API implementation is incomplete</strong></li>
</ul>


<p> The Visual Studio EnvDTE API is partially implemented. Whilst Entity Framework Core is
 supported other PowerShell scripts included with NuGet packages may not work.</p>

<ul>
<li><p><strong>Password protected NuGet package sources not supported in the following PowerShell commands:</strong></p>

<ul>
<li>Find-Package</li>
<li>Get-Package</li>
</ul>
</li>
</ul>


<p>Note that the other NuGet PowerShell commands are supported.</p>

<p>The NuGet extensions addin will not send usernames and passwords to the PowerShell Core
host console application. .NET Core also does not support decrypting passwords stored in the
NuGet.Config file.</p>

<p>The Find-Package and Get-Package commands all run completely within PowerShell hosted in the .NET Core
console application.</p>

<p>The other commands work since they run partially within Visual for Mac where actions involving password protected
NuGet package sources are supported.</p>

<ul>
<li><strong>Requires .NET Core 2.1 SDK to be installed</strong></li>
</ul>


<h2>Opening the NuGet Package Manager Console window</h2>

<p>From the View menu, select Pads, then select NuGet Package Manager Console.</p>

<p><img src="/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/ViewPadsNuGetPackageManagerConsoleMenu.png" title="&lsquo;View &ndash; Pages &ndash; NuGet Package Manager Console menu&rsquo; &lsquo;View &ndash; Pages &ndash; NuGet Package Manager Console menu&rsquo;" ></p>

<h2>Â Entity Framework Core Support</h2>

<p>The PowerShell commands provided by the
<a href="https://docs.microsoft.com/en-us/ef/core/miscellaneous/cli/powershell">Microsoft.EntityFrameworkCore.Tools NuGet package</a>
are supported in .NET Core projects.</p>

<ul>
<li>Add-Migration</li>
<li>Drop-Database</li>
<li>Get-DbContext</li>
<li>Remove-Migration</li>
<li>Scaffold-DbContext</li>
<li>Script-Migration</li>
<li>Update-Database</li>
</ul>


<p><img src="/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/EntityFrameworkCoreMigrationPowerShellCommands.png" title="&lsquo;Package Manager Console &ndash; Entity Framework Core Add-Migration and Update-Database commands&rsquo; &lsquo;Package Manager Console &ndash; Entity Framework Core Add-Migration and Update-Database commands&rsquo;" ></p>

<p>Note that the Entity Framework Core commands are not currently supported in projects that target the .NET Framework. This
is because the PowerShell commands attempt to directly run ef.exe that is included in the NuGet package instead of using the .NET Core ef.dll
which is used with projects that target .NET Core.</p>

<h2>Tab Completion</h2>

<p>Pressing tab in the console window will try to auto-complete the command being typed in.</p>

<p><img src="/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/TabCompletionNewtonsoftJson.png" title="&lsquo;Tab completion &ndash; Install-Package Newtonsoft.Json&rsquo; &lsquo;Tab completion &ndash; Install-Package Newtonsoft.Json&rsquo;" ></p>

<p><img src="/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/TabCompletionPackageVersion.png" title="&lsquo;Tab completion &ndash; Install-Package Newtonsoft.Json -Version&rsquo; &lsquo;Tab completion &ndash; Install-Package Newtonsoft.Json -Version&rsquo;" ></p>

<p>If there is only one match on pressing tab then the text will be inserted.</p>

<p>If there are multiple possible matches then a window will be displayed allowing an
item to be selected by pressing Tab, Enter or Return. Typing with this completion list
window open will filter the items in the list.</p>

<h2>Stopping the PowerShell command being run</h2>

<p>When a PowerShell command is being run the Stop button is enabled. The Stop button is the last button on the top right of the NuGet
Package Console window.</p>

<p><img src="/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/PackageManagerConsoleStopButton.png" title="&lsquo;Package Manager Console stop button&rsquo; &lsquo;Package Manager Console stop button&rsquo;" ></p>

<p>Clicking this button will attempt to stop the PowerShell command being run.</p>

<p><img src="/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/PackageManagerConsolePipelineStopped.png" title="&lsquo;Package Manager Console pipeline stopped&rsquo; &lsquo;Package Manager Console pipeline stopped&rsquo;" ></p>

<h2>Opening the NuGet Package Console configuration page</h2>

<p>At the top of the NuGet Package Console window there is a cog icon after the list of package sources.</p>

<p><img src="/images/blog/NuGetPowerShellCoreConsoleVisualStudioMac8-0/PackageManagerConsoleCogIcon.png" title="&lsquo;Package Manager Console configure sources &ndash; cog icon&rsquo; &lsquo;Package Manager Console configure sources cog icon&rsquo;" ></p>

<p>Clicking this cog icon will open the NuGet Package Sources configuration
page which is also available from Preferences &ndash; NuGet &ndash; Sources.</p>

<h2>Installation</h2>

<p>The NuGet extensions addin is available from the Visual Studio for Mac extensions repository. To install the addin:</p>

<ul>
<li>From the main menu, open the Extensions Manager dialog.</li>
<li>Select the Gallery tab.</li>
<li>Expand IDE extensions.</li>
<li>Select NuGet Package Management Extensions 0.18 or later.</li>
<li>Click the Refresh button if the addin is not visible.</li>
<li>Click Installâ¦ to install the addin.</li>
<li>Restart Visual Studio for Mac.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 8.0]]></title>
    <link href="http://lastexitcode.com/blog/2019/04/20/NuGetSupportInVisualStudioMac8-0/"/>
    <updated>2019-04-20T12:40:00+01:00</updated>
    <id>http://lastexitcode.com/blog/2019/04/20/NuGetSupportInVisualStudioMac8-0</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> Fixed build action not available after installing package into a PackageReference project</li>
<li> Fixed NuGet extension api install events not raised for PackageReference projects</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 8.0</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2019-mac-relnotes">release notes</a>.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed build action not available on installing package into a PackageReference project</strong></p>

<p>After installing the Xamarin.GooglePlayServices.Basement NuGet package, into a project
that used PackageReferences, the GoogleServicesJson build action, defined by this NuGet package,
was not available in the list of build actions when you right clicked a file in the
Solution window. The build action was available after the solution was closed and re-opened.</p>

<p>Installing a NuGet package into a project that used PackageReferences
would not re-evaluate the project&rsquo;s MSBuild information. This resulted in any custom
<a href="https://docs.microsoft.com/en-us/visualstudio/msbuild/visual-studio-integration-msbuild?view=vs-2019#additional-build-actions">AvailableItemNames</a>
not being available to be used as a build action
in the Solution window. The build actions for a project were cached so these
are now cleared to ensure the latest items are available
after an re-evaluation.</p>

<p><strong>Fixed NuGet extension api install events not raised for PackageReference projects</strong></p>

<p>The NuGet extension API has a PackageReferenceAdded event and a
PackageReferenceRemoved. These were being raised if a project had
a packages.config file but not if the project used PackageReferences.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.8]]></title>
    <link href="http://lastexitcode.com/blog/2019/03/02/NuGetSupportInVisualStudioMac7-8/"/>
    <updated>2019-03-02T12:40:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2019/03/02/NuGetSupportInVisualStudioMac7-8</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet package diagnostics displayed in Solution window</li>
<li> Support restoring multi-target framework projects</li>
<li> Display summary of NuGet restore errors in Package Console</li>
<li> Fixed wrong version of Microsoft.AspNetCore.App being restored</li>
<li> Fixed Paket restore not working with SDK style projects</li>
<li> Fixed NuGet restore ignoring build targets</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.8</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#whats-new-in-78">release notes</a>.</p>

<h2>NuGet package diagnostics displayed in Solution window</h2>

<p>NuGet package diagnostic warnings are now shown in the Solution window.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-8/NuGetPackageDiagnosticWarningInSolutionWindow.png" title="&lsquo;NuGet package diagnostic warnings in Solution Window&rsquo; &lsquo;NuGet package diagnostic warnings in Solution Window&rsquo;" ></p>

<p>The diagnostic warnings are shown underneath the NuGet package with
a warning icon. Hovering over the warning icon will show a tooltip.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-8/NuGetPackageDiagnosticWarningTooltip.png" title="&lsquo;NuGet package diagnostic warning tooltip in Solution Window&rsquo; &lsquo;NuGet package diagnostic warning tooltip in Solution Window&rsquo;" ></p>

<h2>Support restoring multi-target framework projects</h2>

<p>Projects that have multiple target frameworks now have all frameworks restored.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-8/MultiTargetProjectInSolutionWindow.png" title="&lsquo;Multi-target framework project restored in Solution window&rsquo; &lsquo;Multi-target framework project restored in Solution window&rsquo;" ></p>

<p>Previously only the first target framework would be restored.</p>

<p>Conditional PackageReferences defined in the project file are also now
respected when restoring the project. Previously the conditions on the
PackageReferences would be ignored.</p>

<p><img src="/images/blog/NuGetSupportInVisualStudioMac7-8/ConditionalPackageReferences.png" title="&lsquo;Conditional PackageReferences restored in Solution window&rsquo; &lsquo;Conditional PackageReferences restored in Solution window&rsquo;" ></p>

<p>Visual Studio for Mac now uses the GenerateRestoreGraphFile MSBuild target to determine
package dependencies. Previously this information was obtained from the project information
held in memory. This fixes several NuGet restore bugs in Visual Studio for Mac.</p>

<h2>Display summary of NuGet restore errors in Package Console</h2>

<p>Creating an xUnit .NET Core test project named &lsquo;xunit&rsquo; fails to
restore since there is a package reference cycle between the project
and the xunit NuGet package. Whilst this reference cycle is reported it is
hidden in the Package Console output and all you would see was a message
indicating that the restore had failed. Now the error information is
shown at the end of the
Package Console as a summary of the failures to make it easier to
see the problem.</p>

<p>Now for the xunit project you will see the following
at the end of the Package Console output:</p>

<pre><code>Cycle detected.
  xunit -&gt; xunit (&gt;= 2.3.1).
Restore failed.
</code></pre>

<h2>Bug Fixes</h2>

<p><strong>Fixed wrong version of Microsoft.AspNetCore.App being restored</strong></p>

<p>With an ASP.NET Core 2.1 project, that had included a PackageReference for
Microsoft.AspNetCore.App version 2.1.5, Visual Studio for Mac would incorrectly restore
Microsoft.AspNetCore.App version 2.1.1.</p>

<p>Using the GenerateRestoreGraphFile MSBuild target to determine package reference
information when restoring has fixed this problem.</p>

<p><strong>Fixed Paket restore not working with SDK style projects</strong></p>

<p>When Paket is used with an SDK style project it injects PackageReferences
via the PaketRestore target from the Paket.Restore.targets file. Visual Studio for
Mac was not using MSBuild to get the package reference information so
PackageReferences defined by Paket were not being restored or made available.</p>

<p><strong>Fixed NuGet restore ignoring build targets</strong></p>

<p>OrchardCore would fail to restore when opened in Visual Studio for Mac. OrchardCore
defines the PackageReference versions in a separate MSBuild .props file and has a custom
MSBuild target to define these versions. This custom MSBuild target is now supported
since Visual Studio for Mac uses the GenerateRestoreGraphFile MSBuild target to
determine package references when restoring.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NuGet Support in Visual Studio for Mac 7.7]]></title>
    <link href="http://lastexitcode.com/blog/2018/12/19/NuGetSupportInVisualStudioMac7-7/"/>
    <updated>2018-12-19T14:40:00+00:00</updated>
    <id>http://lastexitcode.com/blog/2018/12/19/NuGetSupportInVisualStudioMac7-7</id>
    <content type="html"><![CDATA[<h2>Changes</h2>

<ul>
<li> NuGet 4.8 support</li>
<li> Support PackageReferences without a Version</li>
<li> Fixed NuGet sdk resolver not being found in Mono 5.16</li>
<li> Fixed null reference exception in package compatiblity check</li>
<li> Fixed Update menu enabled when project has no PackageReferences</li>
<li> Fixed updating a NuGet package changing a reference&rsquo;s ItemGroup</li>
<li> Fixed updating a NuGet package changing a fully qualified reference hint path to a relative path</li>
</ul>


<p>More information on all the new features and changes in <a href="https://www.visualstudio.com/vs/visual-studio-mac/">Visual Studio for Mac 7.7</a>
can be found in the <a href="https://docs.microsoft.com/en-us/visualstudio/releasenotes/vs2017-mac-relnotes#whats-new-in-77">release notes</a>.</p>

<h2>NuGet 4.8 support</h2>

<p><a href="https://docs.microsoft.com/en-us/nuget/release-notes/nuget-4.8-rtm">NuGet 4.8.0.5385</a> is now
included with Visual Studio for Mac 7.7.2.</p>

<h2>Support PackageReferences without a Version</h2>

<p>Visual Studio for Mac did not support projects that used PackageReferences without
specifying a version.</p>

<pre><code>&lt;ItemGroup&gt;
    &lt;PackageReference Include="Newtonsoft.Json" /&gt;
&lt;/ItemGroup&gt;
</code></pre>

<p>The version may be defined elsewhere in another MSBuild file, such as the Directory.props file,
or by the .NET Core SDK, as with the
Microsoft.AspNetCore.App PackageReference in ASP.NET Core projects. By default a
PackageReference without a version will restore the lowest available version for
the NuGet package.</p>

<p>However in Visual Studio for Mac there were several problems with PackageReferences that
did not specify a version.</p>

<p>Opening a project with a PackageReference without a Version
would result in an ArgumentNullException being logged and the
Add Packages dialog could not be opened.</p>

<p>If the PackageReference, in a non-SDK project, had no Version
then it was not displayed in the Packages folder and a null reference
exception was logged. The Solution window would try to find
the package to check if it was installed which is not possible
with a missing version and NuGet&rsquo;s VersionFolderPathResolver
would throw a null reference exception.</p>

<p>If a PackageReference had no Version then a null reference exception
was logged when checking for updates. A null version is now handled.</p>

<p>Right clicking the package in the Packages folder would log a
null reference exception if a non-SDK style project was used and it
had a PackageReference without a version. This is now handled and the
menu label will show &ldquo;Version None&rdquo;.</p>

<h2>Bug Fixes</h2>

<p><strong>Fixed NuGet sdk resolver not being found in Mono 5.16</strong></p>

<p>More recent versions of MSBuild, such as MSBuild 16.0.40 which is included
with Mono 5.16.0.173, allow the sdk resolver to use a manifest.xml file to
define the assembly where the resolver can be found:</p>

<pre><code>&lt;SdkResolver&gt;
  &lt;Path&gt;..\..\Microsoft.Build.NuGetSdkResolver.dll&lt;/Path&gt;
&lt;/SdkResolver&gt;
</code></pre>

<p>This manifest file not supported and resulted in the NuGet sdk resolver not
being loaded. Any projects that use an MSBuild sdk from a NuGet
package no longer worked and would result in an &lsquo;Invalid configuration
mapping&rsquo; error shown in the Solution window. The sdk resolution in
Visual Studio for Mac has now
been updated based on the latest MSBuild source code.</p>

<p><strong>Fixed null reference exception in compatiblity check</strong></p>

<p>Changing the target framework of a project that uses a packages.config
file will result in a package compatiblity check being run.
If the project had both a PackageReference and a packages.config file
the package compatiblity check would fail with a null
reference exception. Visual Studio for Mac was treating the project as
though it was using a packages.config file, when it should have been
treated as a PackageReference project. This resulted in a null
reference exception being thrown when checking for package compatiblity.</p>

<p><strong>Fixed Update menu enabled when project has no PackageReferences</strong></p>

<p>The Update menu was enabled if the project used PackageReferences but
had none in the project. Without any PackageReferences in the
project there is no packages to update. The check to determine if the Update
menu should be enabled has been changed to make sure the project has
PackageReferences in the project file, not just imported
PackageReferences. The Update
NuGet Packages menu, which is used to update packages for the solution,
has also been changed to have the same behaviour.</p>

<p><strong>Fixed updating a NuGet package changing a reference&rsquo;s ItemGroup</strong></p>

<p>On updating a NuGet package the Reference item will now be modified in
place in the project file.</p>

<p>On updating a NuGet package in a project that used a packages.config
the old NuGet package is uninstalled and the new one is installed.
This removes the old references and adds new references. If the
references are in an ItemGroup with a condition then the new
reference may be added into a different ItemGroup if there are other
ItemGroups with references. To prevent this from happening the
changes to made to references are cached and not applied to the
project until all the NuGet actions have all been run. This allows
a NuGet package update which would remove a reference and then
add a new reference to be
converted into an update of the original Reference in the project,
changing just its HintPath, so its
location in the project file is not changed.</p>

<p>This was fixed in Visual Studio for Mac 7.7.3.</p>

<p><strong>Fixed updating a NuGet package changing a fully qualified reference hint path to a relative path</strong></p>

<p>Updating a NuGet package, where the project, which uses a packages.config file,
had been modified so the
original reference had a fully qualified hint path, would result in
a relative path used for the hint path when the reference was updated.</p>

<p>Now if the original hint path was full path then if the hint
path for the reference is changed it is saved using a full
path. This is different behaviour to how Visual Studio on Windows works, which
will always add a relative hint path for the reference.</p>

<p>This was fixed in Visual Studio for Mac 7.7.3.</p>
]]></content>
  </entry>
  
</feed>
